/******************************************************************************
 *	 Copyright 2024 NVIDIA Corporation. All rights reserved.
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/

mdl 1.7;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::dimension;
import ::nvidia::core_definitions::blend_colors;


const string COPYRIGHT = 
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

const string DESCRIPTION = "A wool material.";

annotation preview_scale( float f);

int lowbias32(int x)
{
    x ^= x >>> 16;
    x *= 0x7feb352d;
    x ^= x >>> 15;
    x *= 0x846ca68b;
    x ^= x >>> 16;
    return x;
}

float f_n(float n, float a,  float h, float l) {
	float k = ::math::fmod(n + h * 12.f, 12.f);
	
	return l - a * ::math::max(-1.0f, ::math::min(::math::min(k-3.0f, 9.0f-k), 1.0f));
}

float2x2 invert_2x2(float2x2 M)
{
	float det = M[0][0]*M[1][1] - M[0][1]*M[1][0];
	//https://www.chilimath.com/lessons/advanced-algebra/inverse-of-a-2x2-matrix/
	return (1.0 / det) * float2x2(M[1][1], -M[0][1], -M[1][0], M[0][0]);
}

float uint2float(int x)
{
    return float(x & 0x7FFFFFFF) + (x < 0 ? 2147483648.0 : 0.0);
}

float2 rnd22(int2 p) {
	float2 ret_val = float2(
		uint2float(lowbias32(p[0] + lowbias32(p[1]))) / 4294967296.f,
		uint2float(lowbias32(p[0] + 32000 + lowbias32(p[1]))) / 4294967296.f
	);
    return ret_val;
}    

float histogram_range(float input, float range = 1.0f, float position = 0.5f)
{	
	float low = ::math::clamp(1.0 - ::math::min(((1.0 - position) + range * 0.5), (1.0 - position) * 2), 0.0, 1.0);
	float high = ::math::clamp(::math::min((position + range * 0.5 ), position * 2.0), 0.0, 1.0);
	return ::math::lerp(low, high, input);
}

float3 rgb2hsl(float3 c)
[[
	::anno::description("Converts a color value to HSL. The function outputs the hue to \n"
						"lie in the range from 0.0-1.0."),
	::anno::author("NVIDIA vMaterials")
]]
{
	float3 hsl;
	float cMax = ::math::max(::math::max(c.x, c.y), c.z);
	float cMin = ::math::min(::math::min(c.x, c.y), c.z);
	float delta = cMax - cMin;
	
	hsl.z = (cMax + cMin) / 2.0;	
	hsl.x = ((cMax == cMin) ? 0 :
		(cMax == c.x) ? (c.y - c.z) / delta + ((c.z > c.y) ? 6.0f : 0.0f):
		(cMax == c.y) ? (c.z - c.x) / delta + 2.0 : (c.x - c.y) / delta + 4.0) / 6.0f;
	hsl.y = (hsl.z == 0.0 || hsl.z == 1.0) ? 0.0 : delta / (1.0 - ::math::abs(2.0 * hsl.z - 1.0));
	return hsl;
}

color hsl2rgb(float3 hsl)
[[
	::anno::description("Converts a HSL value back to a color. Note that the hue is expected to \n"
						"lie in the range from 0.0-1.0."),
	::anno::author("NVIDIA vMaterials")
]]
{
	float h = hsl.x, s = hsl.y, l = hsl.z;
	float a = s * ::math::min(l, 1.0f - l);
	return color(f_n(0.0, a, h, l),
				f_n(8.0, a, h, l),
				f_n(4.0, a, h, l));	
}

struct vm_coordinates{
	float2 uv;
	float rotation;
	int uv_space_index;
	float4 carry;
};

struct vm_col_norm{
	float3 value;
	float3 norm;
};

enum vm_mono_select 
[[
    ::anno::description("Modes for the creation of a gray-scale value from a color."),
    ::anno::hidden()
]]
{
	mono_r = 0,
	mono_g = 1,
	mono_b = 2,
	mono_a = 3,
	mono_average = 4
};



vm_coordinates vm_coord
(
	float2 translation	= float2(0.0f, 0.0) [[
		::anno::display_name("Translation"),
		::anno::description("Translates the coordinates.")
	]],
	float rotation 		= 0.0f [[
		::anno::display_name("Rotation"),
		::anno::description("Rotates the coordinates in degrees.")
	]],
	float2 scaling		= float2(1.0f, 1.0f) [[
		::anno::display_name("Scaling"),
		::anno::description("Scales the coordinates.")
	]],	
	uniform int uv_space = 0 [[
		::anno::display_name("UV Space"),
		::anno::description("Chose the UV space.")
	]]
)
[[
		::anno::display_name("vm Transform"),
		::anno::description("Generates coordinates to be used in vm_lookup functions.")
]]
{
	vm_coordinates uv;
	::base::texture_coordinate_info info = ::base::coordinate_source( ::base::texture_coordinate_uvw, uv_space);
	uv.rotation = (rotation * 3.1415926535897932384626433832f) / 180.f;
	uv.uv = float2(info.position.x, info.position.y);
	float sine   = ::math::sin(uv.rotation);
	float cosine = ::math::cos(uv.rotation);
	float2x2 rot = float2x2(cosine, -sine, sine, cosine);
	uv.uv = rot * uv.uv;
	uv.uv /= scaling;
	uv.uv += translation;
	// Translation before or after rotation?
	return uv;
}


float3 vm_tex_infinite(
	uniform texture_2d tex = texture_2d(),
	vm_coordinates uv = vm_coord(),
	float3 average_color = float3(0.5f, 0.5f, 1.0f),
	float patch_size = 1.0,
	bool gamma_correct = true,
	float gamma = 2.2f
)
{
	float2 uv_in = uv.uv;
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * (uv.uv / patch_size); //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V))+int2(935); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;
	
	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
		O = (W[0] = F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I))) - m)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0,1)))) - m)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1,0)))) - m);
	else
		O = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1))))   - m)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1, 0)))) - m)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0, 1)))) - m);
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0f, 1.0f);
	
	return gamma_correct? ::math::pow(::math::max(O, float3(0.0f)), gamma) : float3(O);
}



// Returns an infinite lookup plus a normal map lookup
vm_col_norm vm_tex_infinite_color_normal(
	uniform texture_2d tex_col = texture_2d(),
	uniform texture_2d tex_norm = texture_2d(),
	vm_coordinates uv = vm_coord(),
	float3 average_color = float3(0.5),
	float3 average_norm = float3(0.5f, 0.5f, 1.0f),
	float patch_size = 1.0,
	// Color output settings
	bool color_out_gamma_correct = true,
	float color_out_gamma = 2.2f,
	// Normal output setting
	float normal_strength = 1.0
)
{
	vm_col_norm ret;
	float2 uv_in = uv.uv;
	
	float3 O_a = float3(0.f);
	float3 O_b = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * (uv.uv / patch_size); //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V))+int2(935); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m_a = average_color;
	float3 m_b = average_norm;

	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
	{
		O_a = (W[0] = F[2]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I))) - m_a)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(0,1)))) - m_a)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1,0)))) - m_a);
		O_b = (W[0] = F[2]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I))) - m_b)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(0,1)))) - m_b)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1,0)))) - m_b);
	}
	else
	{
		O_a = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1))))   - m_a)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1, 0)))) - m_a)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(0, 1)))) - m_a);
		O_b = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1))))   - m_b)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1, 0)))) - m_b)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(0, 1)))) - m_b);
	}
	
	O_a = m_a + O_a/::math::length(W);
	O_a = ::math::clamp( (O_a), 0.0, 1.0);
	ret.value = color_out_gamma_correct? ::math::pow(::math::max(O_a, float3(0.0f)), color_out_gamma) : float3(O_a);
	
	O_b = m_b + O_b/::math::length(W);
	O_b = ::math::clamp( (O_b), 0.0, 1.0);
	
	float3 norm = (O_b - float3(.5f)) * 2.0f;
	norm = ::math::normalize(norm * float3(normal_strength, normal_strength, 1.0));
	// if any rotation happened prior to the lookup, compensate for it
	norm = float3(::math::cos(uv.rotation) * norm.x - ::math::sin(uv.rotation) * norm.y,
					::math::sin(uv.rotation) * norm.x + ::math::cos(uv.rotation) * norm.y,
					norm.z);
	ret.norm = norm.x * ::state::texture_tangent_u(uv.uv_space_index) +
			norm.y * ::state::texture_tangent_v(uv.uv_space_index) +
			norm.z * ::state::normal();	
			
	return ret;
}


export material Wool_Melton(
    color fabric_color = color(0.637597f, 0.637597f, 0.637597f) [[
        ::anno::description("Choose the color of the fabric."),
        ::anno::display_name("Fabric Color"),
        ::anno::in_group("Appearance"),
        ::anno::ui_order(0)
    ]],
    float roughness = 1.0f [[
        ::anno::description("Higher roughness values lead to bigger highlights and blurrier reflections."),
        ::anno::display_name("Roughness"),
        ::anno::in_group("Appearance"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(1)
    ]],
    float white_fibers_weight = 0.29f [[
        ::anno::description("Adds a white fuzz layer on the material which gives it a more used appearance."),
        ::anno::display_name("White Fibers Weight"),
        ::anno::in_group("Appearance"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(2)
    ]],
    float sheen_weight = 0.38f [[
        ::anno::description("Adds a fuzzy, soft appearance around the material when viewed at grazing angles."),
        ::anno::display_name("Sheen Weight"),
        ::anno::in_group("Appearance"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(3)
    ]],
    float bump_strength = 1.f [[
        ::anno::description("Specifies the strength of the bump."),
        ::anno::display_name("Bump Strength"),
        ::anno::in_group("Appearance"),
        ::anno::hard_range(0.f, 2.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(4)
    ]],
    float2 texture_translate = float2(0.f) [[
        ::anno::description("Controls the position of the texture."),
        ::anno::display_name("Texture Translate"),
        ::anno::in_group("Transform"),
        ::anno::ui_order(5)
    ]],
    float texture_rotate = 0.f [[
        ::anno::description("Rotates angle of the texture in degrees."),
        ::anno::display_name("Texture Rotate"),
        ::anno::in_group("Transform"),
        ::anno::soft_range(0.f, 360.f),
        ::anno::ui_order(6)
    ]],
    float2 texture_scale = float2(0.5f) [[
        ::anno::description("Larger numbers increase the size."),
        ::anno::display_name("Texture Scale"),
        ::anno::in_group("Transform"),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
		::preview_scale(3.5f),
        ::anno::ui_order(7)
    ]],
    uniform int uv_space_index = 0 [[
        ::anno::description("Uses selected UV space for material."),
        ::anno::display_name("UV Space Index"),
        ::anno::in_group("Transform"),
        ::anno::ui_order(8)
    ]],
    uniform bool roundcorners_enable = false [[
        ::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
        ::anno::display_name("Enable Round Corners"),
        ::anno::in_group("Round Corners"),
        ::anno::ui_order(9)
    ]],
    uniform float roundcorners_radius_mm = 1.5f [[
        ::anno::description("Radius of the rounded corners in millimeters."),
        ::anno::display_name("Round Corner Radius (mm)"),
        ::anno::in_group("Round Corners"),
        ::anno::soft_range(0.f, 10.f),
        ::anno::ui_order(10)
    ]],
    uniform bool roundcorners_across_materials = false [[
        ::anno::description("Applies the round corner effect across different materials when enabled."),
        ::anno::display_name("Across Materials"),
        ::anno::in_group("Round Corners"),
        ::anno::ui_order(11)
    ]])
[[
    ::anno::display_name("Wool Melton - White"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "white", "light", "neutral"))
]]
 = 
    let {
		bool tmp0 = false;
		float2 texture_rescale = texture_scale * 0.11f;  // texture covers 11 cm, scale up so it covers 1m per default
		
		texture_2d multi_tex     = texture_2d("./textures/wool_melton_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear);
		texture_2d diff_fuzz_tex = texture_2d("./textures/wool_melton_R_diff_G_fuzz.jpg", ::tex::gamma_linear);
		texture_2d norm_tex      = texture_2d("./textures/wool_melton_norm.jpg", ::tex::gamma_linear);
		
        material_surface tmp1(::df::custom_curve_layer(0.0599999987f, 1.f, 5.f, histogram_range(vm_tex_infinite(multi_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.444999993f, 0.662f, 0.472000003f), 1.f, false, 2.20000005f).y, 1.f, 0.459999979f), ::df::microfacet_ggx_smith_bsdf(::math::pow(histogram_range(1.f - vm_tex_infinite(multi_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.444999993f, 0.662f, 0.472000003f), 1.f, false, 2.20000005f).x, 0.98999995f, roughness * 0.300000012f + 0.709999979f), 2.f) * ::math::pow(histogram_range(1.f - vm_tex_infinite(multi_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.444999993f, 0.662f, 0.472000003f), 1.f, false, 2.20000005f).x, 0.98999995f, roughness * 0.300000012f + 0.709999979f), 2.f), ::math::pow(histogram_range(1.f - vm_tex_infinite(multi_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.444999993f, 0.662f, 0.472000003f), 1.f, false, 2.20000005f).x, 0.98999995f, roughness * 0.300000012f + 0.709999979f), 2.f) * ::math::pow(histogram_range(1.f - vm_tex_infinite(multi_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.444999993f, 0.662f, 0.472000003f), 1.f, false, 2.20000005f).x, 0.98999995f, roughness * 0.300000012f + 0.709999979f), 2.f), color(1.f, 1.f, 1.f), color(1.f, 1.f, 1.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::df::weighted_layer(sheen_weight, ::df::sheen_bsdf(0.0700000003f, hsl2rgb(rgb2hsl(float3(fabric_color)) * float3(1.f, 0.74000001f, 1.f)), color(1.f, 1.f, 1.f), ::df::weighted_layer(1.f, ::df::diffuse_reflection_bsdf(nvidia::core_definitions::blend_colors(nvidia::core_definitions::blend_colors(fabric_color, color(::math::lerp(1.f, vm_tex_infinite_color_normal(diff_fuzz_tex, norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.584999979f, 0.00200000009f, 0.5f), float3(0.5f, 0.5f, 1.f), 0.159999996f, true, 2.20000005f, bump_strength).value.x, 1.f)), ::base::color_layer_overlay, 1.f, true).tint, color(1.f, 1.f, 1.f), ::base::color_layer_blend, ::math::pow(white_fibers_weight * vm_tex_infinite_color_normal(diff_fuzz_tex, norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.584999979f, 0.00200000009f, 0.5f), float3(0.5f, 0.5f, 1.f), 0.159999996f, true, 2.20000005f, bump_strength).value.y, 0.629999995f), true).tint, 0.f), bsdf(), vm_tex_infinite_color_normal(diff_fuzz_tex, norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.584999979f, 0.00200000009f, 0.5f), float3(0.5f, 0.5f, 1.f), 0.159999996f, true, 2.20000005f, bump_strength).norm)), ::df::weighted_layer(1.f, ::df::diffuse_reflection_bsdf(nvidia::core_definitions::blend_colors(nvidia::core_definitions::blend_colors(fabric_color, color(::math::lerp(1.f, vm_tex_infinite_color_normal(diff_fuzz_tex, norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.584999979f, 0.00200000009f, 0.5f), float3(0.5f, 0.5f, 1.f), 0.159999996f, true, 2.20000005f, bump_strength).value.x, 1.f)), ::base::color_layer_overlay, 1.f, true).tint, color(1.f, 1.f, 1.f), ::base::color_layer_blend, ::math::pow(white_fibers_weight * vm_tex_infinite_color_normal(diff_fuzz_tex, norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.584999979f, 0.00200000009f, 0.5f), float3(0.5f, 0.5f, 1.f), 0.159999996f, true, 2.20000005f, bump_strength).value.y, 0.629999995f), true).tint, 0.f), bsdf(), vm_tex_infinite_color_normal(diff_fuzz_tex, norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.584999979f, 0.00200000009f, 0.5f), float3(0.5f, 0.5f, 1.f), 0.159999996f, true, 2.20000005f, bump_strength).norm), vm_tex_infinite_color_normal(diff_fuzz_tex, norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.584999979f, 0.00200000009f, 0.5f), float3(0.5f, 0.5f, 1.f), 0.159999996f, true, 2.20000005f, bump_strength).norm), vm_tex_infinite_color_normal(diff_fuzz_tex, norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.584999979f, 0.00200000009f, 0.5f), float3(0.5f, 0.5f, 1.f), 0.159999996f, true, 2.20000005f, bump_strength).norm), material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        color tmp3 = color(1.f, 1.f, 1.f);
        material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f), emission_intensity: color(0.f, 0.f, 0.f));
        material_geometry tmp5(float3(0.f), 1.f, roundcorners_enable ? ::state::rounded_corner_normal(roundcorners_radius_mm * 0.00100000005f, roundcorners_across_materials, 1.f) : ::state::normal());
        hair_bsdf tmp6 = hair_bsdf();
    } in
        material(
            thin_walled: tmp0,
            surface: tmp1,
            backface: tmp2,
            ior: tmp3,
            volume: tmp4,
            geometry: tmp5,
            hair: tmp6);


// 2
export material Wool_Melton_Sand(*)
[[
    ::anno::display_name("Wool Melton - Sand"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Sand.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "white", "light", "warm", "sand"))
]] = Wool_Melton(
	fabric_color:                  color(0.637597f, 0.577580f, 0.485150f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 3
export material Wool_Melton_Gray(*)
[[
    ::anno::display_name("Wool Melton - Gray"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Gray.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "gray", "neutral"))
]] = Wool_Melton(
	fabric_color:                  color(0.274677f, 0.274677f, 0.274677f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 4
export material Wool_Melton_Tobacco(*)
[[
    ::anno::display_name("Wool Melton - Tobacco"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Tobacco.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "tobacco", "brown"))
]] = Wool_Melton(
	fabric_color:                  color(0.155926f, 0.090842f, 0.038204f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 5
export material Wool_Melton_Carbon(*)
[[
    ::anno::display_name("Wool Melton - Carbon"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Carbon.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "carbon", "gray", "dark", "neutral"))
]] = Wool_Melton(
	fabric_color:                  color(0.023153f, 0.027321f, 0.031896f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 6
export material Wool_Melton_Saffron(*)
[[
    ::anno::display_name("Wool Melton - Saffron"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Saffron.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "saffron", "orange", "warm"))
]] = Wool_Melton(
	fabric_color:                  color(0.610496f, 0.262251f, 0.009134f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

//7
export material Wool_Melton_Paprika(*)
[[
    ::anno::display_name("Wool Melton - Paprika"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Paprika.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "paprika", "orange", "red", "warm", "saturated"))
]] = Wool_Melton(
	fabric_color:                  color(0.679542f, 0.066626f, 0.018500f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 8
export material Wool_Melton_Garnet(*)
[[
    ::anno::display_name("Wool Melton - Garnet"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Garnet.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "red", "warm", "dark"))
]] = Wool_Melton(
	fabric_color:                  color(0.215861f, 0.013702f, 0.030713f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 9
export material Wool_Melton_Green_Tea(*)
[[
    ::anno::display_name("Wool Melton - Green Tea"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Green_Tea.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "green"))
]] = Wool_Melton(
	fabric_color:                  color(0.230740f, 0.318547f, 0.030713f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 10
export material Wool_Melton_Jungle(*)
[[
    ::anno::display_name("Wool Melton - Jungle"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Jungle.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "green", "dark"))
]] = Wool_Melton(
	fabric_color:                  color(0.031896f, 0.080220f, 0.023153f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 11
export material Wool_Melton_Fuchsia(*)
[[
    ::anno::display_name("Wool Melton - Fuchsia"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Fuchsia.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "fuchsia", "purple", "saturated", "magenta", "violet"))
]] = Wool_Melton(
	fabric_color:                  color(0.386429f, 0.034340f, 0.171441f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 12
export material Wool_Melton_Aubergine(*)
[[
    ::anno::display_name("Wool Melton - Aubergine"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Aubergine.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "purple", "dark", "violet"))
]] = Wool_Melton(
	fabric_color:                  color(0.066626f, 0.019382f, 0.080220f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 13
export material Wool_Melton_Morning_Glory(*)
[[
    ::anno::display_name("Wool Melton - Morning Glory"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Morning_Glory.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "blue", "cool"))
]] = Wool_Melton(
	fabric_color:                  color(0.109462f, 0.114435f, 0.304987f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);

// 14
export material Wool_Melton_Blue_Jay(*)
[[
    ::anno::display_name("Wool Melton - Blue Jay"),
	::anno::description(DESCRIPTION),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::author("NVIDIA"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Miguel Guerrero"),
	::anno::contributor("Vanni Brighella"),
	::anno::thumbnail("./.thumbs/Wool_Melton.Wool_Melton_Blue_Jay.png"),
	::anno::key_words(string[]("fabric", "felt","wool", "melton", "clothing", "sheen", "fashion", "new", "blue", "cool"))
]] = Wool_Melton(
	fabric_color:                  color(0.072272f, 0.184475f, 0.479320f),
	roughness:                     1.0f,
	white_fibers_weight:           0.1f,
	sheen_weight:                  0.21f,
	bump_strength:				   1.0f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        1.0f,
	roundcorners_across_materials: false
);
