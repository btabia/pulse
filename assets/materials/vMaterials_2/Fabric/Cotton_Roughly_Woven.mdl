/******************************************************************************
 *     Copyright 2024 NVIDIA Corporation. All rights reserved.
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/


mdl 1.4;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::blend_colors;
import ::nvidia::core_definitions::dimension;

const string COPYRIGHT = 
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

annotation preview_scale( float f);

float histogram_range(float input, float range, float position)
{	
	float low = ::math::clamp(1.0 - ::math::min(((1.0 - position) + range * 0.5), (1.0 - position) * 2), 0.0, 1.0);
	float high = ::math::clamp(::math::min((position + range * 0.5 ), position * 2.0), 0.0, 1.0);
	return ::math::lerp(low, high, input);
}

::base::texture_coordinate_info vmat_transform(
								uniform float2 translation = float2(0.0, 0.0),
								uniform float rotation     = 0.0,
								uniform float2 scaling     = float2(1.0, 1.0),
								uniform ::base::texture_coordinate_system system = ::base::texture_coordinate_uvw,
								uniform int uv_space       = 0
)
{
	float rotation_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	
	float4x4 scale =
	float4x4(1.0 /scaling.x, 0.             ,  0. ,     0.,
			 0.            , 1.0 /scaling.y ,  0. ,     0.,
			 0.            , 0.             ,  1.0,     0.,
			 translation.x , translation.y  ,  0.0,     1.);

    float s = ::math::sin(rotation_rad);
    float c = ::math::cos(rotation_rad);
    float4x4 rotate =
	float4x4(  c  ,  -s   , 0.0 , 0.0,
			   s  ,   c   , 0.0 , 0.0,
			   0.0,   0.0 , 1.0 , 0.0,
			   0. ,   0.0 , 0.0 , 1.);
	
	return ::base::transform_coordinate(scale*rotate, ::base::coordinate_source(system, uv_space));
}



float3 srgb2rgb(float3 val)
{
	return ::math::pow(::math::max(val, float3(0.0f)), 2.2);
}


float uint2float(int x)
{
    return float(x & 0x7FFFFFFF) + (x < 0 ? 2147483648.0 : 0.0);
}

int lowbias32(int x)
{
    x ^= x >>> 16;
    x *= 0x7feb352d;
    x ^= x >>> 15;
    x *= 0x846ca68b;
    x ^= x >>> 16;
    return x;
}

float2 rnd22(int2 p) {
	float2 ret_val = float2(
		uint2float(lowbias32(p[0] + lowbias32(p[1]))) / 4294967296.f,
		uint2float(lowbias32(p[0] + 32000 + lowbias32(p[1]))) / 4294967296.f
	);
    return ret_val;
}    

float2x2 invert_2x2(float2x2 M)
{
	float det = M[0][0]*M[1][1] - M[0][1]*M[1][0];
	//https://www.chilimath.com/lessons/advanced-algebra/inverse-of-a-2x2-matrix/
	return (1.0 / det) * float2x2(M[1][1], -M[0][1], -M[1][0], M[0][0]);
}

float3 nonrepeat_lookup(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 1.0,
	float3 average_color = float3(0.5),
	float patch_size = 8.0
)
{
	
	float2 uv_in = float2(uvw.position[0], uvw.position[1]) * texture_scale;
	float Z =  patch_size;     // patch scale inside example texture
	float CON = 1.0f;
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * uv_in; //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V)); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;
	
	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )

		O = (W[0] = F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I))) - m*float(CON))
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0,1)))) - m*float(CON))
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1,0)))) - m*float(CON));
	else
		O = (W[0] =      -F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1))))   - m*float(CON))
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1, 0)))) - m*float(CON))
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0, 1)))) - m*float(CON));
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0, 1.0);
	
	return float3(O);
}

color endless_texture(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 10.0,
	float3 average_color = float3(0.5, 0.5, 1.0),
	float patch_size = 8.0,
	bool gamma_correct_lookup = true
)
{
	return gamma_correct_lookup ? color(srgb2rgb(
			nonrepeat_lookup (
				texture: texture,
				uvw: uvw,
				texture_scale: texture_scale,
				average_color: average_color,
				patch_size: patch_size
			))
		) : color(nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		));
}

float3 endless_normal(
	uniform texture_2d texture = texture_2d(),
	float factor = 1.0,
	bool flip_tangent_u = false,
	bool flip_tangent_v = false,
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 1.0,
	float3 average_color = float3(0.5, 0.5, 1.0),
	float patch_size = 8.0
)
{
	float3 transformed_tangent_u = flip_tangent_u ? uvw.tangent_u : - uvw.tangent_u;
    float3 transformed_tangent_v = flip_tangent_v ? uvw.tangent_v : - uvw.tangent_v;
	
	if (flip_tangent_u)
		transformed_tangent_u=-transformed_tangent_u;
	if (flip_tangent_v)
		transformed_tangent_v=-transformed_tangent_v;

	// normalized Lookup
	float3 tangent_space_normal =
         (nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		) - 0.5) * (2.0 * factor);
		
	 return ::math::normalize(uvw.tangent_u * tangent_space_normal.x +
          uvw.tangent_v * tangent_space_normal.y +
          ::state::normal()*1.0); 
}

float3 normalmap_normal(
	uniform texture_2d texture,
	float factor = 1.0,
	::base::texture_coordinate_info uvw = ::base::texture_coordinate_info()
)
{
	float3 lookup = (::tex::lookup_float3(texture, float2(uvw.position.x, uvw.position.y)) - 0.5) * (factor * 2.0);
	return ::math::normalize(uvw.tangent_u * lookup.x + uvw.tangent_v * lookup.y + ::state::normal());
}

export material Cotton_Roughly_Woven(
    uniform bool infinite_tiling = true [[
        ::anno::display_name("Infinite Tiling"),
        ::anno::description("Enables infinite tiling feature which removes repeating texture patterns."),
        ::anno::in_group("Appearance")
    ]],
    color fabric_color = color(0.796917f, 0.796917f, 0.796917f) [[
        ::anno::display_name("Fabric Color"),
        ::anno::description("Sets the color of the fabric."),
        ::anno::in_group("Appearance")
    ]],
    float fabric_brightness = 0.5f [[
        ::anno::display_name("Fabric Brightness"),
        ::anno::description("Adjusts the brightness of the fabric."),
		::anno::hard_range(0.0, 1.0),
        ::anno::in_group("Appearance")
    ]],
    float fabric_bump_factor = 1.f [[
        ::anno::display_name("Fabric Bump Factor"),
        ::anno::description("Adjusts the bump intensity of the surface."),
		::anno::hard_range(0.0, 1.0),
        ::anno::in_group("Appearance")
    ]],
    uniform float2 texture_translate = float2(0.f) [[
        ::anno::display_name("Translate"),
        ::anno::description("Translates the material."),
        ::anno::in_group("Transform")
    ]],
    uniform float texture_rotate = 0.f [[
        ::anno::display_name("Rotate"),
        ::anno::description("Rotates the material."),
		::anno::soft_range(0.0, 1.0),
        ::anno::in_group("Transform")
    ]],
    uniform float2 texture_scale = float2(1.f) [[
        ::anno::display_name("Scale"),
        ::anno::description("Scales the material."),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
		::preview_scale(4.5f),
        ::anno::in_group("Transform")
    ]],
    uniform int uv_space_index = 0 [[
        ::anno::display_name("UV Space Index"),
		::anno::description("Use selected UV space for material."),
        ::anno::in_group("Advanced")
    ]]
)
[[
	::anno::author("NVIDIA vMaterials"),
	::anno::display_name("Cotton Roughly Woven - Beige"),
	::anno::description("A roughly woven cotton fabric."),
	::anno::key_words(string[]("fabric", "cotton", "new", "cloth", "fashion", "organic", "rough", "woven", "design", "upholstery", "infinite tiling", "brown")),
	::anno::thumbnail("./.thumbs/Cotton_Roughly_Woven.Cotton_Roughly_Woven.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = 
    let {
        bool tmp0 = false;
		
		float2 corrected_scale = 0.165 * texture_scale;
		
        material_surface tmp1(
            ::df::custom_curve_layer(0.121000007f, 1.f, 5.f, 0.465000033f, ::df::microfacet_ggx_smith_bsdf(histogram_range(infinite_tiling ? float3(endless_texture(texture_2d("./textures/cotton_roughly_woven_rough.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), 8.f, float3(0.647000015f, 0.5f, 0.426999986f), 8.f, false))[0] : ::base::file_texture(texture_2d("./textures/cotton_roughly_woven_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.195000008f, 0.823000014f) * histogram_range(infinite_tiling ? float3(endless_texture(texture_2d("./textures/cotton_roughly_woven_rough.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), 8.f, float3(0.647000015f, 0.5f, 0.426999986f), 8.f, false))[0] : ::base::file_texture(texture_2d("./textures/cotton_roughly_woven_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.195000008f, 0.823000014f), histogram_range(infinite_tiling ? float3(endless_texture(texture_2d("./textures/cotton_roughly_woven_rough.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), 8.f, float3(0.647000015f, 0.5f, 0.426999986f), 8.f, false))[0] : ::base::file_texture(texture_2d("./textures/cotton_roughly_woven_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.195000008f, 0.823000014f) * histogram_range(infinite_tiling ? float3(endless_texture(texture_2d("./textures/cotton_roughly_woven_rough.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), 8.f, float3(0.647000015f, 0.5f, 0.426999986f), 8.f, false))[0] : ::base::file_texture(texture_2d("./textures/cotton_roughly_woven_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.195000008f, 0.823000014f), color(1.f, 1.f, 1.f), ::state::texture_tangent_u(0), ::df::scatter_reflect, ""), ::df::diffuse_reflection_bsdf(::nvidia::core_definitions::blend_colors((infinite_tiling ? endless_texture(texture_2d("./textures/cotton_roughly_woven_diff.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), 8.f, float3(0.647000015f, 0.5f, 0.426999986f), 8.f, true) : ::base::file_texture(texture_2d("./textures/cotton_roughly_woven_diff.jpg", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint) * color(::math::lerp(0.649999976f, 1.f, fabric_brightness)), fabric_color, ::base::color_layer_overlay, 1.f).tint, 0.f, ""), ::state::normal()),
            material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        color tmp3 = color(1.f, 1.f, 1.f);
        material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f));
        material_geometry tmp5(
            float3(0.f),
            1.f,
            infinite_tiling ? endless_normal(texture_2d("./textures/cotton_roughly_woven_norm.jpg", ::tex::gamma_linear), fabric_bump_factor, false, false, vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index), 8.f, float3(0.5f, 0.5f, 1.f), 8.f) : normalmap_normal(texture_2d("./textures/cotton_roughly_woven_norm.jpg", ::tex::gamma_linear), fabric_bump_factor, vmat_transform(texture_translate, texture_rotate, corrected_scale, ::base::texture_coordinate_uvw, uv_space_index)));
    } in
        material(
            thin_walled: tmp0,
            surface: tmp1,
            backface: tmp2,
            ior: tmp3,
            volume: tmp4,
            geometry: tmp5);


export material Fabric_Cotton_Roughly_Woven_Orange(*)
[[
	::anno::author("NVIDIA vMaterials"),
    ::anno::display_name("Cotton Roughly Woven - Orange"),
    ::anno::description("A roughly woven cotton fabric."),
	::anno::key_words(string[]("fabric", "cotton", "new", "cloth", "fashion", "organic", "rough", "woven", "design", "upholstery", "infinite tiling", "orange", "warm")),
	::anno::thumbnail("./.thumbs/Cotton_Roughly_Woven.Fabric_Cotton_Roughly_Woven_Orange.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Cotton_Roughly_Woven(
	infinite_tiling:    true,
	fabric_color:       color(0.673049f, 0.353741f, 0.018913f),
	fabric_brightness:  0.5f,
	fabric_bump_factor: 1.0f,
	texture_translate:  float2(0.0f),
	texture_rotate:     0.0f,
	texture_scale:      float2(1.0f),
	uv_space_index:     0
);


export material Fabric_Cotton_Roughly_Woven_Cheery_Red(*)
[[
	::anno::author("NVIDIA vMaterials"),
    ::anno::display_name("Cotton Roughly Woven - Cherry Red"),
    ::anno::description("A roughly woven cotton fabric."),
	::anno::key_words(string[]("fabric", "cotton", "new", "cloth", "fashion", "organic", "rough", "woven", "design", "upholstery", "infinite tiling", "red", "cherry", "warm")),
	::anno::thumbnail("./.thumbs/Cotton_Roughly_Woven.Fabric_Cotton_Roughly_Woven_Cheery_Red.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Cotton_Roughly_Woven(
	infinite_tiling:    true,
	fabric_color:       color(0.659224f, 0.054592f, 0.030257f),
	fabric_brightness:  0.5f,
	fabric_bump_factor: 1.0f,
	texture_translate:  float2(0.0f),
	texture_rotate:     0.0f,
	texture_scale:      float2(1.0f),
	uv_space_index:     0
);


export material Fabric_Cotton_Roughly_Woven_Dark_Red(*)
[[
	::anno::author("NVIDIA vMaterials"),
    ::anno::display_name("Cotton Roughly Woven - Dark Red"),
    ::anno::description("A roughly woven cotton fabric."),
	::anno::key_words(string[]("fabric", "cotton", "new", "cloth", "fashion", "organic", "rough", "woven", "design", "upholstery", "infinite tiling", "dark", "red", "warm")),
	::anno::thumbnail("./.thumbs/Cotton_Roughly_Woven.Fabric_Cotton_Roughly_Woven_Dark_Red.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Cotton_Roughly_Woven(
	infinite_tiling:    true,
	fabric_color:       color(0.242796f, 0.010398f, 0.058187f),
	fabric_brightness:  0.5f,
	fabric_bump_factor: 1.0f,
	texture_translate:  float2(0.0f),
	texture_rotate:     0.0f,
	texture_scale:      float2(1.0f),
	uv_space_index:     0
);


export material Fabric_Cotton_Roughly_Woven_Green(*)
[[
	::anno::author("NVIDIA vMaterials"),
    ::anno::display_name("Cotton Roughly Woven - Green"),
    ::anno::description("A roughly woven cotton fabric."),
	::anno::key_words(string[]("fabric", "cotton", "new", "cloth", "fashion", "organic", "rough", "woven", "design", "upholstery", "infinite tiling", "green")),
	::anno::thumbnail("./.thumbs/Cotton_Roughly_Woven.Fabric_Cotton_Roughly_Woven_Green.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Cotton_Roughly_Woven(
	infinite_tiling:    true,
	fabric_color:       color(0.259027f, 0.529523f, 0.014311f),
	fabric_brightness:  0.5f,
	fabric_bump_factor: 1.0f,
	texture_translate:  float2(0.0f),
	texture_rotate:     0.0f,
	texture_scale:      float2(1.0f),
	uv_space_index:     0
);


export material Fabric_Cotton_Roughly_Woven_Dark_Ash(*)
[[
	::anno::author("NVIDIA vMaterials"),
    ::anno::display_name("Cotton Roughly Woven - Dark Ash"),
    ::anno::description("A roughly woven cotton fabric."),
	::anno::key_words(string[]("fabric", "cotton", "new", "cloth", "fashion", "organic", "rough", "woven", "design", "upholstery", "infinite tiling", "ash", "dark", "blue", "gray")),
	::anno::thumbnail("./.thumbs/Cotton_Roughly_Woven.Fabric_Cotton_Roughly_Woven_Dark_Ash.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Cotton_Roughly_Woven(
	infinite_tiling:    true,
	fabric_color:       color(0.016988f, 0.038473f, 0.086901f),
	fabric_brightness:  0.5f,
	fabric_bump_factor: 1.0f,
	texture_translate:  float2(0.0f),
	texture_rotate:     0.0f,
	texture_scale:      float2(1.0f),
	uv_space_index:     0
);












