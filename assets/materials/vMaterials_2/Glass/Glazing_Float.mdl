/*****************************************************************************
*     Copyright 2024 NVIDIA Corporation. All rights reserved.
******************************************************************************

 MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,
 WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR, 
 THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF 
 COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA
 CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING
 ANY GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, 
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF 
 THE USE OR INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN 
 THE MDL MATERIALS.
*/

mdl 1.4;

import ::anno::*;
import ::nvidia::core_definitions::*;
import ::state::normal;

const string COPYRIGHT = 
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

export material Glazing_Float(
    uniform color glass_color =  color ( 0.212231f , 0.913099f , 0.520996f)
    [[
        ::anno::display_name("Color"),
        ::anno::description("Color of the glass."),
        ::anno::in_group("Appearance")
    ]],
    uniform color tint_color =  color ( 1.f , 1.f , 1.f)
    [[
        ::anno::display_name("Tint"),
        ::anno::description("Choose the tint of the glass."),
        ::anno::in_group("Appearance")
    ]],
    uniform float reflection_weight =  1.f
    [[
        ::anno::display_name("Reflection Weight"),
        ::anno::description("Amount of reflection, higher numbers provide more reflection."),
        ::anno::hard_range(0.0,1.),
        ::anno::in_group("Appearance")
    ]],
    uniform float reflection_roughness =  0.f
    [[
        ::anno::display_name("Roughness"),
        ::anno::description("Higher roughness values lead to bigger highlights and blurrier reflections."),
        ::anno::hard_range(0.0,1.),
        ::anno::in_group("Appearance")
    ]],
    uniform float clarity =  1.f
    [[
        ::anno::display_name("Clarity"),
        ::anno::description("Smaller values darken the glass."),
        ::anno::soft_range(1.0,10.0),
        ::anno::in_group("Appearance")
    ]],
    uniform float ior =  1.518f
    [[
        ::anno::display_name("IOR"),
        ::anno::description("Index of refraction."),
        ::anno::soft_range(1.0,4.0),
        ::anno::in_group("Advanced")
    ]])
[[
	::anno::display_name("Glazing - Float Glass"),
	::anno::description("Float glass material for construction and architecture"),
	::anno::author("NVIDIA vMaterials"),
	::anno::key_words(string[]("aec", "glass", "glazing", "architecture", "window", "translucent", "etched", "patterned", "pattern")),
	::anno::thumbnail("./.thumbs/Glazing_Float.Glazing_Float.png"),
	::anno::copyright_notice(COPYRIGHT)
]]= 
::nvidia::core_definitions::flex_material_v2(
    base_color:  color ( 1.f , 1.f , 1.f),
    diffuse_roughness:  0.f,
    is_metal:  false,
    reflectivity:  reflection_weight,
    reflection_roughness:  reflection_roughness,
    anisotropy:  0.f,
    anisotropy_rotation:  0.f,
    transparency:  1.f,
    transmission_color:  tint_color,
    volume_color:  glass_color,
    transmission_roughness:  0.f,
    base_thickness:  clarity,
    ior:  ior * 3.33f,
    thin_walled:  false,
    normal:  ::state::normal());
