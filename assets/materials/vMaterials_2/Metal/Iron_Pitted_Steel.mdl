/******************************************************************************
 *	 Copyright 2024 NVIDIA Corporation. All rights reserved.
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/


mdl 1.5;

import ::df::*;
import ::base::*;
import ::math::*;
import ::state::*;
import ::anno::*;
import ::tex::*;
import ::nvidia::core_definitions::dimension;

const string COPYRIGHT = 
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

uniform float4x4 rotation_translation_scale(
	uniform float3 rotation = float3(0.)
		[[ ::anno::description("Rotation applied to every UVW coordinate.") ]],
	uniform float3 translation = float3(0.)
		[[ ::anno::description("Offset applied to every UVW coordinate.") ]],
	uniform float3 scaling = float3(1.)
		[[ ::anno::description("Scale applied to every UVW coordinate.") ]]
)
[[
	::anno::description("Construct transformation matrix from Euler rotation, translation and scale."),
	::anno::hidden()
]]
{
	float4x4 scale =
		float4x4(scaling.x		, 0.			   , 0.			   , 0.,
				 0.			   , scaling.y		, 0.			   , 0.,
				 0.			   , 0.			   , scaling.z		, 0.,
				 translation.x, translation.y, translation.z, 1.);

	float3 s = ::math::sin(rotation);
	float3 c = ::math::cos(rotation);
	float4x4 rotate =
		float4x4(  c.y*c.z ,  -c.x*s.z + s.x*s.y*c.z ,  s.x*s.z + c.x*s.y*c.z , 0.0,
				   c.y*s.z ,   c.x*c.z + s.x*s.y*s.z , -s.x*c.z + c.x*s.y*s.z , 0.0,
				  -s.y	 ,   s.x*c.y			   ,  c.x*c.y			   , 0.0,
				   0.	 ,   0				   ,  0				   , 1.);

	return   scale*rotate;
}


// remaps a value that lies between low_1 and high_1 to range between low_2 and high_2
// This is the general case for range remapping
float remap(float x, float low_1, float high_1, float low_2, float high_2)
{
	return low_2 + ((x - low_1) * (high_2 - low_2))/(high_1 - low_1);
}


// Returns the normal n in tangent space, given n is in internal space.
float3 transform_internal_to_tangent(float3 n)
{
	return
		n.x* float3(::state::texture_tangent_u(0).x,::state::texture_tangent_v(0).x,::state::normal().x)+
		n.y* float3(::state::texture_tangent_u(0).y,::state::texture_tangent_v(0).y,::state::normal().y)+
		n.z* float3(::state::texture_tangent_u(0).z,::state::texture_tangent_v(0).z,::state::normal().z);
}

// Returns the normal n in internal space, given n is in tangent space.
float3 transform_tangent_to_internal(float3 n)
{
	return  ::state::texture_tangent_u(0) * n.x +
			::state::texture_tangent_v(0) * n.y +
			::state::normal() * n.z ;
}


// Returns a normal by adding a detail normal to a global normal.
float3 add_detail_normal(float3 nd = ::state::normal(), float3 n = ::state::normal())
{
	// http://blog.selfshadow.com/publications/blending-in-detail/
	float3 n_t = transform_internal_to_tangent(n);
	float3 nd_t = transform_internal_to_tangent(nd);

	n_t=n_t + float3(0.,0.,1.);
	nd_t = nd_t *  float3(-1.,-1.,1.);

	n = n_t*::math::dot(n_t, nd_t)/n_t.z - nd_t;
	return ::math::normalize(transform_tangent_to_internal(n));
}


::base::texture_return blend_colors(
	color color_1 = color(1.0, 0.0, 0.0),
	color color_2 = color(0.0, 1.0, 0.0),
	float blend = 0.5
)
[[ 
	::anno::hidden() 
]]
{
	return ::base::blend_color_layers(
				layers: ::base::color_layer[](
					::base::color_layer(
						layer_color:	  color_2,
						weight:		   blend,
						mode:			 ::base::color_layer_blend
						)),
				base: color_1
	);
}


::base::texture_return overlay_colors(
	color color_1 = color(1.0, 0.0, 0.0),
	color color_2 = color(0.0, 1.0, 0.0),
	float weight = 0.5
)
[[ 
	::anno::hidden() 
]]
{
	return ::base::blend_color_layers(
				layers: ::base::color_layer[](
					::base::color_layer(
						layer_color:	  color_2,
						weight:		   weight,
						mode:			 ::base::color_layer_overlay
						)),
				base: color_1
	);
}

export enum pit_textures
[[
	::anno::description("The available pit textures."),
	::anno::hidden() 
]]
{
	LightPits,
	MediumPits,
	StrongPits
};


export material Iron_Pitted_Steel (
	uniform pit_textures pit_texture_selection = LightPits
	[[
		::anno::display_name("Pits Texture Selection"),
		::anno::in_group("Appearance"),
		::anno::description("Chooses between various textures for the pits.")
	]],
	float steel_roughness = 0.0
	[[
		::anno::display_name("Steel Roughness"),
		::anno::in_group("Appearance"),
		::anno::description("Adjusts the principal roughness of the steel material.")
	]],
	float heat_treatment_amount = 0.0
	[[
		::anno::display_name("Heat Treatment Amount"),
		::anno::in_group("Appearance"),
		::anno::description("Adjusts the amount of coloring due to the results of heat treatment.")
	]],
	float rust_brightness = 0.0
	[[
		::anno::display_name("Rust Pits Brightness"),
		::anno::in_group("Appearance"),
		::anno::description("Adjusts thebrightness of the rust.")
	]],
	uniform float bump_amount_1 = 0.6
	[[
		::anno::display_name("Steel Bump Strength"),
		::anno::description("Specifies the intensity of the normal texture."),
		::anno::in_group("Appearance")
	]],
	
	// ----------------------- Adjustments Group -----------------------
	uniform float2 texture_translate =  float2(0.0f)
	[[
		::anno::display_name("Translate"),
		::anno::description("Controls the position of the texture."),
		::anno::in_group("Adjustments")
	]],
	uniform float texture_rotate =  0.f
	[[
		::anno::display_name("Rotate"),
		::anno::description("Rotates angle of the texture in degrees."),
		::anno::in_group("Adjustments")
	]],
	uniform float2 texture_scale =  float2(1.0f)
	[[
		::anno::display_name("Scale"),
		::anno::description("Larger numbers increase the size."),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
		::anno::in_group("Adjustments")
	]],
	
	//----------------------- Advanced -----------------------
	uniform int uv_space_index =  0
	[[
		::anno::display_name("UV Space Index"),
		::anno::description("UV Space Index."),
		::anno::in_group("Advanced"),
		::anno::soft_range(0, 3)
	]]
)
[[
	::anno::author("NVIDIA ARC"),
	::anno::display_name("Pitted Steel"),
	::anno::description("A worn and decayed steel material with rusty pits."),
	::anno::key_words(string[]("metal", "steel", "pitted", "decayed", "oxidized", "worn", "matte", "brown", "gray")),
	::anno::thumbnail("./.thumbs/Iron_Pitted_Steel.Iron_Pitted_Steel.png"),
	::anno::copyright_notice(COPYRIGHT)
]] = let {

	float steel_roughness_remapped = steel_roughness * 0.33;
	float specular_level = float(0.5);
	
	texture_2d pitsteel_diffuse = texture_2d("./textures/iron_pitted_steel_no_dents_diff.jpg", ::tex::gamma_srgb);
	texture_2d pitsteel_heatcoloring = texture_2d("./textures/iron_pitted_steel_heat_diff.jpg", ::tex::gamma_srgb);
	texture_2d pitsteel_rust_diffuse = texture_2d("./textures/iron_pitted_steel_rust_diffuse.jpg", ::tex::gamma_srgb);
	texture_2d pitsteel_metallic = texture_2d("./textures/iron_pitted_steel_no_spots_metal.png", ::tex::gamma_srgb);
	texture_2d pitsteel_normal = texture_2d("./textures/iron_pitted_steel_norm.jpg", ::tex::gamma_linear);
	texture_2d pitsteel_roughness = texture_2d("./textures/iron_pitted_steel_roughness_no_spots.jpg", ::tex::gamma_linear);
	
	uniform texture_2d pitsteel_spots_bump_mask = 
			(pit_texture_selection == LightPits) ? texture_2d("./textures/iron_pitted_steel_dents_bump.png", ::tex::gamma_linear) :
			(pit_texture_selection == MediumPits)	? texture_2d("./textures/iron_pitted_steel_dents_bump_03.png", ::tex::gamma_linear) :
										texture_2d("./textures/iron_pitted_steel_dents_bump_02.png", ::tex::gamma_linear);

	
	float ior = 1.5;
	float bump_amount_1_mapped = bump_amount_1 * 0.2;
	float bump_amount_2_mapped = -16.0;
	float rust_brightness_mapped = rust_brightness * 0.15;
	float pit_transition_softness = 0.0;
	float heat_treatment_amount_mapped = heat_treatment_amount * 0.15;
	
	
	::base::texture_coordinate_info uvw = ::base::coordinate_source(
								coordinate_system: ::base::texture_coordinate_uvw,
								texture_space: uv_space_index
	);
	
	::base::texture_coordinate_info  transformed_uvw =  ::base::transform_coordinate(
								transform: rotation_translation_scale(
									scaling: float3(texture_scale.x, texture_scale.y, 1.0),
									rotation: float3(0.0, 0.0, texture_rotate/180.*::math::PI ),
									translation: float3(texture_translate.x, texture_translate.y, 0.0)
								),
								coordinate: uvw
	);
	
	// Spots mask lookup
	float spots_mask_lookup = ::base::file_texture(
							texture: pitsteel_spots_bump_mask,
							color_offset: color(0.0, 0.0, 0.0),
							color_scale: color(1.0, 1.0, 1.0),
							mono_source: ::base::mono_average,
							uvw: transformed_uvw,
							clip: false		
	).mono;
	
	// Diffuse lookup
	color base_color = ::base::file_texture(
							texture: pitsteel_diffuse,
							color_offset: color(0.0, 0.0, 0.0),
							color_scale: color(1.0, 1.0, 1.0),
							mono_source: ::base::mono_average,
							uvw: transformed_uvw,
							clip: false		
	).tint;
	
	color rust_color = ::base::file_texture(
							texture: pitsteel_rust_diffuse,
							color_offset: color(rust_brightness_mapped),
							color_scale: color(1.0, 1.0, 1.0),
							mono_source: ::base::mono_average,
							uvw: transformed_uvw,
							clip: false		
	).tint;
	
	color heat_color = ::base::file_texture(
							texture: pitsteel_heatcoloring,
							color_offset: color(0.0),
							color_scale: color(1.0),
							mono_source: ::base::mono_average,
							uvw: transformed_uvw,
							clip: false		
	).tint;
	
	float spots_mask = ::math::clamp(remap(spots_mask_lookup, 0.0, pit_transition_softness, 0.0, 1.0), 0.0, 1.0);
	
	color steel_base_color = blend_colors( base_color, rust_color, spots_mask).tint;
	color steel_final_base_color = overlay_colors( steel_base_color, heat_color, heat_treatment_amount_mapped).tint;
	
	
	// Roughness lookup & Compositing
	float roughness = ::base::file_texture(
							texture: pitsteel_roughness,
							color_offset: color(0.0, 0.0, 0.0),
							color_scale: color(1.0, 1.0, 1.0),
							mono_source: ::base::mono_average,
							uvw: transformed_uvw,
							clip: false		
	).mono + spots_mask * .45 + steel_roughness_remapped;
	
	
	// Metallic lookup
	float metallic = ::base::file_texture(
							texture: pitsteel_metallic,
							color_offset: color(0.0, 0.0, 0.0),
							color_scale: color(1.0, 1.0, 1.0),
							mono_source: ::base::mono_average,
							uvw: transformed_uvw,
							clip: false		
	).mono - spots_mask * 2.0;
	
	
	// Composit spots mask 
	
	bsdf diffuse_bsdf = ::df::diffuse_reflection_bsdf(
		roughness: 0.0f,  	
		tint: steel_final_base_color				
	);
	
	bsdf ggx_smith_bsdf = ::df::microfacet_ggx_smith_bsdf(
		roughness_u: roughness*roughness,
		roughness_v: roughness*roughness,
		tint: color(1.0, 1.0, 1.0),
		mode: ::df::scatter_reflect
	);
	
	
	bsdf custom_curve_layer_bsdf = ::df::custom_curve_layer(
		normal_reflectivity: 0.08 * specular_level,		
		grazing_reflectivity: 1.0,
		exponent:	5.0,
		weight:		1.0,
		layer: ggx_smith_bsdf,
		base:	diffuse_bsdf
	);
	
	bsdf directional_factor_bsdf = ::df::directional_factor(
		normal_tint:  steel_final_base_color,
		grazing_tint: color(1.0, 1.0, 1.0),
		exponent: 3.0f,
		base: ggx_smith_bsdf
	);
	
	bsdf final_bsdf = ::df::weighted_layer(
		weight: metallic,
		layer:	directional_factor_bsdf,
		base:	custom_curve_layer_bsdf
	);
	
	// Normal lookup
	float3 the_normal = ::base::tangent_space_normal_texture(
											texture: 		pitsteel_normal,
											factor:		 bump_amount_1_mapped,
											uvw:			transformed_uvw,
											flip_tangent_u: false,
											flip_tangent_v: false
	);
	
	// Dents bumpmap lookup
	float3 dents_normal = ::base::file_bump_texture(
								texture:		pitsteel_spots_bump_mask,
								factor:			bump_amount_2_mapped,
								bump_source:	::base::mono_average,
								uvw:			transformed_uvw
	);
	
	float3 the_final_normal = add_detail_normal(the_normal, dents_normal);
	
} in material (
	ior: color(ior),
	surface: material_surface(
		scattering: final_bsdf
	),
	geometry: material_geometry(
		normal: the_final_normal
	)
);



// 01 - Light Pitted Steel
export material light_pitted_steel(*)
[[
	::anno::author("NVIDIA ARC"),
	::anno::display_name("Pitted Steel - Light"),
	::anno::description("A worn and decayed steel material with rusty pits."),
	::anno::key_words(string[]("metal", "steel", "pitted", "decayed", "oxidized", "worn", "matte", "brown", "gray")),
	::anno::thumbnail("./.thumbs/Iron_Pitted_Steel.light_pitted_steel.png"),
	::anno::copyright_notice(COPYRIGHT)	
]]
 = Iron_Pitted_Steel (
	pit_texture_selection:	LightPits,
	steel_roughness:		0.0,
	heat_treatment_amount:	0.0,
	rust_brightness:		0.0,
	bump_amount_1:			0.6,
	
	// Adjustments Group
	texture_translate:		float2(0.0f),
	texture_rotate:			0.0f,
	texture_scale:			float2(1.0f),
	
	//Advanced
	uv_space_index: 		0
);


// 02 - Medium Pitted Steel
export material medium_pitted_steel(*)
[[
	::anno::author("NVIDIA ARC"),
	::anno::display_name("Pitted Steel - Medium"),
	::anno::description("A worn and decayed steel material with rusty pits."),
	::anno::key_words(string[]("metal", "steel", "pitted", "decayed", "oxidized", "worn", "matte", "brown", "gray")),
	::anno::thumbnail("./.thumbs/Iron_Pitted_Steel.medium_pitted_steel.png"),
	::anno::copyright_notice(COPYRIGHT)	
]]
 = Iron_Pitted_Steel (
	pit_texture_selection:	MediumPits,
	steel_roughness:		0.0,
	heat_treatment_amount:	0.0,
	rust_brightness:		0.0,
	bump_amount_1:			0.6,
	
	// Adjustments Group
	texture_translate:		float2(0.0),
	texture_rotate:			0.0f,
	texture_scale:			float2(1.0f),
	
	//Advanced
	uv_space_index: 		0
);


// 03 - Strong Pitted Steel
export material strong_pitted_steel(*)
[[
	::anno::author("NVIDIA ARC"),
	::anno::display_name("Pitted Steel - Strong"),
	::anno::description("A worn and decayed steel material with rusty pits."),
	::anno::key_words(string[]("metal", "steel", "pitted", "decayed", "oxidized", "worn", "matte", "brown", "gray")),
	::anno::thumbnail("./.thumbs/Iron_Pitted_Steel.strong_pitted_steel.png"),
	::anno::copyright_notice(COPYRIGHT)	
]]
 = Iron_Pitted_Steel (
	pit_texture_selection:	StrongPits,
	steel_roughness:		0.0,
	heat_treatment_amount:	0.0,
	rust_brightness:		0.0,
	bump_amount_1:			0.6,
	
	// Adjustments Group
	texture_translate:		float2(0.0),
	texture_rotate:			0.0f,
	texture_scale:			float2(1.0f),
	
	//Advanced
	uv_space_index: 		0
);