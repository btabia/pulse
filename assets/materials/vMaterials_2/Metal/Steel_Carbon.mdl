/******************************************************************************
 *	 Copyright 2024 NVIDIA Corporation. All rights reserved.	 *
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/

mdl 1.7;

import ::anno::*;
import ::base::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::df::*;
import ::nvidia::core_definitions::*;
import ::nvidia::core_definitions::dimension;

const string DESCRIPTION = "A carbon steel material with adjustable rust oxidation and different levels of carbon saturation. "
							"Note that a thick layer of oxide (rust) makes the appearance of the material more matte. "
							"To achieve a highly reflective metal set the oxide thickness to 0.0 and adjust the roughness accordingly.";

const string COPYRIGHT = 
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

struct vm_coordinates{
	float2 uv;			// UV coordinates stored as a simple float2
	float rotation;		// The rotation is stored in radiands (not degress), to convert use ((rotation* 3.1415926535897932384626433832f) / 180.f)
	int uv_space_index;	// The UV space Index from which the UV data came from
	float4 carry;		// may carry additional data, such as random IDs
};

struct vm_3float{
	float x;
	float y;
	float z;
};

struct vm_4float{
	float x;
	float y;
	float z;
	float w;
};

struct vm_col_norm{
	float3 value;
	float3 norm;
};

enum vm_mono_select 
[[
    anno::description("Modes for the creation of a gray-scale value from a color."),
    anno::hidden()
]]
{
	mono_r = 0,
	mono_g = 1,
	mono_b = 2,
	mono_a = 3,
	mono_average = 4
};

vm_coordinates vm_coord
(
	float2 translation	= float2(0.0f, 0.0) [[
		::anno::display_name("Translation"),
		::anno::description("Translates the coordinates.")
	]],
	float rotation 		= 0.0f [[
		::anno::display_name("Rotation"),
		::anno::description("Rotates the coordinates in degrees.")
	]],
	float2 scaling		= float2(1.0f, 1.0f) [[
		::anno::display_name("Scaling"),
		::anno::description("Scales the coordinates.")
	]],	
	uniform int uv_space = 0 [[
		::anno::display_name("UV Space"),
		::anno::description("Chose the UV space.")
	]]
)
[[
		::anno::display_name("vm Transform"),
		::anno::description("Generates coordinates to be used in vm_lookup functions.")
]]
{
	vm_coordinates uv;
	::base::texture_coordinate_info info = ::base::coordinate_source( ::base::texture_coordinate_uvw, uv_space);
	uv.rotation = (rotation * 3.1415926535897932384626433832f) / 180.f;
	uv.uv = float2(info.position.x, info.position.y);
	float sine   = ::math::sin(uv.rotation);
	float cosine = ::math::cos(uv.rotation);
	float2x2 rot = float2x2(cosine, -sine, sine, cosine);
	uv.uv = rot * uv.uv;
	uv.uv /= scaling;
	uv.uv += translation;
	// Translation before or after rotation?
	return uv;
}

float remap_xy_to_0_1(float input, float x, float y)
{
	return (input - x)/(y - x);
}

float2x2 invert_2x2(float2x2 M)
{
	float det = M[0][0]*M[1][1] - M[0][1]*M[1][0];
	//https://www.chilimath.com/lessons/advanced-algebra/inverse-of-a-2x2-matrix/
	return (1.0 / det) * float2x2(M[1][1], -M[0][1], -M[1][0], M[0][0]);
}

int lowbias32(int x)
{
    x ^= x >>> 16;
    x *= 0x7feb352d;
    x ^= x >>> 15;
    x *= 0x846ca68b;
    x ^= x >>> 16;
    return x;
}

float uint2float(int x)
{
    return float(x & 0x7FFFFFFF) + (x < 0 ? 2147483648.0 : 0.0);
}

float2 rnd22(int2 p) {
	float2 ret_val = float2(
		uint2float(lowbias32(p[0] + lowbias32(p[1]))) / 4294967296.f,
		uint2float(lowbias32(p[0] + 32000 + lowbias32(p[1]))) / 4294967296.f
	);
    return ret_val;
}    

float3 vm_tex_infinite(
	uniform texture_2d tex = texture_2d(),
	vm_coordinates uv = vm_coord(),
	float3 average_color = float3(0.5f, 0.5f, 1.0f),
	float patch_size = 1.0,
	bool gamma_correct = true,
	float gamma = 2.2f
)
{
	float2 uv_in = uv.uv;
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * (uv.uv / patch_size); //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V))+int2(935); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;
	
	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
		O = (W[0] = F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I))) - m)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0,1)))) - m)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1,0)))) - m);
	else
		O = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1))))   - m)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1, 0)))) - m)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0, 1)))) - m);
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0f, 1.0f);
	
	return gamma_correct? ::math::pow(::math::max(O, float3(0.0f)), gamma) : float3(O);
}


vm_col_norm vm_tex_infinite_color_normal(
	uniform texture_2d tex_col = texture_2d(),
	uniform texture_2d tex_norm = texture_2d(),
	vm_coordinates uv = vm_coord(),
	float3 average_color = float3(0.5),
	float3 average_norm = float3(0.5f, 0.5f, 1.0f),
	float patch_size = 1.0,
	// Color output settings
	bool color_out_gamma_correct = true,
	float color_out_gamma = 2.2f,
	// Normal output setting
	float normal_strength = 1.0
)
{
	vm_col_norm ret;
	float2 uv_in = uv.uv;
	
	float3 O_a = float3(0.f);
	float3 O_b = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * (uv.uv / patch_size); //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V))+int2(1935); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m_a = average_color;
	float3 m_b = average_norm;

	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
	{
		O_a = (W[0] = F[2]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I))) - m_a)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(0,1)))) - m_a)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1,0)))) - m_a);
		O_b = (W[0] = F[2]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I))) - m_b)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(0,1)))) - m_b)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1,0)))) - m_b);
	}
	else
	{
		O_a = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1))))   - m_a)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1, 0)))) - m_a)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(0, 1)))) - m_a);
		O_b = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1))))   - m_b)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1, 0)))) - m_b)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(0, 1)))) - m_b);
	}
	
	O_a = m_a + O_a/::math::length(W);
	O_a = ::math::clamp( (O_a), 0.0, 1.0);
	ret.value = color_out_gamma_correct? ::math::pow(::math::max(O_a, float3(0.0f)), color_out_gamma) : float3(O_a);
	
	O_b = m_b + O_b/::math::length(W);
	O_b = ::math::clamp( (O_b), 0.0, 1.0);
	
	float3 norm = (O_b - float3(.5f)) * 2.0f;
	norm = ::math::normalize(norm * float3(normal_strength, normal_strength, 1.0));
	// if any rotation happened prior to the lookup, compensate for it
	norm = float3(::math::cos(uv.rotation) * norm.x - ::math::sin(uv.rotation) * norm.y,
					::math::sin(uv.rotation) * norm.x + ::math::cos(uv.rotation) * norm.y,
					norm.z);
	ret.norm = norm.x * ::state::texture_tangent_u(uv.uv_space_index) +
			norm.y * ::state::texture_tangent_v(uv.uv_space_index) +
			norm.z * ::state::normal();	
			
	return ret;
}

::base::texture_return vm_tex_lookup(
	uniform texture_2d tex,
	vm_coordinates uv = vm_coord(),
	uniform vm_mono_select mono_source = mono_a,
	float4 scale = float4(1.0f))
{
	float mono;
	float4 lookup = ::tex::lookup_float4(tex, uv.uv, ::tex::wrap_repeat, ::tex::wrap_repeat) * scale;
	switch( mono_source ) {
		case mono_r: mono = lookup.x;
			break;
		case mono_g: mono = lookup.y;
			break;
		case mono_b: mono = lookup.z;
			break;
		case mono_a: mono = lookup.w;
			break;
		case mono_average: mono = ::math::average(float3(lookup.x, lookup.y, lookup.z));
			break;
	}
	return ::base::texture_return(color(lookup.x, lookup.y, lookup.z), mono);
}

vm_3float vm_tex_lookup_3float(
	uniform texture_2d tex,
	vm_coordinates uv = vm_coord(),
	float3 scale = float3(1.0f))
{
	vm_3float ret;
	float3 lookup = ::tex::lookup_float3(tex, uv.uv, ::tex::wrap_repeat, ::tex::wrap_repeat) * scale;
	ret.x = lookup.x;
	ret.y = lookup.y;
	ret.z = lookup.z;
	return ret;
}

vm_3float vm_util_balanced_weight(
	uniform float input_1 [[::anno::in_group("Inputs")]],
	uniform float input_2 [[::anno::in_group("Inputs")]],
	uniform float input_3 [[::anno::in_group("Inputs")]],
	float weight_1 [[::anno::in_group("Output Weights")]],
	float weight_2 [[::anno::in_group("Output Weights")]],
	float weight_3 [[::anno::in_group("Output Weights")]]
)
[[
	::anno::description("Takes three inputs and scales them so that the largest weight is scaled to 1.0 " 
						"E.g. inputs (0.2, 0.1, 0.05) will result in (1.0, 0.5, 0.25).")
]]
{
	vm_3float result; 
	
	float max = ::math::max(::math::max(input_1, input_2), input_3);
	if(max > 0.0f)
	{
		result.x = (input_1/max) * weight_1;
		result.y = (input_2/max) * weight_2;
		result.z = (input_3/max) * weight_3;
	}
	else
	{
		result.x = weight_1;
		result.y = weight_2;
		result.z = weight_3;
	}
	return result;
}


// **********************  ***********************


float screen(float base, float layer, float weight)
{
	return base + (1.0f - base) * layer * weight;
}

// converts a HSL value back to a color
// The Hue is expected to lie in the range 
float f_n(float n, float a,  float h, float l) {
	float k = ::math::fmod(n + h * 12.f, 12.f);
	
	return l - a * ::math::max(-1.0f, ::math::min(::math::min(k-3.0f, 9.0f-k), 1.0f));
}

color hsl2rgb(float3 hsl)
[[
	::anno::description("Converts a HSL value back to a color. Note that the hue is expected to \n"
						"lie in the range from 0.0-1.0."),
	::anno::author("NVIDIA vMaterials")
]]
{
	float h = hsl.x, s = hsl.y, l = hsl.z;
	float a = s * ::math::min(l, 1.0f - l);
	return color(f_n(0.0, a, h, l),
				f_n(8.0, a, h, l),
				f_n(4.0, a, h, l));	
}

float3 rgb2hsl(float3 c)
[[
	::anno::description("Converts a color value to HSL. The function outputs the hue to \n"
						"lie in the range from 0.0-1.0."),
	::anno::author("NVIDIA vMaterials")
]]
{
	float3 hsl;
	float cMax = ::math::max(::math::max(c.x, c.y), c.z);
	float cMin = ::math::min(::math::min(c.x, c.y), c.z);
	float delta = cMax - cMin;
	
	hsl.z = (cMax + cMin) / 2.0;	
	hsl.x = ((cMax == cMin) ? 0 :
		(cMax == c.x) ? (c.y - c.z) / delta + ((c.z > c.y) ? 6.0f : 0.0f):
		(cMax == c.y) ? (c.z - c.x) / delta + 2.0 : (c.x - c.y) / delta + 4.0) / 6.0f;
	hsl.y = (hsl.z == 0.0 || hsl.z == 1.0) ? 0.0 : delta / (1.0 - ::math::abs(2.0 * hsl.z - 1.0));
	return hsl;
}

float histogram_scan_big(float input, float width, float position)
{
	return ::math::clamp(
				remap_xy_to_0_1(input,
								::math::lerp(-width, 1.0, position),
								position * (1.0 + width)), // special case of ::math::lerp(0.0, 1.0 + width, position)),
				0.0,
				1.0);
}

export material Steel_Carbon(
    uniform bool infinite_tiling = true [[
        ::anno::description("Enables infinite tiling feature which removes repeating texture patterns. Note that depending on the material this feature changes the appearance of the material slightly."),
        ::anno::display_name("Infinite Tiling"),
        ::anno::in_group("Appearance"),
        ::anno::ui_order(0)
    ]],
    float brightness = 1.f [[
        ::anno::description("Adjusts the lightness of the material."),
        ::anno::display_name("Brightness"),
        ::anno::in_group("Appearance"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(1)
    ]],
    float roughness = 0.04f [[
        ::anno::description("Higher roughness values lead to bigger highlights and blurrier reflections."),
        ::anno::display_name("Roughness"),
        ::anno::in_group("Appearance"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(2)
    ]],
    float bump_strength = 0.f [[
        ::anno::description("Specifies the strength of the bump."),
        ::anno::display_name("Bump Strength"),
        ::anno::in_group("Appearance"),
        ::anno::hard_range(0.f, 2.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(3)
    ]],
    float oxide_thickness = 0.f [[
        ::anno::description("Adjusts the thickness of the rusty, dark brown  oxidation layer. This makes the material also appear rougher."),
        ::anno::display_name("Oxide Thickness"),
        ::anno::in_group("Appearance", "Oxide"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(4)
    ]],
    float oxide_contrast = 1.f [[
        ::anno::description("Low values spread the oxide layer more evenly while higher values break up the oxide layer to reveal the clean metal."),
        ::anno::display_name("Oxide Contrast"),
        ::anno::in_group("Appearance", "Oxide"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(5)
    ]],
    float bright_rust_amount = 0.03f [[
        ::anno::description("Increases the brightness of the rusty oxide layer."),
        ::anno::display_name("Oxide Brightness"),
        ::anno::in_group("Appearance", "Oxide"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(6)
    ]],
    float rust_saturation = 0.f [[
        ::anno::description("Adjusts the saturation of the rusty oxide layer."),
        ::anno::display_name("Oxide Saturation"),
        ::anno::in_group("Appearance", "Oxide"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(7)
    ]],
    uniform float impurities_weight_1 = 0.2f [[
        ::anno::description("Adds directional imperfections to the oxide variation."),
        ::anno::display_name("Directional Imperfections Weight"),
        ::anno::in_group("Appearance", "Oxide"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(8)
    ]],
    uniform float impurities_weight_2 = 0.69f [[
        ::anno::description("Adds a spotted look to the oxide variation."),
        ::anno::display_name("Spotted Imperfections Weight"),
        ::anno::in_group("Appearance", "Oxide"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(9)
    ]],
    uniform float impurities_weight_3 = 0.f [[
        ::anno::description("Adds a scratched look to the oxide variation."),
        ::anno::display_name("Scratched Imperfections Weight"),
        ::anno::in_group("Appearance", "Oxide"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
        ::anno::ui_order(10)
    ]],
    float2 texture_translate = float2(0.f) [[
        ::anno::description("Controls the position of the texture."),
        ::anno::display_name("Texture Translate"),
        ::anno::in_group("Transform"),
        ::anno::ui_order(11)
    ]],
    float texture_rotate = 0.f [[
        ::anno::description("Rotates angle of the texture in degrees."),
        ::anno::display_name("Texture Rotate"),
        ::anno::in_group("Transform"),
        ::anno::ui_order(12)
    ]],
    float2 texture_scale = float2(1.0f) [[
        ::anno::description("Larger numbers increase the size."),
        ::anno::display_name("Texture Scale"),
        ::anno::in_group("Transform"),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
        ::anno::ui_order(13)
    ]],
    uniform int uv_space_index = 0 [[
        ::anno::description("Use selected UV space for the material."),
        ::anno::display_name("UV Space Index"),
        ::anno::in_group("Transform"),
        ::anno::ui_order(14)
    ]],
    uniform bool enable_round_corners = false [[
        ::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
        ::anno::display_name("Enable Round Corners"),
        ::anno::in_group("Round Corners"),
        ::anno::ui_order(15)
    ]],
    uniform float roundcorner_radius = 0.5f [[
        ::anno::description("Radius of the rounded corners in millimeters (mm)."),
        ::anno::display_name("Round Corner Radious"),
        ::anno::in_group("Round Corners"),
        ::anno::soft_range(0.f, 2.f),
        ::anno::ui_order(16)
    ]],
    uniform bool across_materials = false [[
        ::anno::description("Applies the round corner effect across different materials when enabled."),
        ::anno::display_name("Across Materials"),
        ::anno::in_group("Round Corners"),
        ::anno::ui_order(17)
    ]])
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Low Carbon Steel - New"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "medium", "carbon", "infinite", "tiling", "construction", "automotive", "naval", "architecture", "design", "new", "shiny", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon.png")
]]
 = 
    let {
        bool tmp0 = false;
		float2 tex_rescale = texture_scale * 0.5f;
        material_surface tmp1(::df::weighted_layer(::math::pow(::math::lerp(0.f, screen(screen(vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).x * ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[0], 0.949999988f, 0.359999985f), 2.24000001f), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[1], 0.649999976f, 0.269999981f), 2.24000001f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).y), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[2], 0.870000005f, 0.529999971f), 0.399999976f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).z), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))), oxide_contrast * 0.850000024f + 0.150000006f), ::df::diffuse_reflection_bsdf(hsl2rgb(float3(1.f, rust_saturation * 2.5f, bright_rust_amount * 0.800000012f + 0.200000003f) * rgb2hsl(float3(nvidia::core_definitions::blend_colors(color(0.330343992f, 0.178270996f, 0.0280590001f), color(0.0396829993f, 0.0231379997f, 0.0170900002f), ::base::color_layer_blend, infinite_tiling ? vm_tex_infinite(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.728999972f), 1.39999998f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(1.f)).x, true).tint))), 0.f), ::df::color_custom_curve_layer(color(0.827881992f, 0.827881992f, 0.827881992f), color(1.f, 1.f, 1.f), 5.f, color(brightness * 0.400000006f + 0.600000024f), ::df::weighted_layer(0.0700000003f, ::df::microfacet_ggx_smith_bsdf(0.150000006f, 0.150000006f, color(1.f, 1.f, 1.f), color(0.f, 0.f, 0.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::df::microfacet_ggx_smith_bsdf(::math::lerp(roughness, ::math::lerp(roughness * 0.5f, screen(screen(vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).x * ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[0], 0.949999988f, 0.359999985f), 2.24000001f), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[1], 0.649999976f, 0.269999981f), 2.24000001f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).y), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[2], 0.870000005f, 0.529999971f), 0.399999976f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).z), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))) + (1.f - (infinite_tiling ? vm_tex_infinite(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.728999972f), 1.39999998f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(1.f)).x)) * roughness, oxide_thickness) * ::math::lerp(roughness, ::math::lerp(roughness * 0.5f, screen(screen(vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).x * ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[0], 0.949999988f, 0.359999985f), 2.24000001f), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[1], 0.649999976f, 0.269999981f), 2.24000001f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).y), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[2], 0.870000005f, 0.529999971f), 0.399999976f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).z), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))) + (1.f - (infinite_tiling ? vm_tex_infinite(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.728999972f), 1.39999998f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(1.f)).x)) * roughness, oxide_thickness), ::math::lerp(roughness, ::math::lerp(roughness * 0.5f, screen(screen(vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).x * ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[0], 0.949999988f, 0.359999985f), 2.24000001f), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[1], 0.649999976f, 0.269999981f), 2.24000001f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).y), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[2], 0.870000005f, 0.529999971f), 0.399999976f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).z), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))) + (1.f - (infinite_tiling ? vm_tex_infinite(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.728999972f), 1.39999998f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(1.f)).x)) * roughness, oxide_thickness) * ::math::lerp(roughness, ::math::lerp(roughness * 0.5f, screen(screen(vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).x * ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[0], 0.949999988f, 0.359999985f), 2.24000001f), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[1], 0.649999976f, 0.269999981f), 2.24000001f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).y), ::math::pow(histogram_scan_big(float3(infinite_tiling ? color(vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).value) : vm_tex_lookup(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), mono_a, float4(1.f)).tint)[2], 0.870000005f, 0.529999971f), 0.399999976f), vm_util_balanced_weight(impurities_weight_1, impurities_weight_2, impurities_weight_3 + 0.00100000005f, ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f)), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))).z), ::math::lerp(0.48999998f, 1.f, ::math::pow(oxide_thickness, 0.689999998f))) + (1.f - (infinite_tiling ? vm_tex_infinite(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.728999972f), 1.39999998f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/carbon_steel_ao.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(1.f)).x)) * roughness, oxide_thickness), color(1.f, 1.f, 1.f), color(0.f, 0.f, 0.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::math::normalize(::math::lerp(::state::normal(), vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).norm, 1.f))), bsdf(), ::math::normalize(::math::lerp(::state::normal(), vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).norm, 1.f))), ::math::normalize(::math::lerp(::state::normal(), vm_tex_infinite_color_normal(texture_2d("./textures/carbon_steel_multi.jpg", ::tex::gamma_linear), texture_2d("./textures/carbon_steel_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, tex_rescale, uv_space_index), float3(0.430999994f, 0.361000001f, 0.501999974f), float3(0.5f, 0.5f, 0.984000027f), 1.39999998f, false, 2.20000005f, bump_strength).norm, 1.f))), material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        color tmp3 = color(1.f, 1.f, 1.f);
        material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f), emission_intensity: color(0.f, 0.f, 0.f));
        material_geometry tmp5(float3(0.f), 1.f, enable_round_corners ? ::state::rounded_corner_normal(roundcorner_radius, across_materials, 1.f) : ::state::normal());
    } in
        material(
            thin_walled: tmp0,
            surface: tmp1,
            backface: tmp2,
            ior: tmp3,
            volume: tmp4,
            geometry: tmp5);



// 2 - "Medium Carbon Steel - Shiny"
export material Steel_Carbon_Medium_Shiny(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Medium Carbon Steel - New"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "medium", "carbon", "infinite", "tiling", "construction", "automotive", "naval", "architecture", "design", "new", "shiny", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_Medium_Shiny.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           0.92f,
	roughness:            0.04f,
	bump_strength:        0.0f,
	oxide_thickness:      0.0f,
	oxide_contrast:       0.78f,
	bright_rust_amount:   1.0f,
	rust_saturation:      0.05f,
	impurities_weight_1:  0.0f,
	impurities_weight_2:  0.06f,
	impurities_weight_3:  0.28f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 3 - "High Carbon Steel - Shiny"
export material Steel_Carbon_High_Shiny(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("High Carbon Steel - New"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "high", "carbon", "infinite", "tiling", "construction", "automotive", "naval", "architecture", "design", "new", "shiny", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_High_Shiny.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           0.83f,
	roughness:            0.04f,
	bump_strength:        0.0f,
	oxide_thickness:      0.0f,
	oxide_contrast:       0.78f,
	bright_rust_amount:   1.0f,
	rust_saturation:      0.05f,
	impurities_weight_1:  0.0f,
	impurities_weight_2:  0.13f,
	impurities_weight_3:  0.28f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 4 - "Low Carbon Steel - Directional Imperfections"
export material Steel_Carbon_Low_Directional_Imperfections(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Low Carbon Steel - Directional Imperfections"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "low", "carbon", "infinite", "tiling", "construction", "automotive", "naval", "architecture", "design", "imperfections", "directional", "shiny", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_Low_Directional_Imperfections.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           1.0f,
	roughness:            0.17f,
	bump_strength:        0.0f,
	oxide_thickness:      0.2f,
	oxide_contrast:       0.78f,
	bright_rust_amount:   1.0f,
	rust_saturation:      0.05f,
	impurities_weight_1:  1.00f,
	impurities_weight_2:  0.0f,
	impurities_weight_3:  0.0f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 5 - "Medium Carbon Steel - Glossy"
export material Steel_Carbon_Medium_Glossy(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Medium Carbon Steel - Glossy"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "medium", "carbon", "infinite", "tiling", "construction", "automotive", "naval", "architecture", "design", "new", "glossy", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_Medium_Glossy.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           0.92f,
	roughness:            0.44f,
	bump_strength:        0.19f,
	oxide_thickness:      0.0f,
	oxide_contrast:       0.78f,
	bright_rust_amount:   1.0f,
	rust_saturation:      0.05f,
	impurities_weight_1:  0.03f,
	impurities_weight_2:  0.022f,
	impurities_weight_3:  0.6f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 6 - "High Carbon Steel - Glossy"
export material Steel_Carbon_High_Glossy(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("High Carbon Steel - Glossy"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "high", "carbon", "infinite", "tiling", "construction", "automotive", "naval", "architecture", "design", "new", "glossy", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_High_Glossy.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           0.8f,
	roughness:            0.44f,
	bump_strength:        0.19f,
	oxide_thickness:      0.0f,
	oxide_contrast:       0.78f,
	bright_rust_amount:   1.0f,
	rust_saturation:      0.05f,
	impurities_weight_1:  0.03f,
	impurities_weight_2:  0.12f,
	impurities_weight_3:  0.29f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 7 - "Low Carbon Steel - Matte"
export material Steel_Carbon_Low_Matte(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Low Carbon Steel - Matte"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "low", "carbon", "infinite", "tiling", "construction", "automotive", "naval", "architecture", "design", "oxidized", "worn", "matte", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_Low_Matte.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           1.0f,
	roughness:            0.4f,
	bump_strength:        0.25f,
	oxide_thickness:      0.45f,
	oxide_contrast:       0.78f,
	bright_rust_amount:   0.57f,
	rust_saturation:      0.05f,
	impurities_weight_1:  0.03f,
	impurities_weight_2:  0.27f,
	impurities_weight_3:  0.6f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 8 - "Medium Carbon Steel - Matte"
export material Steel_Carbon_Medium_Matte(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Medium Carbon Steel - Matte"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "medium", "carbon", "infinite", "tiling", "construction", "automotive", "naval", "architecture", "design", "oxidized", "worn", "matte", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_Medium_Matte.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           0.92f,
	roughness:            0.44f,
	bump_strength:        0.19f,
	oxide_thickness:      0.39f,
	oxide_contrast:       0.78f,
	bright_rust_amount:   1.0f,
	rust_saturation:      0.05f,
	impurities_weight_1:  0.03f,
	impurities_weight_2:  0.22f,
	impurities_weight_3:  0.6f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 9 - "High Carbon Steel - Matte"
export material Steel_Carbon_High_Matte(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("High Carbon Steel - Matte"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "high", "carbon", "infinite", "tiling", "construction", "automotive", "naval", "architecture", "design", "oxidized", "worn", "matte", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_High_Matte.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           0.8f,
	roughness:            0.76f,
	bump_strength:        0.19f,
	oxide_thickness:      0.19f,
	oxide_contrast:       1.0f,
	bright_rust_amount:   1.0f,
	rust_saturation:      0.05f,
	impurities_weight_1:  0.09f,
	impurities_weight_2:  0.15f,
	impurities_weight_3:  0.29f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 10
export material Steel_Carbon_Low_Medium_Rust(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Low Carbon Steel - Medium Rust"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "carbon", "infinite", "tiling", "construction", "design", "oxidized", "old", "worn", "matte", "rust", "rusty", "brown", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_Low_Medium_Rust.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           1.0f,
	roughness:            0.0f,
	bump_strength:        0.82f,
	oxide_thickness:      1.0f,
	oxide_contrast:       1.0f,
	bright_rust_amount:   0.49f,
	rust_saturation:      0.64f,
	impurities_weight_1:  0.03f,
	impurities_weight_2:  0.14f,
	impurities_weight_3:  0.39f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 11 - "Low Carbon Steel - Directional Rust"
export material Steel_Carbon_Low_Directional_Rust(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Low Carbon Steel - Directional Rust"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "low", "carbon", "infinite", "tiling", "construction", "design", "directional", "oxidized", "old", "worn", "matte", "rust", "rusty", "brown", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_Low_Directional_Rust.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           1.0f,
	roughness:            0.0f,
	bump_strength:        0.82f,
	oxide_thickness:      1.0f,
	oxide_contrast:       1.0f,
	bright_rust_amount:   0.14f,
	rust_saturation:      0.64f,
	impurities_weight_1:  1.0f,
	impurities_weight_2:  0.07f,
	impurities_weight_3:  0.42f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 12 - "Low Carbon Steel - Heavy Rust"
export material Steel_Carbon_Low_Heavy_Rust(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Low Carbon Steel - Heavy Rust"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "low", "carbon", "infinite", "tiling", "construction", "architecture", "oxidized", "old", "matte", "rust", "rusty", "brown", "gray")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_Low_Heavy_Rust.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           1.0f,
	roughness:            0.4f,
	bump_strength:        0.82f,
	oxide_thickness:      1.0f,
	oxide_contrast:       0.7f,
	bright_rust_amount:   1.0f,
	rust_saturation:      0.52f,
	impurities_weight_1:  0.04f,
	impurities_weight_2:  0.59f,
	impurities_weight_3:  0.0f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);

// 13 - "Low Carbon Steel - Bright Rust"
export material Steel_Carbon_Low_Bright_Rust(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Low Carbon Steel - Bright Rust"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("metal", "steel", "metallic", "low", "carbon", "infinite", "tiling", "construction", "architecture", "oxidized", "old", "matte", "rust", "rusty", "brown", "saturated")),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Steel_Carbon.Steel_Carbon_Low_Bright_Rust.png")
]] = Steel_Carbon(
	infinite_tiling:      true,
	brightness:           1.0f,
	roughness:            0.4f,
	bump_strength:        1.0f,
	oxide_thickness:      1.0f,
	oxide_contrast:       0.7f,
	bright_rust_amount:   1.0f,
	rust_saturation:      1.0f,
	impurities_weight_1:  0.0f,
	impurities_weight_2:  0.59f,
	impurities_weight_3:  0.61f,
	texture_translate:    float2(0.0f),
	texture_rotate:       0.0f,
	texture_scale:        float2(1.0f),
	uv_space_index:       0,
	enable_round_corners: false,
	roundcorner_radius:   0.5f,
	across_materials:     false
);
