/******************************************************************************
 *	 Copyright 2024 NVIDIA Corporation. All rights reserved.	 *
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/


mdl 1.5;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::blend_colors;
import ::nvidia::core_definitions::dimension;


const string COPYRIGHT = 
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

const string DESCRIPTION = "A scratched metal material";

float3 srgb2rgb(float3 val)
{
	return ::math::pow(::math::max(val, float3(0.0f)), 2.2);
}


float uint2float(int x)
{
	return float(x & 0x7FFFFFFF) + (x < 0 ? 2147483648.0 : 0.0);
}

int lowbias32(int x)
{
	x ^= x >>> 16;
	x *= 0x7feb352d;
	x ^= x >>> 15;
	x *= 0x846ca68b;
	x ^= x >>> 16;
	return x;
}

float2 rnd22(int2 p) {
	float2 ret_val = float2(
		uint2float(lowbias32(p[0] + lowbias32(p[1]))) / 4294967296.f,
		uint2float(lowbias32(p[0] + 32000 + lowbias32(p[1]))) / 4294967296.f
	);
	return ret_val;
}	

::base::texture_coordinate_info vmat_transform(
								uniform float2 translation = float2(0.0, 0.0),
								uniform float rotation	 = 0.0,
								uniform float2 scaling	 = float2(1.0, 1.0),
								uniform ::base::texture_coordinate_system system = ::base::texture_coordinate_uvw,
								uniform int uv_space	   = 0
)
{
	float4x4 scale =
	float4x4(1.0 /scaling.x, 0.			 ,  0. ,	 0.,
			 0.			, 1.0 /scaling.y ,  0. ,	 0.,
			 0.			, 0.			 ,  1.0,	 0.,
			 translation.x , translation.y  ,  0.0,	 1.);

	float s = ::math::sin(rotation);
	float c = ::math::cos(rotation);
	float4x4 rotate =
	float4x4(  c  ,  -s   , 0.0 , 0.0,
			   s  ,   c   , 0.0 , 0.0,
			   0.0,   0.0 , 1.0 , 0.0,
			   0. ,   0.0 , 0.0 , 1.);
	
	return ::base::transform_coordinate(scale*rotate, ::base::coordinate_source(system, uv_space));
}

float2x2 invert_2x2(float2x2 M)
{
	float det = M[0][0]*M[1][1] - M[0][1]*M[1][0];
	//https://www.chilimath.com/lessons/advanced-algebra/inverse-of-a-2x2-matrix/
	return (1.0 / det) * float2x2(M[1][1], -M[0][1], -M[1][0], M[0][0]);
}

float3 nonrepeat_lookup(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 1.0,
	float3 average_color = float3(0.5),
	float patch_size = 8.0
)
{
	
	float2 uv_in = float2(uvw.position[0], uvw.position[1]) * texture_scale;
	float Z =  patch_size;	 // patch scale inside example texture
	float CON = 1.0f;
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * uv_in; //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V)); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;
	
	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )

		O = (W[0] = F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I))) - m*float(CON))
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0,1)))) - m*float(CON))
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1,0)))) - m*float(CON));
	else
		O = (W[0] =	  -F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1))))   - m*float(CON))
		  + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1, 0)))) - m*float(CON))
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0, 1)))) - m*float(CON));
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0, 1.0);
	
	return float3(O);
}


float histogram_range(float input, float range, float position)
{	
	float low = ::math::clamp(1.0 - ::math::min(((1.0 - position) + range * 0.5), (1.0 - position) * 2), 0.0, 1.0);
	float high = ::math::clamp(::math::min((position + range * 0.5 ), position * 2.0), 0.0, 1.0);
	return ::math::lerp(low, high, input);
}

float remap_xy_to_0_1(float input, float x, float y)
{
	return (input - x)/(y - x);
}

float histogram_scan_big(float input, float width, float position)
{
	return ::math::clamp(
				remap_xy_to_0_1(input,
					::math::lerp(-width, 1.0, position),
					::math::lerp(0.0, 1.0 + width, position)),
				0.0,
				1.0);
}

color endless_texture(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 10.0,
	float3 average_color = float3(0.5, 0.5, 1.0),
	float patch_size = 8.0,
	bool gamma_correct_lookup = true
)
{
	return gamma_correct_lookup ? color(srgb2rgb(
			nonrepeat_lookup (
				texture: texture,
				uvw: uvw,
				texture_scale: texture_scale,
				average_color: average_color,
				patch_size: patch_size
			))
		) : color(nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		));
}

float3 endless_normal(
	uniform texture_2d texture = texture_2d(),
	float factor = 1.0,
	bool flip_tangent_u = false,
	bool flip_tangent_v = false,
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 1.0,
	float3 average_color = float3(0.5, 0.5, 1.0),
	float patch_size = 8.0
)
{
	float3 transformed_tangent_u = flip_tangent_u ? uvw.tangent_u : - uvw.tangent_u;
	float3 transformed_tangent_v = flip_tangent_v ? uvw.tangent_v : - uvw.tangent_v;
	
	if (flip_tangent_u)
		transformed_tangent_u=-transformed_tangent_u;
	if (flip_tangent_v)
		transformed_tangent_v=-transformed_tangent_v;

	// normalized Lookup
	float3 tangent_space_normal =
		 (nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		) - 0.5) * (2.0 * factor);
		
	 return ::math::normalize(uvw.tangent_u * tangent_space_normal.x +
		  uvw.tangent_v * tangent_space_normal.y +
		  ::state::normal()*1.0); 
}


// Returns the normal n in tangent space, given n is in internal space.
float3 transform_internal_to_tangent(float3 n)
[[ 
	::anno::hidden() 
]]
{
	return
		n.x* float3(::state::texture_tangent_u(0).x,::state::texture_tangent_v(0).x,::state::normal().x)+
		n.y* float3(::state::texture_tangent_u(0).y,::state::texture_tangent_v(0).y,::state::normal().y)+
		n.z* float3(::state::texture_tangent_u(0).z,::state::texture_tangent_v(0).z,::state::normal().z);
}

// Returns the normal n in internal space, given n is in tangent space.
float3 transform_tangent_to_internal(float3 n)
[[ 
	::anno::hidden() 
]]
{
	return  ::state::texture_tangent_u(0) * n.x +
			::state::texture_tangent_v(0) * n.y +
			::state::normal() * n.z ;
}



// Returns a normal by adding a detail normal to a global normal.
// If detail blending of two normal maps gives visual artifacts, check if texture_2d are loaded
// correctly with ::tex::gamma_linear
float3 add_detail_normal(float3 nd = ::state::normal(), float3 n = ::state::normal())
{
	// http://blog.selfshadow.com/publications/blending-in-detail/
	float3 n_t = transform_internal_to_tangent(n);
	float3 nd_t = transform_internal_to_tangent(nd);

	n_t=n_t + float3(0.,0.,1.);
	nd_t = nd_t *  float3(-1.,-1.,1.);

	n = n_t*::math::dot(n_t, nd_t)/n_t.z - nd_t;
	return ::math::normalize(transform_tangent_to_internal(n));
}




export material Nickel_Scratched(
	uniform bool infinite_tiling = false [[
		::anno::description("Enables infinite tiling feature which removes repeating texture patterns. Note that depending on the material this feature changes the appearance of the material slightly."),
		::anno::display_name("Infinite Tiling"),
		::anno::in_group("Appearance")
	]],
	float roughness_metal_surface = 1.0f [[
		::anno::description("The overall roughness of the metal surface."),
		::anno::display_name("Roughness"),
		::anno::in_group("Appearance", "Metal"),
		::anno::hard_range(0.f, 1.f)
	]],
	float roughness_variation = 0.208f [[
		::anno::description("Adds more roughness variation to the scratched metal material."),
		::anno::display_name("Roughness Variation"),
		::anno::in_group("Appearance", "Metal"),
		::anno::hard_range(0.f, 1.f)
	]],
	float brightness = 0.55f [[
		::anno::display_name("Brightness"),
		::anno::in_group("Appearance", "Metal"),
		::anno::hard_range(0.f, 1.f)
	]],
	float brightness_variation = 0.3f [[
		::anno::description("Adds brightness variation to the metal . Has no effect as soon as the  of the material is full on."),
		::anno::display_name("Brightness Variation"),
		::anno::in_group("Appearance", "Metal"),
		::anno::hard_range(0.f, 1.f)
	]],
	uniform float bump_factor = 0.187f [[
		::anno::display_name("Bump Factor"),
		::anno::in_group("Appearance", "Metal"),
		::anno::soft_range(0.f, 2.f)
	]],

//   Scratches
	float roughness_scratches = 0.145f [[
		::anno::display_name("Roughness"),
		::anno::in_group("Appearance", "Scratches"),
		::anno::hard_range(0.f, 1.f)
	]],
	float scratches_variation = 0.3f [[
		::anno::display_name("Variation"),
		::anno::in_group("Appearance", "Scratches"),
		::anno::hard_range(0.f, 1.f)
	]],
	uniform float scratches_bump_factor = 0.435f [[
		::anno::display_name("Bump Factor"),
		::anno::in_group("Appearance", "Scratches"),
		::anno::soft_range(0.f, 2.f)
	]],
	
//   Dirt
	float dirt_transition_softness = 0.85f [[
		::anno::description("Controls the softness of the dirt-metal transition."),
		::anno::display_name("Dirt Transition Softness"),
		::anno::in_group("Appearance", "Dirt Layer"),
		::anno::hard_range(0.f, 1.f)
	]],
	float dirt_amount = 0.212f [[
		::anno::description("Adds dirt and grime on top of the scratched metal. Note that the dirt layer also infoences the roughness of the material."),
		::anno::display_name("Dirt Amount"),
		::anno::in_group("Appearance", "Dirt Layer"),
		::anno::hard_range(0.f, 1.f)
	]],
	
	
// Transform
	uniform float2 texture_translate = float2(0.f) [[
		::anno::display_name("Translate"),
		::anno::description("Offsets the position of the material."),
		::anno::in_group("Transform")
	]],
	uniform float texture_rotate = 0.f [[
		::anno::description("Rotates the material."),
		::anno::display_name("Rotate"),
		::anno::in_group("Transform")
	]],
	uniform float2 texture_scale = float2(1.0f) [[
		::anno::description("Scales the material."),
		::anno::display_name("Scale"),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
		::anno::in_group("Transform")
	]],
	

	
// Round Corners
	uniform bool enable_round_corners = false [[
		::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
		::anno::display_name("Round Corners"),
		::anno::in_group("Round Corners")
	]],
	uniform float radius_mm = 0.f [[
		::anno::description("Radius of the rounded corners."),
		::anno::display_name("Corner Radius"),
		::anno::in_group("Round Corners")
	]],
	uniform bool across_materials = true [[
		::anno::description("Applies the round corner effect across different materials when enabled."),
		::anno::display_name("Across Materials"),
		::anno::in_group("Round Corners")
	]],
	
// Advanced
	uniform int uv_space_index = 0 [[
		::anno::description("Uses selected UV space for material."),
		::anno::display_name("UV Space Index"),
		::anno::in_group("Advanced")
	]]
)
[[
	::anno::author("NVIDIA vMaterials"),
	::anno::display_name("Nickel Scratched"),
	::anno::description(DESCRIPTION),
	::anno::key_words(string[]("metal", "nickel", "scratched", "worn", "old", "aged", "oxidized", "scratches", "infinite tiling", "rough", "bumped", "gray", "neutral")),
	::anno::thumbnail("./.thumbs/Nickel_Scratched.Nickel_Scratched.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = 
	let {
		float brush_scratches_weight = 0.5f;
		// Nickel Reflection Color
		color reflection_color = color(0.696691094703f, 0.640529134605f, 0.563260231405f); // Nickel
		float radius = radius_mm * 0.001;
		bool tmp0 = false;
		material_surface tmp1(
			::df::weighted_layer(::math::pow(1.f - float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.537f) * (histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], dirt_transition_softness, ::math::lerp(0.782999992f, 0.305999994f, dirt_amount)) * 0.899999976f), ::df::diffuse_reflection_bsdf(color(0.0116450004f, 0.00893499982f, 0.00379400002f), 0.f, ""), ::df::color_custom_curve_layer(reflection_color, color(1.f, 1.f, 1.f), 5.f, color(::math::clamp(::math::lerp(0.f, ::math::max(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2]), histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 0.666000009f, ::math::lerp(0.159999996f, 0.600000024f, scratches_variation))) + histogram_range(::math::pow(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 2.20000005f), brightness_variation, ::math::lerp(0.173000008f, 0.850000024f, brightness)), 0.f, 1.f)), ::df::microfacet_ggx_smith_bsdf((::math::lerp(histogram_range(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], roughness_variation, ::math::lerp(0.f, 0.588999987f, roughness_metal_surface)), roughness_scratches, ::math::lerp(0.f, ::math::max(brush_scratches_weight * float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], ::math::max(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])), histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 0.666000009f, ::math::lerp(0.159999996f, 0.600000024f, scratches_variation)))) + histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], dirt_transition_softness, ::math::lerp(0.782999992f, 0.305999994f, dirt_amount)) * 0.400000006f) * (::math::lerp(histogram_range(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], roughness_variation, ::math::lerp(0.f, 0.588999987f, roughness_metal_surface)), roughness_scratches, ::math::lerp(0.f, ::math::max(brush_scratches_weight * float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], ::math::max(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])), histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 0.666000009f, ::math::lerp(0.159999996f, 0.600000024f, scratches_variation)))) + histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], dirt_transition_softness, ::math::lerp(0.782999992f, 0.305999994f, dirt_amount)) * 0.400000006f), (::math::lerp(histogram_range(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], roughness_variation, ::math::lerp(0.f, 0.588999987f, roughness_metal_surface)), roughness_scratches, ::math::lerp(0.f, ::math::max(brush_scratches_weight * float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], ::math::max(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])), histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 0.666000009f, ::math::lerp(0.159999996f, 0.600000024f, scratches_variation)))) + histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], dirt_transition_softness, ::math::lerp(0.782999992f, 0.305999994f, dirt_amount)) * 0.400000006f) * (::math::lerp(histogram_range(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], roughness_variation, ::math::lerp(0.f, 0.588999987f, roughness_metal_surface)), roughness_scratches, ::math::lerp(0.f, ::math::max(brush_scratches_weight * float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], ::math::max(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.109999999f, 0.105999999f, 0.184f), 3.52000022f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_scratch1_G_scratch2_B_scratch3.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])), histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 0.666000009f, ::math::lerp(0.159999996f, 0.600000024f, scratches_variation)))) + histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], dirt_transition_softness, ::math::lerp(0.782999992f, 0.305999994f, dirt_amount)) * 0.400000006f), color(1.f, 1.f, 1.f), ::state::texture_tangent_u(0), ::df::scatter_reflect, ""), bsdf(), add_detail_normal(::math::lerp(::state::normal(), infinite_tiling ? endless_normal(texture_2d("./textures/metal_scratched_scratch_norm.jpg", ::tex::gamma_linear), scratches_bump_factor, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.497999996f, 0.497999996f, 0.991999984f), 3.52000022f) : ::base::tangent_space_normal_texture(texture_2d("./textures/metal_scratched_scratch_norm.jpg", ::tex::gamma_linear), scratches_bump_factor, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false, 1.f, 0.f), histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 0.666000009f, ::math::lerp(0.159999996f, 0.600000024f, scratches_variation))), infinite_tiling ? endless_normal(texture_2d("./textures/metal_scratched_scratch_norm.jpg", ::tex::gamma_linear), bump_factor, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.497999996f, 0.497999996f, 0.995999992f), 3.52000022f) : ::base::tangent_space_normal_texture(texture_2d("./textures/metal_scratched_scratch_norm.jpg", ::tex::gamma_linear), bump_factor, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false, 1.f, 0.f))), add_detail_normal(::math::lerp(::state::normal(), infinite_tiling ? endless_normal(texture_2d("./textures/metal_scratched_scratch_norm.jpg", ::tex::gamma_linear), scratches_bump_factor, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.497999996f, 0.497999996f, 0.991999984f), 3.52000022f) : ::base::tangent_space_normal_texture(texture_2d("./textures/metal_scratched_scratch_norm.jpg", ::tex::gamma_linear), scratches_bump_factor, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false, 1.f, 0.f), histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.455000013f, 0.50999999f, 0.73299998f), 8.f, false) : ::base::file_texture(texture_2d("./textures/metal_scratched_R_diff_G_scratchvar_B_dirt.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 0.666000009f, ::math::lerp(0.159999996f, 0.600000024f, scratches_variation))), infinite_tiling ? endless_normal(texture_2d("./textures/metal_scratched_scratch_norm.jpg", ::tex::gamma_linear), bump_factor, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.52000022f, float3(0.497999996f, 0.497999996f, 0.995999992f), 3.52000022f) : ::base::tangent_space_normal_texture(texture_2d("./textures/metal_scratched_scratch_norm.jpg", ::tex::gamma_linear), bump_factor, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false, 1.f, 0.f))),
			material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
		material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
		color tmp3 = color(1.f, 1.f, 1.f);
		material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f));
		material_geometry tmp5(
			float3(0.f),
			1.f,
			enable_round_corners ? ::state::rounded_corner_normal(radius, across_materials, 1.f) : ::state::normal());
	} in
		material(
			thin_walled: tmp0,
			surface: tmp1,
			backface: tmp2,
			ior: tmp3,
			volume: tmp4,
			geometry: tmp5);
			

export material Nickel_Scratched_Light_Bumpy(*)
[[
	::anno::author("NVIDIA vMaterials"),
	::anno::display_name("Nickel Scratched - Bright and Bumped"),
	::anno::description(DESCRIPTION),
	::anno::key_words(string[]("metal", "nickel", "scratched", "worn", "old", "aged", "oxidized", "scratches", "infinite tiling", "rough", "bumped", "gray", "neutral", "shiny")),
	::anno::thumbnail("./.thumbs/Nickel_Scratched.Nickel_Scratched_Light_Bumpy.png"),
	::anno::copyright_notice(COPYRIGHT)
]]= Nickel_Scratched(
	infinite_tiling:		true,
	roughness_metal_surface: 1.0f,
	roughness_variation:	0.21f,
	brightness:				0.75f,
	brightness_variation:	0.3f,
	bump_factor:			1.0f,
	roughness_scratches:	0.145f,
	scratches_variation:	0.3f,
	scratches_bump_factor:	0.25f,
	dirt_transition_softness: 0.85f,
	dirt_amount:			0.05f,
	texture_translate:		float2(1.0f),
	texture_rotate:			0.0f,
	texture_scale:			float2(1.0f),
	enable_round_corners:	false,
	radius_mm:				1.5,	
	across_materials:		true,
	uv_space_index:			0
);



export material Nickel_Scratched_Dark_Shiny(*)
[[
	::anno::author("NVIDIA vMaterials"),
	::anno::display_name("Nickel Scratched - Dark Shiny"),
	::anno::description(DESCRIPTION),
	::anno::key_words(string[]("metal", "nickel", "scratched", "worn", "old", "aged", "oxidized", "scratches", "infinite tiling", "rough", "bumped", "gray", "neutral", "shiny", "dark")),
	::anno::thumbnail("./.thumbs/Nickel_Scratched.Nickel_Scratched_Dark_Shiny.png"),
	::anno::copyright_notice(COPYRIGHT)
]] = Nickel_Scratched(
	infinite_tiling:		true,
	roughness_metal_surface: 0.28f,
	roughness_variation:	0.517f,
	brightness:				0.35f,
	brightness_variation:	0.43f,
	bump_factor:			0.26f,
	roughness_scratches:	0.21f,
	scratches_variation:	0.76f,
	scratches_bump_factor:	0.23f,
	dirt_transition_softness: 0.98f,
	dirt_amount:			0.06f,
	texture_translate:		float2(1.0f),
	texture_rotate:			0.0f,
	texture_scale:			float2(1.0f),
	enable_round_corners:	false,
	radius_mm:				1.5,	
	across_materials:		true,
	uv_space_index:			0
);


export material Nickel_Scratched_Dark_Matte(*)
[[
	::anno::author("NVIDIA vMaterials"),
	::anno::display_name("Nickel Scratched - Dark Matte"),
	::anno::description(DESCRIPTION),
	::anno::key_words(string[]("metal", "nickel", "scratched", "worn", "old", "aged", "oxidized", "scratches", "infinite tiling", "rough", "bumped", "gray", "neutral", "matte", "dark")),
	::anno::thumbnail("./.thumbs/Nickel_Scratched.Nickel_Scratched_Dark_Matte.png"),
	::anno::copyright_notice(COPYRIGHT)
]] = Nickel_Scratched(
	infinite_tiling:		true,
	roughness_metal_surface: 1.0f,
	roughness_variation:	0.21f,
	brightness:				0.023f,
	brightness_variation:	0.119f,
	bump_factor:			0.521f,
	roughness_scratches:	0.28f,
	scratches_variation:	0.86f,
	scratches_bump_factor:	1.0f,
	dirt_transition_softness: 0.85f,
	dirt_amount:			0.057f,
	texture_translate:		float2(1.0f),
	texture_rotate:			0.0f,
	texture_scale:			float2(1.0f),
	enable_round_corners:	false,
	radius_mm:				1.5,	
	across_materials:		true,
	uv_space_index:			0
);




export material Nickel_Scratched_Scuffs_and_Grime(*)
[[
	::anno::author("NVIDIA vMaterials"),
	::anno::display_name("Nickel Scratched - Scuffs and Grime"),
	::anno::description(DESCRIPTION),
	::anno::key_words(string[]("metal", "nickel", "scratched", "worn", "dirty", "old", "aged", "oxidized", "scratches", "infinite tiling", "rough", "bumped", "gray", "neutral", "matte", "dark")),
	::anno::thumbnail("./.thumbs/Nickel_Scratched.Nickel_Scratched_Scuffs_and_Grime.png"),
	::anno::copyright_notice(COPYRIGHT)
]] = Nickel_Scratched(
	infinite_tiling:		true,
	roughness_metal_surface: 0.756f,
	roughness_variation:	0.208f,
	brightness:				0.948f,
	brightness_variation:	0.119f,
	bump_factor:			1.848f,
	roughness_scratches:	0.099f,
	scratches_variation:	0.075f,
	scratches_bump_factor:	0.903f,
	dirt_transition_softness: 0.85f,
	dirt_amount:			1.0f,
	texture_translate:		float2(1.0f),
	texture_rotate:			0.0f,
	texture_scale:			float2(1.0f),
	enable_round_corners:	false,
	radius_mm:				1.5,	
	across_materials:		true,
	uv_space_index:			0
);




export material Nickel_Scratched_Dirty_Rough(*)
[[
	::anno::author("NVIDIA vMaterials"),
	::anno::display_name("Nickel Scratched - Dirty Rough"),
	::anno::description(DESCRIPTION),
	::anno::key_words(string[]("metal", "nickel", "scratched", "worn", "dirt", "dirty", "old", "aged", "oxidized", "scratches", "infinite tiling", "rough", "bumped", "gray", "neutral", "matte", "dark")),
	::anno::thumbnail("./.thumbs/Nickel_Scratched.Nickel_Scratched_Dirty_Rough.png"),
	::anno::copyright_notice(COPYRIGHT)
]] = Nickel_Scratched(
	infinite_tiling:		true,
	roughness_metal_surface: 1.0f,
	roughness_variation:	0.208f,
	brightness:				0.8f,
	brightness_variation:	0.838f,
	bump_factor:			1.914f,
	roughness_scratches:	0.35f,
	scratches_variation:	0.0f,
	scratches_bump_factor:	0.903f,
	dirt_transition_softness: 0.901f,
	dirt_amount:			0.581f,
	texture_translate:		float2(1.0f),
	texture_rotate:			0.0f,
	texture_scale:			float2(1.0f),
	enable_round_corners:	false,
	radius_mm:				1.5,	
	across_materials:		true,
	uv_space_index:			0
);
