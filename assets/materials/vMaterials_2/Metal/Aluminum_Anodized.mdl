/******************************************************************************
 *     Copyright 2024 NVIDIA Corporation. All rights reserved.
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/

mdl 1.7;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::blend_colors;
import ::nvidia::core_definitions::dimension;

const string DESCRIPTION = "Aluminum material that has been anodized with a colored layer. Additional control features include scratches, smudges and dirt which give the material a worn and used appearance.";

const string COPYRIGHT = 
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";


struct vm_coordinates{
	float2 uv;			// UV coordinates stored as a simple float2
	float rotation;		// The rotation is stored in radiands (not degress), to convert use ((rotation* 3.1415926535897932384626433832f) / 180.f)
	int uv_space_index;	// The UV space Index from which the UV data came from
	float4 carry;		// may carry additional data, such as random IDs
};

struct vm_3float{
	float x;
	float y;
	float z;
};

struct vm_4float{
	float x;
	float y;
	float z;
	float w;
};

struct vm_col_norm{
	float3 value;
	float3 norm;
};

enum vm_mono_select 
[[
    anno::description("Modes for the creation of a gray-scale value from a color."),
    anno::hidden()
]]
{
	mono_r = 0,
	mono_g = 1,
	mono_b = 2,
	mono_a = 3,
	mono_average = 4
};



vm_coordinates vm_coord
(
	float2 translation	= float2(0.0f, 0.0) [[
		::anno::display_name("Translation"),
		::anno::description("Translates the coordinates.")
	]],
	float rotation 		= 0.0f [[
		::anno::display_name("Rotation"),
		::anno::description("Rotates the coordinates in degrees.")
	]],
	float2 scaling		= float2(1.0f, 1.0f) [[
		::anno::display_name("Scaling"),
		::anno::description("Scales the coordinates.")
	]],	
	uniform int uv_space = 0 [[
		::anno::display_name("UV Space"),
		::anno::description("Chose the UV space.")
	]]
)
[[
		::anno::display_name("vm Transform"),
		::anno::description("Generates coordinates to be used in vm_lookup functions.")
]]
{
	vm_coordinates uv;
	::base::texture_coordinate_info info = ::base::coordinate_source( ::base::texture_coordinate_uvw, uv_space);
	uv.rotation = (rotation * 3.1415926535897932384626433832f) / 180.f;
	uv.uv = float2(info.position.x, info.position.y);
	float sine   = ::math::sin(uv.rotation);
	float cosine = ::math::cos(uv.rotation);
	float2x2 rot = float2x2(cosine, -sine, sine, cosine);
	uv.uv = rot * uv.uv;
	uv.uv /= scaling;
	uv.uv += translation;
	// Translation before or after rotation?
	return uv;
}


vm_coordinates vm_coord_post_scale(
	vm_coordinates uv = vm_coord(),
	float2 scale = float2(1.0f)
)
{
	uv.uv /= scale;
	return uv;
}

float remap_xy_to_0_1(float input, float x, float y)
{
	return (input - x)/(y - x);
}

float2x2 invert_2x2(float2x2 M)
{
	float det = M[0][0]*M[1][1] - M[0][1]*M[1][0];
	//https://www.chilimath.com/lessons/advanced-algebra/inverse-of-a-2x2-matrix/
	return (1.0 / det) * float2x2(M[1][1], -M[0][1], -M[1][0], M[0][0]);
}

int lowbias32(int x)
{
    x ^= x >>> 16;
    x *= 0x7feb352d;
    x ^= x >>> 15;
    x *= 0x846ca68b;
    x ^= x >>> 16;
    return x;
}

float uint2float(int x)
{
    return float(x & 0x7FFFFFFF) + (x < 0 ? 2147483648.0 : 0.0);
}

float2 rnd22(int2 p) {
	float2 ret_val = float2(
		uint2float(lowbias32(p[0] + lowbias32(p[1]))) / 4294967296.f,
		uint2float(lowbias32(p[0] + 32000 + lowbias32(p[1]))) / 4294967296.f
	);
    return ret_val;
}    

float3 vm_tex_infinite(
	uniform texture_2d tex = texture_2d(),
	vm_coordinates uv = vm_coord(),
	float3 average_color = float3(0.5f, 0.5f, 1.0f),
	float patch_size = 1.0,
	bool gamma_correct = true,
	float gamma = 2.2f
)
{
	float2 uv_in = uv.uv;
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * (uv.uv / patch_size); //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V))+int2(935); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;
	
	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
		O = (W[0] = F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I))) - m)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0,1)))) - m)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1,0)))) - m);
	else
		O = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1))))   - m)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1, 0)))) - m)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0, 1)))) - m);
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0f, 1.0f);
	
	return gamma_correct? ::math::pow(::math::max(O, float3(0.0f)), gamma) : float3(O);
}

float3 vm_tex_infinite_normal(
	uniform texture_2d tex = texture_2d(),
	vm_coordinates uv = vm_coord(),
	float3 average_color = float3(0.5f),
	float patch_size = 1.0,
	float normal_strength = 1.0
)
{
	float2 uv_in = uv.uv;
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * (uv.uv / patch_size); //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V))+int2(935); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;

	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
		O = (W[0] = F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I))) - m)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0,1)))) - m)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1,0)))) - m);
	else
		O = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1))))   - m)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1, 0)))) - m)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0, 1)))) - m);
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0, 1.0);
	
	float3 norm = (O - float3(.5f)) * 2.0f;
	norm = ::math::normalize(norm * float3(normal_strength, normal_strength, 1.0));
	// if any rotation happened prior to the lookup, compensate for it
	norm = float3(::math::cos(uv.rotation) * norm.x - ::math::sin(uv.rotation) * norm.y,
					::math::sin(uv.rotation) * norm.x + ::math::cos(uv.rotation) * norm.y,
					norm.z);
	return norm.x * ::state::texture_tangent_u(uv.uv_space_index) +
			norm.y * ::state::texture_tangent_v(uv.uv_space_index) +
			norm.z * ::state::normal();	
}


vm_col_norm vm_tex_infinite_color_normal(
	uniform texture_2d tex_col = texture_2d(),
	uniform texture_2d tex_norm = texture_2d(),
	vm_coordinates uv = vm_coord(),
	float3 average_color = float3(0.5),
	float3 average_norm = float3(0.5f, 0.5f, 1.0f),
	float patch_size = 1.0,
	// Color output settings
	bool color_out_gamma_correct = true,
	float color_out_gamma = 2.2f,
	// Normal output setting
	float normal_strength = 1.0
)
{
	vm_col_norm ret;
	float2 uv_in = uv.uv;
	
	float3 O_a = float3(0.f);
	float3 O_b = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * (uv.uv / patch_size); //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V))+int2(935); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m_a = average_color;
	float3 m_b = average_norm;

	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
	{
		O_a = (W[0] = F[2]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I))) - m_a)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(0,1)))) - m_a)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1,0)))) - m_a);
		O_b = (W[0] = F[2]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I))) - m_b)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(0,1)))) - m_b)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1,0)))) - m_b);
	}
	else
	{
		O_a = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1))))   - m_a)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1, 0)))) - m_a)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(0, 1)))) - m_a);
		O_b = (W[0] =      -F[2]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1))))   - m_b)
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1, 0)))) - m_b)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(0, 1)))) - m_b);
	}
	
	O_a = m_a + O_a/::math::length(W);
	O_a = ::math::clamp( (O_a), 0.0, 1.0);
	ret.value = color_out_gamma_correct? ::math::pow(::math::max(O_a, float3(0.0f)), color_out_gamma) : float3(O_a);
	
	O_b = m_b + O_b/::math::length(W);
	O_b = ::math::clamp( (O_b), 0.0, 1.0);
	
	float3 norm = (O_b - float3(.5f)) * 2.0f;
	norm = ::math::normalize(norm * float3(normal_strength, normal_strength, 1.0));
	// if any rotation happened prior to the lookup, compensate for it
	norm = float3(::math::cos(uv.rotation) * norm.x - ::math::sin(uv.rotation) * norm.y,
					::math::sin(uv.rotation) * norm.x + ::math::cos(uv.rotation) * norm.y,
					norm.z);
	ret.norm = norm.x * ::state::texture_tangent_u(uv.uv_space_index) +
			norm.y * ::state::texture_tangent_v(uv.uv_space_index) +
			norm.z * ::state::normal();	
			
	return ret;
}


float3 vm_tex_normal_lookup(
	uniform texture_2d tex,
	vm_coordinates uv = vm_coord(),
	float strength = 1.0f
)
{
	float rot = uv.rotation;
	// Lookup and convert normal texture to -1 ... 1 range
	float3 norm = (::tex::lookup_float3(tex, uv.uv, ::tex::wrap_repeat, ::tex::wrap_repeat) - float3(.5f)) * 2.0f;
	norm = ::math::normalize(norm * float3(strength, strength, 1.0));
	// if any rotation happened prior to the lookup, compensate for it
	norm = float3(::math::cos(rot) * norm.x - ::math::sin(rot) * norm.y,
					::math::sin(rot) * norm.x + ::math::cos(rot) * norm.y,
					norm.z);
	return norm.x * ::state::texture_tangent_u(uv.uv_space_index) +
			norm.y * ::state::texture_tangent_v(uv.uv_space_index) +
			norm.z * ::state::normal();
}

float3 vm_tex_lookup_float3(
	uniform texture_2d tex,
	vm_coordinates uv = vm_coord(),
	float3 scale = float3(1.0f))
{
	return ::tex::lookup_float3(tex, uv.uv, ::tex::wrap_repeat, ::tex::wrap_repeat) * scale;
}

vm_3float vm_tex_lookup_3float(
	uniform texture_2d tex,
	vm_coordinates uv = vm_coord(),
	float3 scale = float3(1.0f))
{
	vm_3float ret;
	float3 lookup = ::tex::lookup_float3(tex, uv.uv, ::tex::wrap_repeat, ::tex::wrap_repeat) * scale;
	ret.x = lookup.x;
	ret.y = lookup.y;
	ret.z = lookup.z;
	return ret;
}



// **********************  ***********************

// Returns the normal n in tangent space, given n is in internal space.
float3 transform_internal_to_tangent(float3 n)
[[ 
    anno::hidden() 
]]
{
    return
        n.x* float3(state::texture_tangent_u(0).x,state::texture_tangent_v(0).x,state::normal().x)+
        n.y* float3(state::texture_tangent_u(0).y,state::texture_tangent_v(0).y,state::normal().y)+
        n.z* float3(state::texture_tangent_u(0).z,state::texture_tangent_v(0).z,state::normal().z);
}

// Returns the normal n in internal space, given n is in tangent space.
float3 transform_tangent_to_internal(float3 n)
[[ 
    anno::hidden() 
]]
{
    return  state::texture_tangent_u(0) * n.x +
            state::texture_tangent_v(0) * n.y +
            state::normal() * n.z ;
}

float3 add_detail_normal(float3 nd = state::normal(), float3 n = state::normal())
{
    // http://blog.selfshadow.com/publications/blending-in-detail/
    float3 n_t = transform_internal_to_tangent(n);
    float3 nd_t = transform_internal_to_tangent(nd);

    n_t=n_t + float3(0.,0.,1.);
    nd_t = nd_t *  float3(-1.,-1.,1.);
    n = n_t*math::dot(n_t, nd_t)/n_t.z - nd_t;
    return ::math::normalize(transform_tangent_to_internal(n));
}

float screen(float base, float layer, float weight)
{
	return base + (1.0f - base) * layer * weight;
}


float histogram_scan_big(float input, float width, float position)
{
	return ::math::clamp(
				remap_xy_to_0_1(input,
								::math::lerp(-width, 1.0, position),
								position * (1.0 + width)), // special case of ::math::lerp(0.0, 1.0 + width, position)),
				0.0,
				1.0);
}


const float4[128] grad4(
        float4(0,1,1,1), float4(0,-1,1,0), float4(1,1,0,-1), float4(0,-1,1,-1), float4(0,1,1,0), float4(1,0,-1,1), float4(0,-1,-1,0), float4(-1,0,-1,-1), float4(0,1,-1,1),  float4(1,1,0,1), float4(1,0,-1,-1), float4(0,1,1,-1), float4(0,1,-1,0), float4(-1,1,0,1), float4(0,-1,-1,1), float4(-1,0,1,-1), float4(0,-1,-1,-1), float4(1,0,1,1), float4(-1,-1,0,-1), float4(0,-1,1,1), float4(-1,1,0,-1), float4(0,1,-1,-1), float4(1,-1,0,1), float4(0,-1,-1,0), float4(-1,0,-1,1), float4(1,-1,0,-1), float4(0,-1,1,0), float4(-1,-1,0,1), float4(0,1,-1,0), float4(1,1,0,-1), float4(-1,0,1,1), float4(0,1,1,0),
        float4(1,1,0,-1), float4(0,1,1,-1), float4(-1,0,1,1), float4(0,1,1,0), float4(0,-1,1,-1), float4(0,-1,-1,0), float4(1,0,-1,1), float4(0,1,-1,1), float4(-1,0,-1,-1), float4(1,0,-1,-1), float4(1,1,0,1), float4(0,1,-1,0), float4(0,1,1,1), float4(0,-1,1,0), float4(-1,1,0,1), float4(0,1,-1,0), float4(1,1,0,-1), float4(0,-1,-1,1), float4(-1,0,1,-1), float4(0,-1,-1,-1), float4(1,0,1,1), float4(-1,-1,0,-1), float4(0,-1,1,1), float4(-1,1,0,-1), float4(0,1,-1,-1), float4(1,-1,0,1), float4(0,-1,-1,0), float4(-1,0,-1,1), float4(1,-1,0,-1), float4(0,1,1,0), float4(0,-1,1,0), float4(-1,-1,0,1),
        float4(1,0,1,1), float4(-1,-1,0,-1), float4(0,1,1,0), float4(-1,0,1,-1), float4(1,1,0,1), float4(-1,0,-1,-1), float4(0,-1,-1,0), float4(1,0,-1,-1), float4(-1,0,-1,1), float4(1,-1,0,-1), float4(0,1,1,-1), float4(0,1,-1,0), float4(-1,1,0,1), float4(0,-1,-1,1), float4(1,1,0,-1), float4(-1,0,1,1), float4(0,-1,-1,-1), float4(1,0,-1,1), float4(0,1,1,1), float4(0,-1,1,0), float4(-1,1,0,-1), float4(0,-1,1,1), float4(0,1,-1,-1), float4(1,-1,0,1), float4(0,-1,1,0), float4(-1,-1,0,1), float4(0,1,-1,0), float4(0,-1,1,-1), float4(0,1,1,0), float4(1,1,0,-1), float4(0,-1,-1,0), float4(0,1,-1,1),
         float4(0,1,-1,1), float4(1,1,0,1), float4(1,0,-1,-1), float4(0,1,-1,0), float4(0,1,1,1), float4(0,-1,1,0), float4(-1,1,0,1), float4(0,1,-1,0), float4(1,1,0,-1), float4(0,-1,-1,1), float4(-1,0,1,-1), float4(0,-1,-1,-1), float4(1,0,1,1), float4(-1,-1,0,-1), float4(0,-1,1,1), float4(-1,1,0,-1), float4(0,1,-1,-1), float4(1,-1,0,1), float4(0,-1,-1,0), float4(-1,0,-1,1), float4(1,-1,0,-1), float4(0,1,1,0), float4(0,-1,1,0), float4(-1,-1,0,1), float4(1,1,0,-1), float4(0,1,1,-1), float4(-1,0,1,1), float4(0,1,1,0), float4(0,-1,1,-1), float4(1,0,-1,1), float4(0,-1,-1,0), float4(-1,0,-1,-1));
	

const int[256] rnd1(151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180);	

const int[256] rnd2(120,73,105,71,106,25,159,92,184,93,179,181,
    51,168,252,235,114,143,108,82,4,72,9,192,214,112,12,200,188,8,187,117,157,88,70,87,
    56,38,115,96,59,24,215,231,123,44,144,119,243,245,212,249,197,109,76,66,183,58,232,
    113,86,234,203,80,163,254,140,62,174,118,167,18,55,99,126,170,52,149,156,142,89,189,
    178,240,255,251,169,226,236,153,223,219,54,130,133,7,173,77,242,190,1,122,27,147,196,
    180,238,124,145,101,195,57,61,39,53,154,45,47,107,233,20,176,83,36,136,138,15,230,
    246,94,69,6,135,132,29,131,172,199,228,177,182,216,134,151,95,17,218,155,19,175,41,
    191,85,23,160,125,248,42,209,165,110,102,79,221,32,26,217,2,46,81,74,16,63,202,220,
    37,75,205,13,21,68,148,40,253,241,250,141,164,35,104,49,50,224,166,247,208,162,193,
    150,30,14,10,60,98,207,84,11,239,100,116,152,90,225,129,128,64,28,158,186,127,97,
    204,206,65,5,194,91,67,198,48,111,211,227,229,237,244,43,146,139,222,137,201,22,103,
    210,34,213,31,0,33,185,161,78,121,171,3);
	
const int[256] rnd3(
    88,147,251,140,206,77,107,169,5,222,84,97,116,234,24,90,201,133,40,216,229,34,37,
    158,186,49,98,61,47,9,124,123,65,249,2,66,76,172,198,179,218,210,78,170,132,32,60,
    110,213,223,151,225,115,83,180,161,42,41,164,250,233,70,231,27,217,244,114,96,183,
    228,63,195,236,192,177,209,246,109,171,72,101,23,35,112,182,162,57,69,146,81,248,215,
    7,154,178,252,136,55,150,8,1,142,167,199,39,3,14,135,152,74,33,243,121,13,181,26,211,
    19,64,168,58,67,52,143,113,43,25,240,166,59,4,187,53,238,103,159,220,204,208,245,85,
    122,62,120,93,191,224,16,68,80,226,207,134,188,73,232,102,125,196,254,253,130,241,
    46,119,38,94,221,153,100,163,175,242,131,255,214,87,139,92,12,203,117,219,21,239,6,
    31,20,44,50,28,111,141,18,157,145,11,30,237,82,129,200,89,148,95,194,144,128,176,45,
    79,106,235,75,0,230,160,126,138,227,247,91,17,173,29,51,71,22,36,118,149,189,155,156,
    197,54,202,99,174,137,105,184,205,108,10,193,165,127,56,212,104,190,185,48,86,15);
	
const int[256] rnd4(
    249,199,162,114,17,55,64,57,29,137,194,247,45,70,210,106,184,178,219,122,156,193,
    214,126,138,28,148,121,19,37,135,132,173,225,221,161,180,220,36,84,224,10,185,209,
    238,119,89,253,165,248,120,235,198,52,3,190,125,226,20,6,168,2,170,167,94,54,201,
    179,42,208,242,33,146,158,245,196,166,83,86,34,74,188,44,49,85,11,243,4,99,100,102,
    78,252,26,35,24,113,236,237,9,1,72,63,204,13,15,129,53,79,163,212,213,48,92,97,38,
    189,68,230,234,41,22,246,133,250,202,77,112,18,218,229,124,181,14,108,107,255,91,
    145,223,134,142,96,88,222,207,141,175,203,27,69,95,62,47,147,164,130,232,39,244,21,
    154,239,153,110,172,59,46,81,176,217,80,150,159,182,186,66,174,169,98,231,123,215,
    12,128,187,127,58,32,111,160,149,31,195,65,152,144,82,197,216,75,61,101,117,93,51,
    60,0,67,211,241,206,90,87,56,240,73,177,43,155,157,71,191,136,103,116,140,205,143,
    228,109,23,16,171,115,7,131,192,183,105,251,5,139,40,200,30,254,227,76,151,50,8,104,
    118,233,25);

struct noise_deriv {
    float value;
    float3 deriv;
};

float ridge(float h, float offset)
{
    h = offset - math::abs(h);
    return h*h;
}

float4 grad128_deriv(int hash)
{
    return grad4[hash];
}

float3 ridge_d(float n, float3 deriv, float ridged_n)
{
    return deriv * (2.0f*((n > 0.f) ? -ridged_n : ridged_n));
}

float fade(float t) { return t * t * t * (t * (t * 6.0f - 15.0f) + 10.0f); }
float fade_deriv(float t) { return t * t * (t * (t * 30.0f - 60.0f) + 30.0f); }
float3 abs_d(float n, float3 deriv)
{
    return (n < 0.f) ? -deriv : deriv;
}

noise_deriv perlin_noise_deriv(float4 pos)
{
    int X = math::floor(pos.x),
        Y = math::floor(pos.y),
        Z = math::floor(pos.z),
        W = math::floor(pos.w);
    pos.x -= math::floor(pos.x);
    pos.y -= math::floor(pos.y);
    pos.z -= math::floor(pos.z);
    pos.w -= math::floor(pos.w);
    float u = fade(pos.x);
    float v = fade(pos.y),
          w = fade(pos.z),
          x = fade(pos.w);
    float du = fade_deriv(pos.x),
          dv = fade_deriv(pos.y),
          dw = fade_deriv(pos.z);
    int AX = rnd1[ X   &255] & 127, // &127 = hash for grad4 lookups
        BX = rnd1[(X+1)&255] & 127,
        AY = rnd2[ Y   &255] & 127,
        BY = rnd2[(Y+1)&255] & 127,
        AZ = rnd3[ Z   &255] & 127,
        BZ = rnd3[(Z+1)&255] & 127,
        AW = rnd4[ W   &255] & 127,
        BW = rnd4[(W+1)&255] & 127;

    // .w always holds the actual value, .xyz the derivative
    float4 x0y0z0w0_d = grad128_deriv(AX^AY^AZ^AW);
    x0y0z0w0_d.w = pos.x*x0y0z0w0_d.x + pos.y*x0y0z0w0_d.y + pos.z*x0y0z0w0_d.z + pos.w*x0y0z0w0_d.w;
    float4 x1y0z0w0_d = grad128_deriv(BX^AY^AZ^AW);
    x1y0z0w0_d.w = pos.x*x1y0z0w0_d.x - x1y0z0w0_d.x + pos.y*x1y0z0w0_d.y + pos.z*x1y0z0w0_d.z + pos.w*x1y0z0w0_d.w;
    float4 x0y1z0w0_d = grad128_deriv(AX^BY^AZ^AW);
    x0y1z0w0_d.w = pos.x*x0y1z0w0_d.x + pos.y*x0y1z0w0_d.y - x0y1z0w0_d.y + pos.z*x0y1z0w0_d.z + pos.w*x0y1z0w0_d.w;
    float4 x1y1z0w0_d = grad128_deriv(BX^BY^AZ^AW);
    x1y1z0w0_d.w = pos.x*x1y1z0w0_d.x - x1y1z0w0_d.x + pos.y*x1y1z0w0_d.y - x1y1z0w0_d.y + pos.z*x1y1z0w0_d.z + pos.w*x1y1z0w0_d.w;
    float4 x0y0z1w0_d = grad128_deriv(AX^AY^BZ^AW);
    x0y0z1w0_d.w = pos.x*x0y0z1w0_d.x + pos.y*x0y0z1w0_d.y + pos.z*x0y0z1w0_d.z - x0y0z1w0_d.z + pos.w*x0y0z1w0_d.w;
    float4 x1y0z1w0_d = grad128_deriv(BX^AY^BZ^AW);
    x1y0z1w0_d.w = pos.x*x1y0z1w0_d.x - x1y0z1w0_d.x + pos.y*x1y0z1w0_d.y + pos.z*x1y0z1w0_d.z - x1y0z1w0_d.z + pos.w*x1y0z1w0_d.w;
    float4 x0y1z1w0_d = grad128_deriv(AX^BY^BZ^AW);
    x0y1z1w0_d.w = pos.x*x0y1z1w0_d.x + pos.y*x0y1z1w0_d.y - x0y1z1w0_d.y + pos.z*x0y1z1w0_d.z - x0y1z1w0_d.z + pos.w*x0y1z1w0_d.w;
    float4 x1y1z1w0_d = grad128_deriv(BX^BY^BZ^AW);
    x1y1z1w0_d.w = pos.x*x1y1z1w0_d.x - x1y1z1w0_d.x + pos.y*x1y1z1w0_d.y - x1y1z1w0_d.y + pos.z*x1y1z1w0_d.z - x1y1z1w0_d.z + pos.w*x1y1z1w0_d.w;
    float4 x0y0z0w1_d = grad128_deriv(AX^AY^AZ^BW);
    x0y0z0w1_d.w = pos.x*x0y0z0w1_d.x + pos.y*x0y0z0w1_d.y + pos.z*x0y0z0w1_d.z + pos.w*x0y0z0w1_d.w - x0y0z0w1_d.w;
    float4 x1y0z0w1_d = grad128_deriv(BX^AY^AZ^BW);
    x1y0z0w1_d.w = pos.x*x1y0z0w1_d.x - x1y0z0w1_d.x + pos.y*x1y0z0w1_d.y + pos.z*x1y0z0w1_d.z + pos.w*x1y0z0w1_d.w - x1y0z0w1_d.w;
    float4 x0y1z0w1_d = grad128_deriv(AX^BY^AZ^BW);
    x0y1z0w1_d.w = pos.x*x0y1z0w1_d.x + pos.y*x0y1z0w1_d.y - x0y1z0w1_d.y + pos.z*x0y1z0w1_d.z + pos.w*x0y1z0w1_d.w - x0y1z0w1_d.w;
    float4 x1y1z0w1_d = grad128_deriv(BX^BY^AZ^BW);
    x1y1z0w1_d.w = pos.x*x1y1z0w1_d.x - x1y1z0w1_d.x + pos.y*x1y1z0w1_d.y - x1y1z0w1_d.y + pos.z*x1y1z0w1_d.z + pos.w*x1y1z0w1_d.w - x1y1z0w1_d.w;

    float4 i1_d = x1y0z0w0_d - x0y0z0w0_d;
    float4 i2_d = x0y1z0w0_d - x0y0z0w0_d;

    float4 d_r = x0y0z0w0_d + i1_d*u + i2_d*v;
    d_r.x += i1_d.w*du;
    d_r.y += i2_d.w*dv;

    float4 i5_d = x1y1z0w0_d - x0y1z0w0_d - i1_d;
    float4 i3_d = x0y0z1w0_d - x0y0z0w0_d;
    float4 i4_d = x0y0z0w1_d - x0y0z0w0_d;
    float4 i6_d = x0y1z1w0_d - x0y1z0w0_d - i3_d;
    float4 i7t_d = x0y1z0w1_d - x0y1z0w0_d;
    float4 i7_d = i7t_d - i4_d;
    float4 i8t_d = x1y0z1w0_d - x1y0z0w0_d;
    float4 i8_d = i8t_d - i3_d;
    float4 i9_d = x1y0z0w1_d - x1y0z0w0_d - i4_d;

    float4 x0y0z1w1_d = grad128_deriv(AX^AY^BZ^BW);
    x0y0z1w1_d.w = pos.x*x0y0z1w1_d.x + pos.y*x0y0z1w1_d.y + pos.z*x0y0z1w1_d.z - x0y0z1w1_d.z + pos.w*x0y0z1w1_d.w - x0y0z1w1_d.w;

    float4 i10t_d = x0y0z1w1_d - x0y0z0w1_d;
    float4 i10_d = i10t_d - i3_d;
    float4 i11_d = x1y1z1w0_d - i6_d - i8t_d - x1y1z0w0_d;
    float4 i12_d = x0y0z0w1_d - x0y1z0w1_d + x1y1z0w1_d - i5_d - x1y0z0w1_d;

    float4 x0y1z1w1_d = grad128_deriv(AX^BY^BZ^BW);
    x0y1z1w1_d.w = pos.x*x0y1z1w1_d.x + pos.y*x0y1z1w1_d.y - x0y1z1w1_d.y + pos.z*x0y1z1w1_d.z - x0y1z1w1_d.z + pos.w*x0y1z1w1_d.w - x0y1z1w1_d.w;

    float4 i13t_d = x0y1z1w1_d - x0y0z1w1_d;
    float4 i13_d = i13t_d + x0y0z0w1_d - i6_d - x0y1z0w1_d;

    float4 x1y0z1w1_d = grad128_deriv(BX^AY^BZ^BW);
    x1y0z1w1_d.w = pos.x*x1y0z1w1_d.x - x1y0z1w1_d.x + pos.y*x1y0z1w1_d.y + pos.z*x1y0z1w1_d.z - x1y0z1w1_d.z + pos.w*x1y0z1w1_d.w - x1y0z1w1_d.w;

    float4 i14_d = x1y0z1w1_d - i10t_d - i8_d - x1y0z0w1_d;

    float4 x1y1z1w1_d = grad128_deriv(BX^BY^BZ^BW);
    x1y1z1w1_d.w = pos.x*x1y1z1w1_d.x - x1y1z1w1_d.x + pos.y*x1y1z1w1_d.y - x1y1z1w1_d.y + pos.z*x1y1z1w1_d.z - x1y1z1w1_d.z + pos.w*x1y1z1w1_d.w - x1y1z1w1_d.w;

    float4 i15_d = x1y1z1w1_d + i9_d + x1y0z1w0_d + i7t_d - x0y0z1w0_d + x1y1z0w0_d - x1y1z1w0_d - x0y1z1w0_d - x1y1z0w1_d - i13t_d - x1y0z1w1_d;

    d_r += i5_d*(u*v) + i6_d*(v*w) + i3_d*w + i4_d*x + i7_d*(v*x) + i8_d*(u*w) + i9_d*(u*x) + i10_d*(w*x) + i11_d*(u*v*w) + i12_d*(u*v*x) + i13_d*(v*w*x) + i14_d*(w*x*u) + i15_d*(u*v*w*x);

    float3 deriv;
    deriv.x = d_r.x
    + i5_d.w*du*v
    + i8_d.w*du*w
    + i9_d.w*du*x
    + i11_d.w*du*v*w
    + i12_d.w*du*v*x
    + i14_d.w*w*x*du
    + i15_d.w*du*v*w*x;

    deriv.y = d_r.y
    + i5_d.w*u*dv
    + i6_d.w*dv*w
    + i7_d.w*dv*x
    + i11_d.w*u*dv*w
    + i12_d.w*u*dv*x
    + i13_d.w*dv*w*x
    + i15_d.w*u*dv*w*x;

    deriv.z = d_r.z
    + i3_d.w*dw
    + i6_d.w*v*dw
    + i8_d.w*u*dw
    + i10_d.w*dw*x
    + i11_d.w*u*v*dw
    + i13_d.w*v*dw*x
    + i14_d.w*dw*x*u
    + i15_d.w*u*v*dw*x;

    return noise_deriv(deriv: float3(deriv.x, deriv.y, deriv.z), value: d_r.w);
}

noise_deriv summed_perlin_noise_deriv(float3 pos, float time, int terms, float3 turbulence_weight, bool abs_noise, bool ridged)
{
    float sum = 0.0f;
    float3 deriv = float3(0.0f);
    float weight = ridged ? 0.625f : 1.0f;
    float prev = 1.0f;
    float4 p = float4(pos.x,pos.y,pos.z,time);
    while(terms != 0) {
        terms--;
        noise_deriv n_d = perlin_noise_deriv(p);
        float n2 = ridged ? ridge(n_d.value, 1.0f) : (abs_noise ? math::abs(n_d.value) : n_d.value); // ridged offset = 1.0f, could be configurable
        float3 deriv2 = ridged ? ridge_d(n_d.value, n_d.deriv, n_d.value) : (abs_noise ? abs_d(n_d.value, n_d.deriv) : n_d.deriv);

        sum += weight*prev*n2;
        deriv += prev*deriv2; // gain (weight) cancels frequency doubling (0.5*2)
        p += p;       // frequency doubled, could be configurable
        if (ridged)
            prev = n2;
        weight *= 0.5f; // gain halved, could be configurable
    }

    if((turbulence_weight.x != 0.0f) || (turbulence_weight.y != 0.0f) || (turbulence_weight.z != 0.0f))
    {
    float[2] sc = math::sincos(pos.x*turbulence_weight.x + pos.y*turbulence_weight.y + pos.z*turbulence_weight.z + sum);
        sum = sc[0];
    deriv = sc[1] * (deriv + turbulence_weight);
    }

    if (!abs_noise && !ridged) { // Absolute & Ridged already are in 0..1
        // Scale [-1,1] to [0,1]
        sum = sum*0.5f+0.5f;
        deriv *= 0.5f;
    }
    return noise_deriv(value: sum, deriv: deriv);
}

float3 apply_noise_modifications_deriv(
    float value,
    float3 deriv,
    float position,
    uniform bool apply_marble = false
        [[
            anno::description("Triggers a modification to make the pattern have a marble like appearance (cosine)")
        ]],
    uniform bool apply_dent = false
        [[
            anno::description("Raises the output of the function to the power of 3")
        ]],
    uniform float noise_threshold_high = 1.0
        [[
            anno::description("Noise values greater then \"noise_threshold_high\" are mapped to \"color1\""),
            anno::hard_range(0.0, 1.0)
        ]],
    uniform float noise_threshold_low = 0.0
        [[
            anno::description("Noise values greater then \"noise_threshold_low\" are mapped to \"color2\""),
            anno::hard_range(0.0, 1.0)
        ]],
    uniform float noise_bands = 1.0
        [[
            anno::description("Creates a \"tree ring\" like banding effect")
        ]]
)
{
    float sn = value;
    if(apply_marble)
    {
        // Classic Perlin marble function
        float[2] sc = math::sincos(position + sn*5.0f); //!! 5.0f = magic
        sn = sc[1];
        deriv = sc[0] * float3(deriv.x*-5.0f-1.0f, deriv.y*-5.0f, deriv.z*-5.0f);
    }

    if(apply_dent)
    {
        // Cube
        sn *= sn * sn;
        deriv *= 3.0f * (sn * sn);
    }

    // Create banding/stripes by using the fraction component only
    if(noise_bands != 1.0f) // avoid case of sn = 1 being wrapped to 0
    {
        sn *= noise_bands;
        sn -= math::floor(sn);

        // Smooth transition slightly
        float tmp = 1.0f - sn;
        float tmp2 = tmp*tmp;          // ^2
        float tmp4 = tmp2*tmp2;        // ^4
        float tmp16 = tmp4*tmp4;       // ^8
        tmp16 *= tmp16;                // ^16
        deriv *= 1.0f - 20.0f*tmp16*tmp2*tmp; // ^19
        sn += tmp16*tmp4;              // ^20
    }

    // Clamp the noise
    if (noise_threshold_high > noise_threshold_low)
    {
        sn = (sn - noise_threshold_low) / (noise_threshold_high - noise_threshold_low);
        if (sn < 0.0f || sn > 1.0f) {
            deriv = float3(0.0f);
            sn = math::saturate(sn);
        }
        else
            deriv /= (noise_threshold_high - noise_threshold_low);
    }

    return deriv;
}

export float3 perlin_noise_bump_texture(
    ::base::texture_coordinate_info uvw = ::base::texture_coordinate_info()
        [[
            anno::description("Parameterization to be used for texture mapping. Defaults to texture channel 0.")
        ]],
    uniform float factor = 1.
        [[
            anno::description("Strength of the bump mapping effect")
        ]],
    uniform float size = 1.
        [[
            anno::description("Size of the biggest feature of the pattern")
        ]],
    uniform bool apply_marble = false
        [[
            anno::description("Triggers a modification to make the pattern have a marble like appearance (cosine)")
        ]],
    uniform bool apply_dent = false
        [[
            anno::description("Raises the output of the function to the power of 3")
        ]],
    uniform float noise_phase = 0.0
        [[
            anno::description("Controls the 4th dimension of the function")
        ]],
    uniform int noise_levels = 1
        [[
            anno::description("Number of octaves to of Perlin to sum up"),
            anno::soft_range(1, 6)
        ]],
    uniform bool absolute_noise = false
        [[
            anno::description("If set to true, the appearance of the pattern will be more \"billowing\" and \"turbulent\"")
        ]],
    uniform bool ridged_noise = false
        [[
            anno::description("If set to true, the appearance of the pattern will be more \"electrical\"")
        ]],
    uniform float3 noise_distortion = float3( 0.0 )
        [[
            anno::description("Weight of additional noise turbulence")
        ]],
    uniform float noise_threshold_high = 1.0
        [[
            anno::description("Noise values greater then \"noise_threshold_high\" are mapped to the maximum bump height"),
            anno::hard_range(0.0, 1.0)
        ]],
    uniform float noise_threshold_low = 0.0
        [[
            anno::description("Noise values greater then \"noise_threshold_low\" are mapped to the minimum bump height"),
            anno::hard_range(0.0, 1.0)
        ]],
    uniform float noise_bands = 1.0
        [[
            anno::description("creates a \"tree ring\" like banding effect")
        ]],
    float3 normal = state::normal()
        [[
            anno::description("Base normal for the bump mapping.")
        ]]
)
[[
    anno::description("Bump-mapping Perlin noise"),
    anno::noinline()
]]
{
    if (factor == 0.0f || size == 0.0f)
        return normal;

    float3 scaled_position = uvw.position / size;

    noise_deriv nd = summed_perlin_noise_deriv(
        scaled_position,
        noise_phase,
        noise_levels,
        noise_distortion,
        absolute_noise,
        ridged_noise);

    float3 deriv = apply_noise_modifications_deriv(
        nd.value,
        nd.deriv,
        scaled_position.x,
        apply_marble,
        apply_dent,
        noise_threshold_high,
        noise_threshold_low,
        noise_bands);

    float bump_factor = -0.1f * factor; // original code used 0.1 as magic constant for delta, obtain same magnitude

    return math::normalize(
        normal * (math::abs(deriv.z * bump_factor) + 1.0f) +
        uvw.tangent_u * (deriv.x * bump_factor)  +
        uvw.tangent_v * (deriv.y * bump_factor));
}

export material Aluminum_Anodized(
    uniform bool infinite_tiling = false [[
        ::anno::description("Enables infinite tiling feature which removes repeating texture patterns. Note that depending on the material this feature changes the appearance of the material slightly."),
        ::anno::display_name("Infinite Tiling"),
        ::anno::in_group("Appearance"),
        ::anno::ui_order(0)
    ]],
    uniform bool enable_coating = false [[
        ::anno::description("Enables a clearcoat layer on top of the material."),
        ::anno::display_name("Enable Clearcoat"),
        ::anno::in_group("Appearance"),
        ::anno::ui_order(1)
    ]],
    color color_1 = color(0.031896f, 0.250158f, 0.644480f) [[
        ::anno::description("Sets the color of the anodized aluminum."),
        ::anno::display_name("Color"),
        ::anno::in_group("Appearance"),
        ::anno::ui_order(2)
    ]],
    float anodization_roughness = 0.69f [[
        ::anno::description("The roughness of the anodized aluminum. Higher values yield blurrier reflections."),
        ::anno::display_name("Anodization Roughness"),
        ::anno::in_group("Appearance"),
        ::anno::soft_range(0.f, 1.f),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(3)
    ]],
    float smudges = 0.f [[
        ::anno::description("Adds a layer of smudges that makes reflections blurrier."),
        ::anno::display_name("Smudges"),
        ::anno::in_group("Appearance", "Imperfections"),
        ::anno::soft_range(0.f, 1.f),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(4)
    ]],
    float wear = 0.f [[
        ::anno::description("Adds a layer of wear that makes reflections blurrier."),
        ::anno::display_name("Wear"),
        ::anno::in_group("Appearance", "Imperfections"),
        ::anno::soft_range(0.f, 1.f),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(5)
    ]],
    float abrasion = 0.f [[
        ::anno::description("Adds a layer of abrasion that makes reflections blurrier."),
        ::anno::display_name("Abrasion"),
        ::anno::in_group("Appearance", "Imperfections"),
        ::anno::soft_range(0.f, 1.f),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(6)
    ]],
    float balance = 0.5f [[
        ::anno::description("Small values make the imperfections smaller and enhance the contrast while higher values make them bigger."),
        ::anno::display_name("Imperfections Balance"),
        ::anno::in_group("Appearance", "Imperfections"),
        ::anno::soft_range(0.f, 1.f),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(7)
    ]],
    float dirt_weight = 0.f [[
        ::anno::description("Increasing this value applies the imperfections also a a visible layer of dirt that covers the surface."),
        ::anno::display_name("Dirt Weight"),
        ::anno::in_group("Appearance", "Imperfections"),
        ::anno::soft_range(0.f, 1.f),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(8)
    ]],
    float scratches = 0.f [[
        ::anno::description("Adjusts the amount and size of scratches that appear on the material."),
        ::anno::display_name("Scratches"),
        ::anno::in_group("Appearance"),
        ::anno::soft_range(0.f, 1.f),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(9)
    ]],
    float scratches_bump_strength = 0.199999988f [[
        ::anno::description("Determines the degree of bumpiness."),
        ::anno::display_name("Scratches Bump Strength"),
        ::anno::in_group("Appearance"),
        ::anno::soft_range(0.f, 1.f),
        ::anno::hard_range(0.f, 1.f),
        ::anno::ui_order(10)
    ]],
    uniform bool enable_anodization_bump = true [[
        ::anno::description("Enables bumpy surface for the anodization layer."),
        ::anno::display_name("Anodization Bumps"),
        ::anno::in_group("Appearance", "Anodization Bumps"),
        ::anno::ui_order(11)
    ]],
    uniform float factor = 1.f [[
        ::anno::description("Controls the strength of the finegrained bump on the anodization layer."),
        ::anno::display_name("Anodization Bump Strength"),
        ::anno::in_group("Appearance", "Anodization Bumps"),
        ::anno::hard_range(0.f, 1.f),
        ::anno::soft_range(0.f, 1.f),
		::anno::enable_if("enable_anodization_bump == true"),
        ::anno::ui_order(12)
    ]],
    uniform float anodization_bump_size = 0.24f [[
        ::anno::description("Controls the size of the finegrained bump on the anodization layer."),
        ::anno::display_name("Anodization Bump Scale"),
        ::anno::in_group("Appearance", "Anodization Bumps"),
		::anno::enable_if("enable_anodization_bump == true"),
        ::anno::ui_order(13)
    ]],
    uniform bool object_scaled_bump = false [[
        ::anno::description("When enabled, local object scale does scale the procedural noise of the anodization. If disabled, the noise is kept at a global scale that is independent from the scale of the object."),
        ::anno::display_name("Object Scaled Bump"),
        ::anno::in_group("Appearance", "Anodization Bumps"),
		::anno::enable_if("enable_anodization_bump == true"),
        ::anno::ui_order(14)
    ]],
    float2 texture_translate = float2(0.f) [[
        ::anno::description("Controls the position of the texture."),
        ::anno::display_name("Texture Translate"),
        ::anno::in_group("Transform"),
        ::anno::ui_order(13)
    ]],
    float texture_rotate = 0.f [[
        ::anno::description("Rotates angle of the texture in degrees."),
        ::anno::display_name("Texture Rotate"),
        ::anno::in_group("Transform"),
        ::anno::soft_range(0.f, 360.f),
        ::anno::ui_order(14)
    ]],
    float2 texture_scale = float2(1.0f) [[
        ::anno::description("Larger numbers increase the size."),
        ::anno::display_name("Texture Scale"),
        ::anno::in_group("Transform"),
        ::anno::ui_order(15)
    ]],
    uniform int uv_space_index = 0 [[
        ::anno::description("Uses selected UV space for material."),
        ::anno::display_name("UV Space Index"),
        ::anno::in_group("Transform"),
        ::anno::ui_order(16)
    ]],
    uniform bool roundcorners_enable = false [[
        ::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
        ::anno::display_name("Enable Round Corners"),
        ::anno::in_group("Round Corners"),
        ::anno::ui_order(17)
    ]],
    uniform float roundcorners_radius_mm = 0.5f [[
        ::anno::description("Radius of the rounded corners in millimeters."),
        ::anno::display_name("Round Corner Radius (mm)"),
        ::anno::in_group("Round Corners"),
        ::anno::soft_range(0.f, 10.f),
        ::anno::ui_order(18)
    ]],
    uniform bool roundcorners_across_materials = false [[
        ::anno::description("Applies the round corner effect across different materials when enabled."),
        ::anno::display_name("Across Materials"),
        ::anno::in_group("Round Corners"),
        ::anno::ui_order(19)
    ]])
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Electric Blue"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "shiny", "new", "blue", "electric", "saturated", "cool"))
]]
 = 
    let {
        bool tmp0 = false;
        material_surface tmp1(::df::weighted_layer(screen(screen(smudges * histogram_scan_big(::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), float3(1.f, 1.f, 0.98999995f)).x, 0.329999983f, 0.299999982f), histogram_scan_big(::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), float3(1.f, 1.f, 0.98999995f)).y, 0.239999995f, 0.179999992f), wear), histogram_scan_big(::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), float3(1.f, 1.f, 0.98999995f)).z, 0.349999994f, 0.349999994f), abrasion) * ::math::pow(dirt_weight, 0.409999996f), ::df::diffuse_reflection_bsdf(color(0.0144440001f, 0.0094130002f, 0.00926099997f), 0.f), enable_coating ? ::df::custom_curve_layer(0.049999997f, 1.f, 5.f, 1.f - histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))), ::df::microfacet_beckmann_smith_bsdf(screen(screen(smudges * ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).x, ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).y, wear), ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).z, abrasion) * screen(screen(smudges * ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).x, ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).y, wear), ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).z, abrasion), screen(screen(smudges * ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).x, ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).y, wear), ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).z, abrasion) * screen(screen(smudges * ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).x, ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).y, wear), ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).z, abrasion), color(1.f, 1.f, 1.f), color(1.f, 1.f, 1.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::df::weighted_layer(1.f, ::df::simple_glossy_bsdf(::math::lerp(::math::lerp(0.179999992f, 0.649999976f, anodization_roughness), 0.529999971f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f)))) * ::math::lerp(::math::lerp(0.179999992f, 0.649999976f, anodization_roughness), 0.529999971f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f)))), ::math::lerp(::math::lerp(0.179999992f, 0.649999976f, anodization_roughness), 0.529999971f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f)))) * ::math::lerp(::math::lerp(0.179999992f, 0.649999976f, anodization_roughness), 0.529999971f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f)))), nvidia::core_definitions::blend_colors(color_1, color(0.346704006f, 0.346704006f, 0.346704006f), ::base::color_layer_blend, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))), true).tint, nvidia::core_definitions::blend_colors(color_1, color(0.346704006f, 0.346704006f, 0.346704006f), ::base::color_layer_blend, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))), true).tint, ::state::texture_tangent_u(0), ::df::scatter_reflect), bsdf(), ::math::lerp(add_detail_normal(vm_tex_normal_lookup(texture_2d("./textures/analum_worn_norm.jpg", ::tex::gamma_linear), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.289999992f)), scratches_bump_strength * histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))) * 0.579999983f), infinite_tiling ? vm_tex_infinite_normal(texture_2d("./textures/analum_scratches_norm.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.497999996f, 0.497999996f, 0.987999976f), 0.349999994f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))) * scratches_bump_strength) : vm_tex_normal_lookup(texture_2d("./textures/analum_scratches_norm.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))) * scratches_bump_strength)), enable_anodization_bump ? ::perlin_noise_bump_texture(::base::transform_coordinate(::base::rotation_translation_scale(float3(0.f), float3(0.f), float3(::state::meters_per_scene_unit()) * (object_scaled_bump ? 1.f : ::state::transform_scale(::state::coordinate_object, ::state::coordinate_world, 1.f))), ::base::coordinate_source(::base::texture_coordinate_object, 0)), factor * 3.f, anodization_bump_size * 0.00200000009f, false, false, 0.f, 1, false, false, float3(0.f), 1.f, 0.f, 1.f, ::state::normal()) : ::state::normal(), 1.f - histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))))), ::state::normal()) : ::df::weighted_layer(::math::pow(screen(screen(smudges * ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).x, ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).y, wear), ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).z, abrasion), 1.66999996f) * 0.209999993f, ::df::microfacet_beckmann_smith_bsdf(screen(screen(smudges * ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).x, ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).y, wear), ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).z, abrasion) * screen(screen(smudges * ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).x, ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).y, wear), ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).z, abrasion), screen(screen(smudges * ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).x, ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).y, wear), ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).z, abrasion) * screen(screen(smudges * ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).x, ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).y, wear), ::math::pow(infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).value : vm_tex_lookup_float3(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(1.f)), ::math::lerp(float3(0.699999988f, 0.670000017f, 0.779999971f), float3(0.189999998f, 0.400000006f, 0.400000006f), float3(balance))).z, abrasion), color(1.f, 1.f, 1.f), color(1.f, 1.f, 1.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::df::weighted_layer(1.f, ::df::simple_glossy_bsdf(::math::lerp(::math::lerp(0.179999992f, 0.649999976f, anodization_roughness), 0.529999971f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f)))) * ::math::lerp(::math::lerp(0.179999992f, 0.649999976f, anodization_roughness), 0.529999971f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f)))), ::math::lerp(::math::lerp(0.179999992f, 0.649999976f, anodization_roughness), 0.529999971f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f)))) * ::math::lerp(::math::lerp(0.179999992f, 0.649999976f, anodization_roughness), 0.529999971f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f)))), nvidia::core_definitions::blend_colors(color_1, color(0.346704006f, 0.346704006f, 0.346704006f), ::base::color_layer_blend, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))), true).tint, nvidia::core_definitions::blend_colors(color_1, color(0.346704006f, 0.346704006f, 0.346704006f), ::base::color_layer_blend, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))), true).tint, ::state::texture_tangent_u(0), ::df::scatter_reflect), bsdf(), ::math::lerp(add_detail_normal(vm_tex_normal_lookup(texture_2d("./textures/analum_worn_norm.jpg", ::tex::gamma_linear), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.289999992f)), scratches_bump_strength * histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))) * 0.579999983f), infinite_tiling ? vm_tex_infinite_normal(texture_2d("./textures/analum_scratches_norm.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.497999996f, 0.497999996f, 0.987999976f), 0.349999994f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))) * scratches_bump_strength) : vm_tex_normal_lookup(texture_2d("./textures/analum_scratches_norm.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))) * scratches_bump_strength)), enable_anodization_bump ? ::perlin_noise_bump_texture(::base::transform_coordinate(::base::rotation_translation_scale(float3(0.f), float3(0.f), float3(::state::meters_per_scene_unit()) * (object_scaled_bump ? 1.f : ::state::transform_scale(::state::coordinate_object, ::state::coordinate_world, 1.f))), ::base::coordinate_source(::base::texture_coordinate_object, 0)), factor * 3.f, anodization_bump_size * 0.00200000009f, false, false, 0.f, 1, false, false, float3(0.f), 1.f, 0.f, 1.f, ::state::normal()) : ::state::normal(), 1.f - histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))))), ::math::lerp(add_detail_normal(vm_tex_normal_lookup(texture_2d("./textures/analum_worn_norm.jpg", ::tex::gamma_linear), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.289999992f)), scratches_bump_strength * histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))) * 0.579999983f), infinite_tiling ? vm_tex_infinite_normal(texture_2d("./textures/analum_scratches_norm.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.497999996f, 0.497999996f, 0.987999976f), 0.349999994f, histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))) * scratches_bump_strength) : vm_tex_normal_lookup(texture_2d("./textures/analum_scratches_norm.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))) * scratches_bump_strength)), enable_anodization_bump ? ::perlin_noise_bump_texture(::base::transform_coordinate(::base::rotation_translation_scale(float3(0.f), float3(0.f), float3(::state::meters_per_scene_unit()) * (object_scaled_bump ? 1.f : ::state::transform_scale(::state::coordinate_object, ::state::coordinate_world, 1.f))), ::base::coordinate_source(::base::texture_coordinate_object, 0)), factor * 3.f, anodization_bump_size * 0.00200000009f, false, false, 0.f, 1, false, false, float3(0.f), 1.f, 0.f, 1.f, ::state::normal()) : ::state::normal(), 1.f - histogram_scan_big(infinite_tiling ? vm_tex_infinite(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(0.0149999997f), 0.349999994f, false, 2.20000005f).x : vm_tex_lookup_3float(texture_2d("./textures/analum_scratches_dist.png", ::tex::gamma_default), vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float2(0.5f)), float3(1.f)).x, 0.0799999982f, ::math::lerp(0.730000019f, 0.0900000036f, ::math::pow(scratches, 0.25999999f))))), infinite_tiling ? vm_tex_infinite_color_normal(texture_2d("./textures/analum_multi_smudges.jpg", ::tex::gamma_linear), texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), float3(0.0599999987f, 0.0500000007f, 0.210999995f), float3(0.5f, 0.5f, 1.f), 0.349999994f, false, 2.20000005f, 1.f).norm : vm_tex_normal_lookup(texture_2d("./textures/analum_dirt_norm.jpg", ::tex::gamma_linear), vm_coord(texture_translate, texture_rotate, texture_scale, uv_space_index), 1.f)), material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        color tmp3 = color(1.f, 1.f, 1.f);
        material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f), emission_intensity: color(0.f, 0.f, 0.f));
        material_geometry tmp5(float3(0.f), 1.f, roundcorners_enable ? ::state::rounded_corner_normal(roundcorners_radius_mm * 0.00100000005f, roundcorners_across_materials, 1.f) : ::state::normal());
        hair_bsdf tmp6 = hair_bsdf();
    } in
        material(
            thin_walled: tmp0,
            surface: tmp1,
            backface: tmp2,
            ior: tmp3,
            volume: tmp4,
            geometry: tmp5,
            hair: tmp6);


export material Aluminum_Anodized_Electric_Blue_Shiny(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Electric Blue Shiny"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Electric_Blue_Shiny.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "clearcoat", "treated", "modern", "automotive",  "design", "reflective", "shiny", "new", "blue", "electric", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.031896f, 0.250158f, 0.644480f),
	anodization_roughness:         .01f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.27f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.5f,
	roundcorners_across_materials: false
);

export material Aluminum_Anodized_Electric_Blue_Coated(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Electric Blue Coated"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Electric_Blue_Coated.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "clearcoat", "treated", "modern", "automotive",  "design", "reflective", "shiny", "new", "blue", "electric", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                true,
	color_1:                       color(0.031896f, 0.250158f, 0.644480f),
	anodization_roughness:         .69f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        1.0f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.5f,
	roundcorners_across_materials: false
);

export material Aluminum_Anodized_Electric_Blue_Smudges(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Electric Blue Smudges"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Electric_Blue_Smudges.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "shiny", "smudged", "handled", "imperfections", "blue", "electric", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.031896f, 0.250158f, 0.644480f),
	anodization_roughness:         .49f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.66f,
	wear:                          0.0f,
	abrasion:                      0.66f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.27f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.5f,
	roundcorners_across_materials: false
);

export material Aluminum_Anodized_Electric_Blue_Scratched(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Electric Blue Scratched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Electric_Blue_Scratched.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "shiny", "scratched", "worn", "old", "imperfections", "blue", "electric", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.031896f, 0.250158f, 0.644480f),
	anodization_roughness:         .49f,
	scratches:                     1.00f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.66f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.27f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.5f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Electric_Blue_Dirty(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Electric Blue Dirty"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Electric_Blue_Dirty.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "dirty", "dirt", "worn", "imperfections", "blue", "electric", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.031896f, 0.250158f, 0.644480f),
	anodization_roughness:         .79f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       1.0f,
	wear:                          0.0f,
	abrasion:                      0.99f,
	balance:                       0.62f,
	dirt_weight:                   0.28f,
	enable_anodization_bump:       true,
	factor:                        0.27f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.5f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Royal_Blue(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Royal Blue"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Royal_Blue.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "blue", "royal", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.031896f, 0.046665f, 0.644480f),
	anodization_roughness:         0.57f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Sky_Blue(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Sky Blue"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Sky_Blue.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "blue", "sky", "light", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.171441f, 0.376262f, 0.520996f),
	anodization_roughness:         0.7f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Purple(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Purple"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Purple.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "purple", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.194618f, 0.046665f, 0.630757f),
	anodization_roughness:         0.7f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Pink(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Pink"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Pink.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "pink", "saturated", "warm"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.539479f, 0.057805f, 0.381326f),
	anodization_roughness:         0.7f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Red(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Red"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Red.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "red", "saturated", "warm"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.564712f, 0.029557f, 0.031896f),
	anodization_roughness:         0.7f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Orange(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Orange"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Orange.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "orange", "saturated", "warm"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.58f, 0.251f, 0.021f),
	anodization_roughness:         0.77f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Gold(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Gold"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Gold.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "gold", "yellow", "saturated", "warm"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.479320f, 0.296138f, 0.040915f),
	anodization_roughness:         0.77f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Yellow(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Yellow"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Yellow.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "yellow", "saturated", "warm"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.584078f, 0.508881f, 0.021219f),
	anodization_roughness:         0.77f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Grass_Green(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Grass Green"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Grass_Green.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "green", "grass", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.039546f, 0.381326f, 0.039546f),
	anodization_roughness:         0.77f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Lime_Green(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Lime Green"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Lime_Green.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "green", "grass", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.201556f, 0.539479f, 0.036889f),
	anodization_roughness:         0.8f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Turquoise(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Turquoise"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Turquoise.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "turquoise", "green", "saturated", "cool"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.048172f, 0.439657f, 0.246201f),
	anodization_roughness:         0.7f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Silver(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Silver"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Silver.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "silver", "neutral"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.502886f, 0.502886f, 0.502886f),
	anodization_roughness:         0.8f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Rose(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Rose"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Rose.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "rose", "warm", "pastel", "light"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.693872f, 0.445201f, 0.467784f),
	anodization_roughness:         0.77f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Lavender(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Lavender"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Lavender.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "lavender", "purple", "cool", "pastel", "light"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.428690f, 0.371238f, 0.708376f),
	anodization_roughness:         0.79f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);


export material Aluminum_Anodized_Light_Gold(*)
[[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Aluminum Anodized - Light Gold"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Rüdiger Raab"),
	::anno::contributor("Maik Rohland"),
	::anno::thumbnail("./.thumbs/Aluminum_Anodized.Aluminum_Anodized_Light_Gold.png"),
	::anno::key_words(string[]("aec", "metal", "aluminum", "anodized", "coated", "treated", "modern", "automotive",  "design", "reflective", "new", "matte", "gold", "warm", "pastel", "light"))
]]
 = Aluminum_Anodized(
	infinite_tiling:               false,
	enable_coating:                false,
	color_1:                       color(0.693872f, 0.527115f, 0.283149f),
	anodization_roughness:         0.8f,
	scratches:                     0.0f,
	scratches_bump_strength:       0.35f,
	smudges:                       0.0f,
	wear:                          0.0f,
	abrasion:                      0.0f,
	balance:                       0.62f,
	dirt_weight:                   0.0f,
	enable_anodization_bump:       true,
	factor:                        0.75f,
	anodization_bump_size:         0.24f,
	texture_translate:             float2(0.0f),
	texture_rotate:                0.0f,
	texture_scale:                 float2(1.0f),
	uv_space_index:                0,
	roundcorners_enable:           false,
	roundcorners_radius_mm:        0.75f,
	roundcorners_across_materials: false
);