/******************************************************************************
 *	 Copyright 2024 NVIDIA Corporation. All rights reserved.	 *
 ******************************************************************************

Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL,
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/


mdl 1.6;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::blend_colors;
import ::nvidia::core_definitions::dimension;


const string COPYRIGHT =
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n"
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n"
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

const string DESCRIPTION = "A synthetic leather material.";
const string DESCRIPTION_PUNCHED = "A synthetic leather material with punched holes. Available punch shapes are circles, lines, rectangles and squares.";

annotation preview_scale( float f);

// returns the min-max coordinates of a 2x2 atlas tile
float4 tile_select_2x2(uniform int select = 0)
{
	switch(select)
	{
		case 2: return float4(0.0f, 0.5f, 0.0f, 0.5f);
		case 3: return float4(0.5f, 1.0f, 0.0f, 0.5f);
		case 0: return float4(0.0f, 0.5f, 0.5f, 1.0f);
		case 1: return float4(0.5f, 1.0f, 0.5f, 1.0f);
		
		default: return float4(0.0f, 0.5f, 0.0f, 0.5f);
	}
}


export struct vm_coordinates
[[
	::anno::hidden()
]]
{
	float2 uv;
	float rotation;
	int uv_space_index;
	float4 carry;
};

enum vm_mono_select 
[[
	anno::description("Modes for the creation of a gray-scale value from a color."),
	anno::hidden()
]]
{
	mono_r = 0,
	mono_g = 1,
	mono_b = 2,
	mono_a = 3,
	mono_average = 4
};

vm_coordinates vm_coord
(
	float2 translation	= float2(0.0f, 0.0) [[
		::anno::display_name("Translation"),
		::anno::description("Translates the coordinates.")
	]],
	float rotation 		= 0.0f [[
		::anno::display_name("Rotation"),
		::anno::description("Rotates the coordinates in degrees.")
	]],
	float2 scaling		= float2(1.0f, 1.0f) [[
		::anno::display_name("Scaling"),
		::anno::description("Scales the coordinates.")
	]],	
	uniform int uv_space = 0 [[
		::anno::display_name("UV Space"),
		::anno::description("Chose the UV space.")
	]]
)
[[
		::anno::display_name("vm Transform"),
		::anno::description("Generates coordinates to be used in vm_lookup functions.")
]]
{
	vm_coordinates uv;
	::base::texture_coordinate_info info = ::base::coordinate_source( ::base::texture_coordinate_uvw, uv_space);
	uv.rotation = (rotation * 3.1415926535897932384626433832f) / 180.f;
	uv.uv = float2(info.position.x, info.position.y);
	float sine   = ::math::sin(uv.rotation);
	float cosine = ::math::cos(uv.rotation);
	float2x2 rot = float2x2(cosine, -sine, sine, cosine);
	uv.uv = rot * uv.uv;
	uv.uv /= scaling;
	uv.uv += translation;
	return uv;
}


vm_coordinates vm_coord_hex(	
				vm_coordinates uv, 
				float scale = 1.0f,
				float rotation = 45.0f
				
				//,float2 rot_center=float2(0.5f)
)
{
	vm_coordinates uv_return;
	float2 uv_ = float2(uv.uv.x, uv.uv.y);
	float rot_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	
	float sine   = ::math::sin(rot_rad);
	float cosine = ::math::cos(rot_rad);
	float2x2 rot = float2x2(cosine, -sine, sine, cosine);
	
	// same as from function get_hex above
	float2 s = float2(1.0f,  1.7320508f);
	float2 n = uv_ - float2(0.5f, 1.0f);
	float4 c = ::math::floor(float4(uv_.x, uv_.y, n.x, n.y)/float4(s.x, s.y, s.x, s.y)) + 0.5f;
	float2 h_1 = uv_ -  float2(c.x, c.y) * s;
	float2 h_2 = uv_ -  (float2(c.z, c.w) + float2(0.5f)) * s;
	float4 uv_id = ::math::dot(h_1, h_1) < ::math::dot(h_2, h_2) ? float4(h_1.x, h_1.y, c.x, c.y) : float4(h_2.x, h_2.y, c.z, c.w);
	
	float2 id_xy = float2(uv_id.x, uv_id.y);
	
	//uv_return.uv = float2(id_xy.x*scale+.5f, id_xy.y*scale+.5f);
	uv_return.uv = rot*float2(id_xy.x*scale, id_xy.y*scale);
	uv_return.uv += float2(0.5f);
	
	
	// unless we introduce random cell rotations where we need to compensate for this in the rotation 
	// we can just plain copy the rotation value
	uv_return.rotation = uv.rotation + rot_rad;
	return uv_return;
}

// Offsets a set of uv coordinates in either row (u) or column (v) direction
vm_coordinates vm_coord_rowcol_offset(
	vm_coordinates uv,
	float offset,
	bool horizontal_offset = true
)
{
	int index = horizontal_offset ? 0 : 1;
	uv.uv[index] += ::math::floor(uv.uv[index ^ 1]) * offset;
	return uv;
}

vm_coordinates vm_coord_grid(
				vm_coordinates uv,
				float scale = 1.0f,
				float rotation = 45.0f
)
{
	float rot_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	float sine   = ::math::sin(rot_rad);
	float cosine = ::math::cos(rot_rad);
	float2x2 rot = float2x2(cosine, -sine, sine, cosine);
	
	float2x2 scal = float2x2(scale, 0., 0., scale);
	uv.uv = ::math::frac(uv.uv);
	uv.uv -= 0.5f;
	uv.uv = rot*(scal * uv.uv);
	uv.uv = uv.uv + 0.5f;
	uv.rotation += rot_rad;
	return uv;
}

::base::texture_return vm_tex_lookup(
	uniform texture_2d tex,
	vm_coordinates uv = vm_coord(),
	uniform vm_mono_select mono_source = mono_a,
	float4 scale = float4(1.0f),
	
	uniform ::tex::wrap_mode wrap_u = ::tex::wrap_repeat,
	uniform ::tex::wrap_mode wrap_v = ::tex::wrap_repeat,
	uniform float2 crop_u = float2(0.0, 1.0),
	uniform float2 crop_v = float2(0.0, 1.0)
)
{
	float mono;
	float4 lookup = ::tex::lookup_float4(tex, uv.uv, wrap_u, wrap_v, crop_u, crop_v) * scale;
	switch( mono_source ) {
		case mono_r: mono = lookup.x;
			break;
		case mono_g: mono = lookup.y;
			break;
		case mono_b: mono = lookup.z;
			break;
		case mono_a: mono = lookup.w;
			break;
		case mono_average: mono = ::math::average(float3(lookup.x, lookup.y, lookup.z));
			break;
	}
	return ::base::texture_return(color(lookup.x, lookup.y, lookup.z), mono);
}

//  	*** SET CUTOUT ENUM NAMES ***
export enum cutout_pattern
[[
	::anno::description("Cutout Pattern"),
	::anno::hidden()
]]
{
	pattern_circle = 0
		[[ ::anno::display_name("Circle")]],
	pattern_hexagon = 1
		[[ ::anno::display_name("Square")]],
	pattern_line = 2
		[[ ::anno::display_name("Line") ]],
		
	pattern_square = 3
		[[ ::anno::display_name("Rectangle")]]	
};


float remap(float input, float low, float high)
{
	//return low + input * (high - low);
	return ::math::lerp(low, high, input);
}

int lowbias32(int x)
{
	x ^= x >>> 16;
	x *= 0x7feb352d;
	x ^= x >>> 15;
	x *= 0x846ca68b;
	x ^= x >>> 16;
	return x;
}

float uint2float(int x)
{
	return float(x & 0x7FFFFFFF) + (x < 0 ? 2147483648.0 : 0.0);
}



float2 rnd22(int2 p) {
	float2 ret_val = float2(
		uint2float(lowbias32(p[0] + lowbias32(p[1]))) / 4294967296.f,
		uint2float(lowbias32(p[0] + 32000 + lowbias32(p[1]))) / 4294967296.f
	);
	return ret_val;
}

float2x2 invert_2x2(float2x2 M)
{
	float det = M[0][0]*M[1][1] - M[0][1]*M[1][0];
	//https://www.chilimath.com/lessons/advanced-algebra/inverse-of-a-2x2-matrix/
	return (1.0 / det) * float2x2(M[1][1], -M[0][1], -M[1][0], M[0][0]);
}

float3 srgb2rgb(float3 val) 
{
	return ::math::pow(::math::max(val, float3(0.0f)), 2.2);
}

float3 rgb2srgb(float3 val) [[ anno::unused() ]] {
	return ::math::pow( ::math::max(val, float3(0.f)), float3(1./2.2) );
}


float3 nonrepeat_lookup(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 1.0,
	float3 average_color = float3(0.5),
	float patch_size = 8.0
)
{
	
	float2 uv_in = float2(uvw.position[0], uvw.position[1]) * texture_scale;
	float Z =  patch_size;	 // patch scale inside example texture
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * uv_in; //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V)); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;
	
	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
		O = (W[0] = F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I))) - m)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0,1)))) - m)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1,0)))) - m);
	else
		O = (W[0] =	  -F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1))))   - m)
		  + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1, 0)))) - m)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0, 1)))) - m);
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0, 1.0);
	
	return float3(O);
}

float histogram_range(float input, float range = 1.0f, float position = 0.5f)
{	
	float low = ::math::clamp(1.0 - ::math::min(((1.0 - position) + range * 0.5), (1.0 - position) * 2), 0.0, 1.0);
	float high = ::math::clamp(math::min((position + range * 0.5 ), position * 2.0), 0.0, 1.0);
	return ::math::lerp(low, high, input);
}

float remap_xy_to_0_1(float input, float x, float y)
{
	return (input - x)/(y - x);
}

float histogram_scan_big(float input, float width, float position)
{
	return ::math::clamp(
				remap_xy_to_0_1(input,
					::math::lerp(-width, 1.0, position),
					::math::lerp(0.0, 1.0 + width, position)),
				0.0,
				1.0);
}

float3 endless_normal(
	uniform texture_2d texture = texture_2d(),
	float factor = 1.0,
	bool flip_tangent_u = false,
	bool flip_tangent_v = false,
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 10.0,
	float3 average_color = float3(0.5, 0.5, 1.0),
	float patch_size = 8.0
	//bool srgb2rgb = false,
	//bool rgb2srgb = false
)
{
	float3 transformed_tangent_u = flip_tangent_u ? uvw.tangent_u : - uvw.tangent_u;
	float3 transformed_tangent_v = flip_tangent_v ? uvw.tangent_v : - uvw.tangent_v;

	// normalized Lookup
	float3 tangent_space_normal =
		 (nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		) - 0.5) * (2.0 * factor);
			 
	 return ::math::normalize(transformed_tangent_u * tangent_space_normal.x +
		  transformed_tangent_v * tangent_space_normal.y +
		  state::normal()*1.0); 
}

::base::texture_coordinate_info transform_coordinate_2(
	float4x4 transform										 
		[[ anno::description("A transformation to be applied to the source coordinates. rotation_translation_scale() is a suggested means to compute the transformation matrix") ]],
	::base::texture_coordinate_info coordinate = ::base::texture_coordinate_info()
		[[ anno::description("Coordinate, typically sourced from coordinate_source or coordinate_projection") ]]
) [[ 
	::anno::description("Transform a texture coordinate by a matrix.") ,
	::anno::noinline()
  ]]
{
	// Version 2
	float4 r_position = transform * float4(coordinate.position.x,coordinate.position.y,coordinate.position.z,1);
	//Try aproximating it for the case that the rotation is only aroud z and assuming the texture layout is nice and z is ~constant.
	//just pretend there is no other rotation happening
	//get rid of scaling and translation. Then extract fields where sin and cos would be in a simple 2d transform around z.
	float4 u = transform[0];
	float3 ru = ::math::normalize(float3(u.x,u.y,u.z));
	float cos =  ru.x; 
	float sin =  -ru.y;
	
	
	return ::base::texture_coordinate_info(
		float3(r_position.x,r_position.y,r_position.z),
		math::normalize(cos * coordinate.tangent_u - sin * coordinate.tangent_v),
		math::normalize(cos * coordinate.tangent_v + sin * coordinate.tangent_u));
}

::base::texture_coordinate_info vmat_transform(
								float2 translation = float2(0.0, 0.0),
								float rotation	 = 0.0,				// rotation in degrees
								float2 scaling	 = float2(1.0, 1.0),
								uniform ::base::texture_coordinate_system system = ::base::texture_coordinate_uvw,
								uniform int uv_space	   = 0
)
{
	float rotation_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	float4x4 scale =
	float4x4(1.0 /scaling.x, 0.			 ,  0. ,	 0.,
			 0.			, 1.0 /scaling.y ,  0. ,	 0.,
			 0.			, 0.			 ,  1.0,	 0.,
			 translation.x , translation.y  ,  0.0,	 1.);

	float s = ::math::sin(rotation_rad);
	float c = ::math::cos(rotation_rad);
	float4x4 rotate =
	float4x4(  c  ,  -s   , 0.0 , 0.0,
			   s  ,   c   , 0.0 , 0.0,
			   0.0,   0.0 , 1.0 , 0.0,
			   0. ,   0.0 , 0.0 , 1.);
	
	return transform_coordinate_2(scale*rotate, ::base::coordinate_source(system, uv_space));
}


color endless_texture(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 10.0,
	float3 average_color = float3(0.5, 0.5, .5),
	float patch_size = 8.0,
	bool gamma_correct_lookup = true
)
{
	return gamma_correct_lookup ? color(srgb2rgb(
			nonrepeat_lookup (
				texture: texture,
				uvw: uvw,
				texture_scale: texture_scale,
				average_color: average_color,
				patch_size: patch_size
			))
		) : color(nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		));
}
export material ABS_Hard_Leather(
	uniform bool infinite_tiling = false [[
		::anno::description("Enables infinite tiling feature which removes repeating texture patterns. Note that depending on the material this feature changes the appearance of the material slightly."),
		::anno::display_name("Infinite Tiling"),
		::anno::in_group("Appearance"),
		::anno::ui_order(0)
	]],
	color leather_color = color(0.02f) [[
		::anno::description("Choose the color of the leather."),
		::anno::display_name("Leather Color"),
		::anno::in_group("Appearance"),
		::anno::ui_order(1)
	]],
	float brightness_ao_cavity = 0.2f [[
		::anno::description("Adjusts the lightness of the cavity."),
		::anno::display_name("Cavity Brightness"),
		::anno::in_group("Appearance"),
		::anno::soft_range(0.f, 1.f),
		::anno::hard_range(0.f, 1.f),
		::anno::ui_order(2)
	]],
	float roughness = .6f [[
		::anno::description("Higher roughness values lead to bigger highlights and blurrier reflections."),
		::anno::display_name("Roughness"),
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f),
		::anno::ui_order(3)
	]],
	float reflectivity = 1.f [[
		::anno::description("Amount of variation applied to the roughness, higher numbers lead to non uniform reflections of the material."),
		::anno::display_name("Roughness Variation"),
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f),
		::anno::ui_order(4)
	]],
	uniform float bump_strength = 0.5f [[
		::anno::description("Specifies the strength of the bump."),
		::anno::display_name("Bump Strength"),
		::anno::in_group("Appearance"),
		::anno::soft_range(0.f, 1.f),
		::anno::hard_range(0.f, 2.f),
		::anno::ui_order(5)
	]],
	float2 texture_translate = float2(0.f) [[
		::anno::description("Controls the position of the texture."),
		::anno::display_name("Texture Translate"),
		::anno::in_group("Transform"),
		::anno::ui_order(6)
	]],
	float texture_rotate = 0.f [[
		::anno::description("Rotates angle of the texture in degrees."),
		::anno::display_name("Texture Rotate"),
		::anno::in_group("Transform"),
		::anno::soft_range(0.f, 360.f),
		::anno::ui_order(7)
	]],
	float2 texture_scale = float2(1.f) [[
		::anno::description("Larger numbers increase the size."),
		::anno::display_name("Texture Scale"),
		::anno::in_group("Transform"),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
		::preview_scale(3.0f),
		::anno::ui_order(8)
	]],
	uniform int uv_space_index = 0 [[
		::anno::description("Uses selected UV space for material."),
		::anno::display_name("UV Space Index"),
		::anno::in_group("Transform"),
		::anno::ui_order(9)
	]],
	uniform bool enable_round_corners = false [[
		::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
		::anno::display_name("Enable Round Corners"),
		::anno::in_group("Round Corners"),
		::anno::ui_order(10)
	]],
	uniform float radius = 1.5f [[
		::anno::description("Radius of the rounded corners in millimeters."),
		::anno::display_name("Round Corner Radius"),
		::anno::in_group("Round Corners"),
		::anno::ui_order(11)
	]],
	uniform bool across_materials = false [[
		::anno::description("Applies the round corner effect across different materials when enabled."),
		::anno::display_name("Across Materials"),
		::anno::in_group("Round Corners"),
		::anno::ui_order(12)
	]])
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Black"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "design", "ABS", "artifical", "soft", "leather", "car", "dashboard", "cloth", "furniture", "black", "dark", "neutral")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
 = 
	let {
		bool tmp0 = false;
		
		texture_2d rough_height_ao_tex = texture_2d("./textures/abs_hard_leather_multi_R_rough_G_height_B_ao.jpg", ::tex::gamma_linear);
		texture_2d norm_tex = texture_2d("./textures/abs_hard_leather_norm.jpg", ::tex::gamma_linear);
		
		material_surface tmp1(df::custom_curve_layer(0.0399999991f, 1.f, 5.f, math::pow(histogram_scan_big(float3(infinite_tiling ? endless_texture(rough_height_ao_tex, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), 13.f, float3(0.792156994f, 0.545098007f, 0.800000012f), 13.f, false) : base::file_texture(rough_height_ao_tex, color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), tex::wrap_repeat, tex::wrap_repeat, false, 0.f, int2(0), tex::wrap_repeat, 30.f).tint)[1], 0.389999986f, math::lerp(0.f, 0.560000002f, math::pow(reflectivity, 0.349999994f))), 1.49000001f), df::microfacet_ggx_smith_bsdf(histogram_range(float3(infinite_tiling ? endless_texture(rough_height_ao_tex, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), 13.f, float3(0.792156994f, 0.545098007f, 0.800000012f), 13.f, false) : base::file_texture(rough_height_ao_tex, color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), tex::wrap_repeat, tex::wrap_repeat, false, 0.f, int2(0), tex::wrap_repeat, 30.f).tint)[0], 0.300000012f, math::lerp(0.300000012f, 0.859999955f, roughness)) * histogram_range(float3(infinite_tiling ? endless_texture(rough_height_ao_tex, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), 13.f, float3(0.792156994f, 0.545098007f, 0.800000012f), 13.f, false) : base::file_texture(rough_height_ao_tex, color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), tex::wrap_repeat, tex::wrap_repeat, false, 0.f, int2(0), tex::wrap_repeat, 30.f).tint)[0], 0.300000012f, math::lerp(0.300000012f, 0.859999955f, roughness)), histogram_range(float3(infinite_tiling ? endless_texture(rough_height_ao_tex, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), 13.f, float3(0.792156994f, 0.545098007f, 0.800000012f), 13.f, false) : base::file_texture(rough_height_ao_tex, color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), tex::wrap_repeat, tex::wrap_repeat, false, 0.f, int2(0), tex::wrap_repeat, 30.f).tint)[0], 0.300000012f, math::lerp(0.300000012f, 0.859999955f, roughness)) * histogram_range(float3(infinite_tiling ? endless_texture(rough_height_ao_tex, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), 13.f, float3(0.792156994f, 0.545098007f, 0.800000012f), 13.f, false) : base::file_texture(rough_height_ao_tex, color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), tex::wrap_repeat, tex::wrap_repeat, false, 0.f, int2(0), tex::wrap_repeat, 30.f).tint)[0], 0.300000012f, math::lerp(0.300000012f, 0.859999955f, roughness)), color(1.f, 1.f, 1.f), nvidia::core_definitions::blend_colors(leather_color, color(histogram_range(0.100000001f, 0.289999992f, float3(infinite_tiling ? endless_texture(rough_height_ao_tex, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), 13.f, float3(0.792156994f, 0.545098007f, 0.800000012f), 13.f, false) : base::file_texture(rough_height_ao_tex, color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), tex::wrap_repeat, tex::wrap_repeat, false, 0.f, int2(0), tex::wrap_repeat, 30.f).tint)[2])), base::color_layer_multiply, math::lerp(0.930000007f, 0.149999991f, remap(brightness_ao_cavity, 0.f, 20.f)), true).tint, state::texture_tangent_u(0), df::scatter_reflect), df::weighted_layer(1.f, df::diffuse_reflection_bsdf(nvidia::core_definitions::blend_colors(leather_color, color(histogram_range(0.100000001f, 0.289999992f, float3(infinite_tiling ? endless_texture(rough_height_ao_tex, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), 13.f, float3(0.792156994f, 0.545098007f, 0.800000012f), 13.f, false) : base::file_texture(rough_height_ao_tex, color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), tex::wrap_repeat, tex::wrap_repeat, false, 0.f, int2(0), tex::wrap_repeat, 30.f).tint)[2])), base::color_layer_multiply, math::lerp(0.930000007f, 0.149999991f, remap(brightness_ao_cavity, 0.f, 20.f)), true).tint, 0.f), bsdf(), infinite_tiling ? endless_normal(norm_tex, math::lerp(0.f, 2.f, bump_strength), false, false, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), 13.f, float3(0.505882025f, 0.494118005f, 0.92156899f), 13.f) : base::tangent_space_normal_texture(norm_tex, math::lerp(0.f, 2.f, bump_strength), false, false, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), tex::wrap_repeat, tex::wrap_repeat, false, 1.f, 0.f, 0.f, int2(0), tex::wrap_repeat, 30.f)), infinite_tiling ? endless_normal(norm_tex, math::lerp(0.f, 2.f, bump_strength), false, false, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), 13.f, float3(0.505882025f, 0.494118005f, 0.92156899f), 13.f) : base::tangent_space_normal_texture(norm_tex, math::lerp(0.f, 2.f, bump_strength), false, false, vmat_transform(texture_translate, texture_rotate, texture_scale * 0.5f, base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), tex::wrap_repeat, tex::wrap_repeat, false, 1.f, 0.f, 0.f, int2(0), tex::wrap_repeat, 30.f)), material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
		material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
		color tmp3 = color(1.f, 1.f, 1.f);
		material_geometry tmp5(float3(0.f), 1.f, enable_round_corners ? state::rounded_corner_normal(radius, across_materials, 1.f) : state::normal());
		
	} in
		material(
			thin_walled: tmp0,
			surface: tmp1,
			backface: tmp2,
			ior: tmp3,
			geometry: tmp5);

export material ABS_Hard_Leather_Brown(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Brown"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "brown", "warm")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Brown.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.0718f, 0.0316f, 0.001f),
	brightness_ao_cavity: .3f,
	roughness: .5f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
);  


export material ABS_Hard_Leather_Grey(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Grey"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "grey", "neutral")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Grey.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.06f),
	brightness_ao_cavity: .2f,
	roughness: .2f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Peach(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Peach"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "warm", "peach", "orange")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Peach.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.274677f, 0.078187f, 0.004777f),
	brightness_ao_cavity: .2f,
	roughness: .2f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Vintage_Rose(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Rose Vintage"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "vintage", "hard", "leather", "car", "dashboard", "cloth", "furniture", "warm", "rose")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Vintage_Rose.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.135633f, 0.059511f, 0.059511f),
	brightness_ao_cavity: .2f,
	roughness: .25f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 


export material ABS_Hard_Leather_Moss(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Moss"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "green", "moss")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Moss.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.0546f, 0.0582f, 0.00775f),
	brightness_ao_cavity: .2f,
	roughness: .4f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Sky(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Sky"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "blue", "sky", "baby")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Sky.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.042311f, 0.116971f, 0.187821f),
	brightness_ao_cavity: .2f,
	roughness: .2f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Pop_Turquoise(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Pop Turquoise"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "pop", "turquoise", "blue")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Pop_Turquoise.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.0399f, 0.448f, 0.364f),
	brightness_ao_cavity: .1f,
	roughness: .0f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Pop_Pink(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Pop Pink"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "pop", "pink")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Pop_Pink.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.567f, 0.0494f, 0.216f),
	brightness_ao_cavity: .1f,
	roughness: .0f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Pop_Lime(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Pop Lime"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "pop", "lime", "green")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Pop_Lime.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.254152f, 0.533276f, 0.042311f),
	brightness_ao_cavity: .1f,
	roughness: .0f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Deep_Ocean(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Deep Ocean"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "deep", "ocean", "dark")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Deep_Ocean.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.0097f, 0.0316f, 0.128f),
	brightness_ao_cavity: .1f,
	roughness: .3f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Deep_Green(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Deep Green"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "deep", "green", "dark")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Deep_Green.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.0179f, 0.0738f, 0.0478f),
	brightness_ao_cavity: .1f,
	roughness: .2f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Deep_Violet(*)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("ABS Hard Leather - Deep Violet"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "deep", "violet", "dark")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Deep_Violet.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather
(
	infinite_tiling: false,
	leather_color: color(0.043f, 0.00902f, 0.142f),
	brightness_ao_cavity: .1f,
	roughness: .5f,
	reflectivity: .3f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 




// ----------------- Punched Leather -----------------
export material ABS_Hard_Leather_Punched(

// Leather parameters
	uniform bool infinite_tiling = false [[
		::anno::description("Enables infinite tiling feature which removes repeating texture patterns. Note that depending on the material this feature changes the appearance of the material slightly."),
		::anno::display_name("Infinite Tiling"),
		::anno::in_group("Appearance"),
		::anno::ui_order(0)
	]],
	color leather_color = color(0.012983f, 0.012983f, 0.012983f) [[
		::anno::description("Choose the color of the leather."),
		::anno::display_name("Leather Color"),
		::anno::in_group("Appearance"),
		::anno::ui_order(1)
	]],
	float roughness = .6f [[
		::anno::description("Higher roughness values lead to bigger highlights and blurrier reflections."),
		::anno::display_name("Roughness"),
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f),
		::anno::ui_order(3)
	]],
	float reflectivity = 1.f [[
		::anno::description("Amount of variation applied to the roughness, higher numbers lead to non uniform reflections of the material."),
		::anno::display_name("Roughness Variation"),
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f),
		::anno::ui_order(4)
	]],
	uniform float bump_strength = 0.5f [[
		::anno::description("Specifies the strength of the bump."),
		::anno::display_name("Bump Strength"),
		::anno::in_group("Appearance"),
		::anno::soft_range(0.f, 1.f),
		::anno::hard_range(0.f, 2.f),
		::anno::ui_order(5)
	]],
	float2 texture_translate = float2(0.f) [[
		::anno::description("Controls the position of the texture."),
		::anno::display_name("Texture Translate"),
		::anno::in_group("Transform"),
		::anno::ui_order(6)
	]],
	float texture_rotate = 0.f [[
		::anno::description("Rotates angle of the texture in degrees."),
		::anno::display_name("Texture Rotate"),
		::anno::in_group("Transform"),
		::anno::soft_range(0.f, 360.f),
		::anno::ui_order(7)
	]],
	float2 texture_scale = float2(1.f) [[
		::anno::description("Larger numbers increase the size."),
		::anno::display_name("Texture Scale"),
		::anno::in_group("Transform"),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
		::preview_scale(3.5f),
		::anno::ui_order(8)
	]],
	uniform int uv_space_index = 0 [[
		::anno::description("Uses selected UV space for material."),
		::anno::display_name("UV Space Index"),
		::anno::in_group("Transform"),
		::anno::ui_order(9)
	]],
// Punching parameters
	uniform cutout_pattern shape_select = pattern_circle //select atlas tile here
	[[
		::anno::description("Select a cutout shape."),
		::anno::display_name("Cutout Shape"),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(10)
	]],
	float punching_grid_size = 1.0f
	[[
		::anno::description("Scales the size of the punching grid."),
		::anno::display_name("Punching Grid Size"),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(11)
	]],
	float cutout_rotation = 45.0f
	[[
		::anno::description("Rotates the cutout shape."),
		::anno::display_name("Cutout Rotation"),
		::anno::hard_range(0.f, 360.0f),
		::anno::soft_range(0.f, 360.0f),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(12)
	]],
	float cutout_size = .4f
	[[
		::anno::description("Scales the size of the cutout pattern independently from the base material."),
		::anno::display_name("Cutout Size"),
		::anno::hard_range(0.f, 1.2f),
		::anno::soft_range(0.f, 1.0f),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(12)
	]],
	float cutout_roundness = .5f
	[[
		::anno::description("At low values it makes the cutouts sharper. Higher values give the shapes a more rounded look."),
		::anno::display_name("Cutout Roundness"),
		::anno::hard_range(0.f, 1.f),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(13)
	]],
	float cutout_bump_strength = 1.0f
	[[
		::anno::description("Sets the strength of the bevelled normal around the cutout."),
		::anno::display_name("Cutout Bevel Strength"),
		::anno::soft_range(0.0f, 1.0f),
		::anno::hard_range(0.0f, 2.0f),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(15)
	]],
// Grid Layout parameters
	bool hexagonal_grid = true
	[[
		::anno::description("When enabled, the punching will occur on a hexagonal grid, otherwise a square grid."),
		::anno::display_name("Enable Hexagonal Grid"),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(16)
	]],
	float square_grid_offset = 0.0f
	[[
		::anno::description("Offsets each row of the grid by a certain amount. Applies only when hexagonal grid is disabled."),
		::anno::display_name("Square Grid Offset"),
		::anno::in_group("Appearance", "Cutout"),
		::anno::enable_if("hexagonal_grid==false"),
		::anno::ui_order(17)
	]],
	uniform bool enable_round_corners = false [[
		::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
		::anno::display_name("Enable Round Corners"),
		::anno::in_group("Round Corners"),
		::anno::ui_order(18)
	]],
	uniform float radius = 1.5f [[
		::anno::description("Radius of the rounded corners in millimeters."),
		::anno::display_name("Round Corner Radius"),
		::anno::in_group("Round Corners"),
		::anno::enable_if("enable_round_corners==true"),
		::anno::ui_order(19)
	]],
	uniform bool across_materials = false [[
		::anno::description("Applies the round corner effect across different materials when enabled."),
		::anno::display_name("Across Materials"),
		::anno::in_group("Round Corners"),
		::anno::enable_if("enable_round_corners==true"),
		::anno::ui_order(20)
	]]
) 
[[
		::anno::description(DESCRIPTION_PUNCHED),
		::anno::display_name("ABS Hard Leather - Black Punched"),
		::anno::copyright_notice(COPYRIGHT),
		::anno::key_words(string[]("dielectric", "automotive", "design", "ABS", "artifical", "soft", "leather", "car", "dashboard", "cloth", "furniture", "black", "dark", "neutral")),
		::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Punched.png"),
		::anno::author("Nvidia vMaterials"),
		::anno::contributor("Maik Rohland"),
		::anno::contributor("Ruediger Raab")
]] = let
{
	float brightness_ao_cavity = 0.2f;
	bool horizontal_offset = true;
	float cutout_bevel_width = 0.7f;
	float cutout_bump_strength_2 = cutout_bump_strength * 5.0f;
	
	material base_mat = ABS_Hard_Leather(
		infinite_tiling:	  infinite_tiling,
		leather_color:		leather_color,
		brightness_ao_cavity: brightness_ao_cavity,
		roughness:			roughness,
		reflectivity:		 reflectivity,
		bump_strength:		bump_strength,
		texture_translate:	texture_translate,
		texture_rotate:	   texture_rotate,
		texture_scale:		texture_scale,
		uv_space_index:	   uv_space_index,
		enable_round_corners: enable_round_corners,
		radius:			   radius,
		across_materials:	 across_materials
	);
	
	// remap range of slider to avoid artifacts in the bevelling
	float2 punching_scale = texture_scale * 0.01f * float2(punching_grid_size);
	float cutout_roundness_ = cutout_roundness*0.6f+0.4f;
	float cutout_size_lin = (1.0f/cutout_size);
	texture_2d punching_cutout = texture_2d("./textures/leather_punch_atlas_01.png", ::tex::gamma_linear);

	vm_coordinates uv = vm_coord(
		translation:	texture_translate,
		rotation:		texture_rotate,
		scaling:		punching_scale,
		uv_space:		uv_space_index
	);

	vm_coordinates punching_uv = hexagonal_grid ? vm_coord_hex(
		uv:		uv,
		scale:	cutout_roundness_ * cutout_size_lin,
		rotation: cutout_rotation
	) : vm_coord_grid(
		uv:		vm_coord_rowcol_offset(
					uv: uv,
					offset: square_grid_offset,
					horizontal_offset: horizontal_offset
				),
		scale:	cutout_roundness_ * cutout_size_lin,
		rotation: cutout_rotation
	);
	// select the correct subtile from the atlas
	float4 crop = tile_select_2x2(shape_select);

	::base::texture_return lookup = vm_tex_lookup(
		tex:			punching_cutout,
		uv:				punching_uv,
		mono_source:	mono_a,
		scale:			float4(1.0f),
		crop_u:			float2(crop.x, crop.y),
		crop_v:			float2(crop.z, crop.w),
		wrap_u:			::tex::wrap_clamp,
		wrap_v:			::tex::wrap_clamp
	);

	float low = (1.0 - cutout_roundness_);
	float high = (cutout_size_lin * (cutout_bevel_width * 0.2f) *  cutout_roundness_) + (1.0 - cutout_roundness_);
	// remap x...y to (clamped) 0...1
	float x = ::math::clamp((lookup.mono - low)/(high - low), 0.0, 1.0);
	// spherical falloff
	float falloff=::math::sqrt(1.0-x*x);
	// masking falloff as the center of the cutout is flat
	float masked_falloff=falloff<=0.0?1.0:falloff;

	// where base material is still there, use the value of the base material
	float cutout= ::math::min(falloff<=0.0?0.0:1.0, base_mat.geometry.cutout_opacity);

	// bring in -.5 ... +.5 range and lerp between lookup and flat normal
	float3 remap_norm = 	::math::lerp(float3(lookup.tint), float3(0.5, 0.5, 1.0), masked_falloff) - float3(0.5);
	float3 t_norm = ::math::normalize(remap_norm * float3(cutout_bump_strength_2, cutout_bump_strength_2, 1.0));
	
	float3 rotfix_norm = float3(::math::cos(punching_uv.rotation) * t_norm.x - ::math::sin(punching_uv.rotation) * t_norm.y,
					::math::sin(punching_uv.rotation) * t_norm.x + ::math::cos(punching_uv.rotation) * t_norm.y,
					t_norm.z);
	
	float3 normal = ::state::texture_tangent_u(punching_uv.uv_space_index) * rotfix_norm.x + 
					::state::texture_tangent_v(punching_uv.uv_space_index) * rotfix_norm.y + 
					::state::normal() * rotfix_norm.z;

	float3 final_normal = ::base::blend_normals(
		base_normal:		normal,
		base_normal_weight:	1.0f,
		detail_normal:		base_mat.geometry.normal,
		detail_normal_weight: 1.0f
	);
	
} in material(
	surface: material_surface(
		scattering: base_mat.surface.scattering
	),
	volume: base_mat.volume,
	ior: base_mat.ior,
	thin_walled: true,
	geometry: material_geometry(
		displacement: base_mat.geometry.displacement,
		normal: final_normal,
		cutout_opacity: cutout
	)
);



export material ABS_Hard_Leather_Brown_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Brown Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "brown", "warm")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Brown_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]] = ABS_Hard_Leather_Punched(
	infinite_tiling: false,
	leather_color:			color(0.0718f, 0.0316f, 0.001f),
	roughness:				.5f,
	reflectivity:			.0f,
	bump_strength:			.5f,
	texture_translate:		float2(0.0f),
	texture_rotate:			0.0f,
	texture_scale:			float2(1.f),
	uv_space_index:			0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,
	
	enable_round_corners:	false,
	radius:					1.5f,
	across_materials:		false
);


export material ABS_Hard_Leather_Grey_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Grey Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "grey", "neutral")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Grey_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.06f),
	roughness: .2f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 


export material ABS_Hard_Leather_Peach_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Peach Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "warm", "peach", "orange")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Peach_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.274677f, 0.078187f, 0.004777f),
	roughness: .2f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Vintage_Rose_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Rose Vintage Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "vintage", "hard", "leather", "car", "dashboard", "cloth", "furniture", "warm", "rose")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Vintage_Rose_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.135633f, 0.059511f, 0.059511f),
	roughness: .25f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,	
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 


export material ABS_Hard_Leather_Moss_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Moss Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "green", "moss")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Moss_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.0546f, 0.0582f, 0.00775f),
	roughness: .4f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,	
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Sky_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Sky Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "blue", "sky", "baby")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Sky_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.042311f, 0.116971f, 0.187821f),
	roughness: .2f,
	reflectivity: .0f,
	bump_strength: .5f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Pop_Turquoise_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Pop Turquoise Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "pop", "turquoise", "blue")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Pop_Turquoise_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.0399f, 0.448f, 0.364f),
	roughness: .0f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Pop_Pink_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Pop Pink Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "pop", "pink")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Pop_Pink_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.567f, 0.0494f, 0.216f),
	roughness: .0f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Pop_Lime_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Pop Lime Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "pop", "lime", "green")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Pop_Lime_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.254152f, 0.533276f, 0.042311f),
	roughness: .0f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,	
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Deep_Ocean_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Deep Ocean Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "deep", "ocean", "dark")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Deep_Ocean_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.0097f, 0.0316f, 0.128f),
	roughness: .3f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Deep_Green_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Deep Green Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "deep", "green", "dark")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Deep_Green_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.0179f, 0.0738f, 0.0478f),
	roughness: .2f,
	reflectivity: 1.f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 

export material ABS_Hard_Leather_Deep_Violet_Punched(*)
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("ABS Hard Leather - Deep Violet Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("dielectric", "automotive", "punched", "ABS", "design", "artifical", "hard", "leather", "car", "dashboard", "cloth", "furniture", "cold", "deep", "violet", "dark")),
	::anno::thumbnail("./.thumbs/ABS_Hard_Leather.ABS_Hard_Leather_Deep_Violet_Punched.png"),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= ABS_Hard_Leather_Punched
(
	infinite_tiling: false,
	leather_color: color(0.043f, 0.00902f, 0.142f),
	roughness: .5f,
	reflectivity: .3f,
	bump_strength: .6f,
	texture_translate: float2(0.0f),
	texture_rotate: 0.0f,
	texture_scale: float2(1.f),
	uv_space_index: 0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	enable_round_corners: false,
	radius: 1.5f,
	across_materials: false
); 



