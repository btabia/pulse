/******************************************************************************
 *	 Copyright 2024 NVIDIA Corporation. All rights reserved.	 *
 ******************************************************************************

Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL,
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/

mdl 1.7;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::blend_colors;
import ::nvidia::core_definitions::dimension;

const string COPYRIGHT =
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n"
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n"
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

const string DESCRIPTION = "A semi aniline leather material";
const string DESCRIPTION_PUNCHED = "A semi aniline leather material with punched holes. Various shapes for the punching such as  circles, lines, rectangles and squares can be chosen.";

annotation preview_scale( float f);


//  	*** SET CUTOUT ENUM NAMES ***
export enum cutout_pattern
[[
	::anno::description("Cutout Pattern"),
	::anno::hidden()
]]
{
	pattern_circle = 0
		[[ ::anno::display_name("Circle")]],
	pattern_hexagon = 1
		[[ ::anno::display_name("Square")]],
	pattern_line = 2
		[[ ::anno::display_name("Line") ]],
		
	pattern_square = 3
		[[ ::anno::display_name("Rectangle")]]	
};

// returns the min-max coordinates of a 2x2 atlas tile
float4 tile_select_2x2(uniform int select = 0)
{
	switch(select)
	{
		case 2: return float4(0.0f, 0.5f, 0.0f, 0.5f);
		case 3: return float4(0.5f, 1.0f, 0.0f, 0.5f);
		case 0: return float4(0.0f, 0.5f, 0.5f, 1.0f);
		case 1: return float4(0.5f, 1.0f, 0.5f, 1.0f);
		
		default: return float4(0.0f, 0.5f, 0.0f, 0.5f);
	}
}


struct vm_col_norm{
	float3 value;
	float3 norm;
};

struct vm_coordinates{
	float2 uv;			// UV coordinates stored as a simple float2
	float rotation;		// The rotation is stored in radiands (not degress), to convert use ((rotation* 3.1415926535897932384626433832f) / 180.f)
	int uv_space_index;	// The UV space Index from which the UV data came from
	float4 carry;		// may carry additional data, such as random IDs
};

enum vm_mono_select 
[[
	::anno::description("Modes for the creation of a gray-scale value from a color."),
	::anno::hidden()
]]
{
	mono_r = 0,
	mono_g = 1,
	mono_b = 2,
	mono_a = 3,
	mono_average = 4
};

vm_coordinates vm_coord
(
	float2 translation	= float2(0.0f, 0.0) [[
		::anno::display_name("Translation"),
		::anno::description("Translates the coordinates.")
	]],
	float rotation 		= 0.0f [[
		::anno::display_name("Rotation"),
		::anno::description("Rotates the coordinates in degrees.")
	]],
	float2 scaling		= float2(1.0f, 1.0f) [[
		::anno::display_name("Scaling"),
		::anno::description("Scales the coordinates.")
	]],	
	uniform int uv_space = 0 [[
		::anno::display_name("UV Space"),
		::anno::description("Choose the UV space.")
	]]
)
[[
		::anno::display_name("vm Transform"),
		::anno::description("Generates coordinates to be used in vm_lookup functions.")
]]
{
	vm_coordinates uv;
	::base::texture_coordinate_info info = ::base::coordinate_source( ::base::texture_coordinate_uvw, uv_space);
	uv.rotation = (rotation * 3.1415926535897932384626433832f) / 180.f;
	uv.uv = float2(info.position.x, info.position.y);
	float sine   = ::math::sin(uv.rotation);
	float cosine = ::math::cos(uv.rotation);
	float2x2 rot = float2x2(cosine, -sine, sine, cosine);
	uv.uv = rot * uv.uv;
	uv.uv /= scaling;
	uv.uv += translation;
	// Translation before or after rotation?
	return uv;
}


vm_coordinates vm_coord_post_scale(
	vm_coordinates uv = vm_coord(),
	float2 scale = float2(1.0f)
)
{
	uv.uv /= scale;
	return uv;
}

vm_coordinates vm_coord_rowcol_offset(
	vm_coordinates uv,
	float offset,
	bool horizontal_offset = true
)
{
	int index = horizontal_offset ? 0 : 1;
	uv.uv[index] += ::math::floor(uv.uv[index ^ 1]) * offset;
	return uv;
}

vm_coordinates vm_coord_grid(
				vm_coordinates uv,
				float scale = 1.0f,
				float rotation = 45.0f
)
{
	float rot_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	float sine   = ::math::sin(rot_rad);
	float cosine = ::math::cos(rot_rad);
	float2x2 rot = float2x2(cosine, -sine, sine, cosine);
	
	float2x2 scal = float2x2(scale, 0., 0., scale);
	uv.uv = ::math::frac(uv.uv);
	uv.uv -= 0.5f;
	uv.uv = rot*(scal * uv.uv);
	uv.uv = uv.uv + 0.5f;
	uv.rotation += rot_rad;
	return uv;
}

// Performs a texture lookup and returns the result in a texture_return struct
// Mono mode may be chosen deliberately
::base::texture_return vm_tex_lookup(
	uniform texture_2d tex,
	vm_coordinates uv = vm_coord(),
	uniform vm_mono_select mono_source = mono_a,
	float4 scale = float4(1.0f),
	
	uniform ::tex::wrap_mode wrap_u = ::tex::wrap_repeat,
	uniform ::tex::wrap_mode wrap_v = ::tex::wrap_repeat,
	uniform float2 crop_u = float2(0.0, 1.0),
	uniform float2 crop_v = float2(0.0, 1.0)
)
{
	float mono;
	float4 lookup = ::tex::lookup_float4(tex, uv.uv, wrap_u, wrap_v, crop_u, crop_v) * scale;
	switch( mono_source ) {
		case mono_r: mono = lookup.x;
			break;
		case mono_g: mono = lookup.y;
			break;
		case mono_b: mono = lookup.z;
			break;
		case mono_a: mono = lookup.w;
			break;
		case mono_average: mono = ::math::average(float3(lookup.x, lookup.y, lookup.z));
			break;
	}
	return ::base::texture_return(color(lookup.x, lookup.y, lookup.z), mono);
}

float3 vm_tex_normal_lookup(
	uniform texture_2d tex,
	vm_coordinates uv = vm_coord(),
	float strength = 1.0f
)
{
	float rot = uv.rotation;
	// Lookup and convert normal texture to -1 ... 1 range
	float3 norm = (::tex::lookup_float3(tex, uv.uv, ::tex::wrap_repeat, ::tex::wrap_repeat) - float3(.5f)) * 2.0f;
	norm = ::math::normalize(norm * float3(strength, strength, 1.0));
	// if any rotation happened prior to the lookup, compensate for it
	norm = float3(::math::cos(rot) * norm.x - ::math::sin(rot) * norm.y,
					::math::sin(rot) * norm.x + ::math::cos(rot) * norm.y,
					norm.z);
	return norm.x * ::state::texture_tangent_u(uv.uv_space_index) +
			norm.y * ::state::texture_tangent_v(uv.uv_space_index) +
			norm.z * ::state::normal();
}


vm_coordinates vm_coord_hex(	
				vm_coordinates uv, 
				float scale = 1.0f,
				float rotation = 45.0f
				
				//,float2 rot_center=float2(0.5f)
)
{
	vm_coordinates uv_return;
	float2 uv_ = float2(uv.uv.x, uv.uv.y);
	float rot_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	
	float sine   = ::math::sin(rot_rad);
	float cosine = ::math::cos(rot_rad);
	float2x2 rot = float2x2(cosine, -sine, sine, cosine);
	
	// same as from function get_hex above
	float2 s = float2(1.0f,  1.7320508f);
	float2 n = uv_ - float2(0.5f, 1.0f);
	float4 c = ::math::floor(float4(uv_.x, uv_.y, n.x, n.y)/float4(s.x, s.y, s.x, s.y)) + 0.5f;
	float2 h_1 = uv_ -  float2(c.x, c.y) * s;
	float2 h_2 = uv_ -  (float2(c.z, c.w) + float2(0.5f)) * s;
	float4 uv_id = ::math::dot(h_1, h_1) < ::math::dot(h_2, h_2) ? float4(h_1.x, h_1.y, c.x, c.y) : float4(h_2.x, h_2.y, c.z, c.w);
	
	float2 id_xy = float2(uv_id.x, uv_id.y);
	
	//uv_return.uv = float2(id_xy.x*scale+.5f, id_xy.y*scale+.5f);
	uv_return.uv = rot*float2(id_xy.x*scale, id_xy.y*scale);
	uv_return.uv += float2(0.5f);
	
	
	// unless we introduce random cell rotations where we need to compensate for this in the rotation 
	// we can just plain copy the rotation value
	uv_return.rotation = uv.rotation + rot_rad;
	return uv_return;
}


// converts a HSL value back to a color
// The Hue is expected to lie in the range 
float f_n(float n, float a,  float h, float l) {
	float k = ::math::fmod(n + h * 12.f, 12.f);
	
	return l - a * ::math::max(-1.0f, ::math::min(::math::min(k-3.0f, 9.0f-k), 1.0f));
}

color hsl2rgb(float3 hsl)
[[
	::anno::description("Converts a HSL value back to a color. Note that the hue is expected to \n"
						"lie in the range from 0.0-1.0."),
	::anno::author("NVIDIA vMaterials")
]]
{
	float h = hsl.x, s = hsl.y, l = hsl.z;
	float a = s * ::math::min(l, 1.0f - l);
	return color(f_n(0.0, a, h, l),
				f_n(8.0, a, h, l),
				f_n(4.0, a, h, l));	
}

float3 rgb2hsl(float3 c)
[[
	::anno::description("Converts a color value to HSL. The function outputs the hue to \n"
						"lie in the range from 0.0-1.0."),
	::anno::author("NVIDIA vMaterials")
]]
{
	float3 hsl;
	float cMax = ::math::max(::math::max(c.x, c.y), c.z);
	float cMin = ::math::min(::math::min(c.x, c.y), c.z);
	float delta = cMax - cMin;
	
	hsl.z = (cMax + cMin) / 2.0;	
	hsl.x = ((cMax == cMin) ? 0 :
		(cMax == c.x) ? (c.y - c.z) / delta + ((c.z > c.y) ? 6.0f : 0.0f):
		(cMax == c.y) ? (c.z - c.x) / delta + 2.0 : (c.x - c.y) / delta + 4.0) / 6.0f;
	hsl.y = (hsl.z == 0.0 || hsl.z == 1.0) ? 0.0 : delta / (1.0 - ::math::abs(2.0 * hsl.z - 1.0));
	return hsl;
}

float histogram_range(float input, float range = 1.0f, float position = 0.5f)
{	
	float low = ::math::clamp(1.0 - ::math::min(((1.0 - position) + range * 0.5), (1.0 - position) * 2), 0.0, 1.0);
	float high = ::math::clamp(::math::min((position + range * 0.5 ), position * 2.0), 0.0, 1.0);
	return ::math::lerp(low, high, input);
}


float2x2 invert_2x2(float2x2 M)
{
	float det = M[0][0]*M[1][1] - M[0][1]*M[1][0];
	//https://www.chilimath.com/lessons/advanced-algebra/inverse-of-a-2x2-matrix/
	return (1.0 / det) * float2x2(M[1][1], -M[0][1], -M[1][0], M[0][0]);
}

float uint2float(int x)
{
	return float(x & 0x7FFFFFFF) + (x < 0 ? 2147483648.0 : 0.0);
}

int lowbias32(int x)
{
	x ^= x >>> 16;
	x *= 0x7feb352d;
	x ^= x >>> 15;
	x *= 0x846ca68b;
	x ^= x >>> 16;
	return x;
}

float2 rnd22(int2 p) {
	float2 ret_val = float2(
		uint2float(lowbias32(p[0] + lowbias32(p[1]))) / 4294967296.f,
		uint2float(lowbias32(p[0] + 32000 + lowbias32(p[1]))) / 4294967296.f
	);
	return ret_val;
}	


float3 vm_tex_infinite(
	uniform texture_2d tex = texture_2d(),
	vm_coordinates uv = vm_coord(),
	float3 average_color = float3(0.5f, 0.5f, 1.0f),
	float patch_size = 1.0,
	bool gamma_correct = true,
	float gamma = 2.2f
)
{
	float2 uv_in = uv.uv;
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * (uv.uv / patch_size); //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V))+int2(935); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;
	
	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
		O = (W[0] = F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I))) - m)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0,1)))) - m)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1,0)))) - m);
	else
		O = (W[0] =	  -F[2]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1))))   - m)
		  + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(1, 0)))) - m)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex, U-rnd22(I+int2(0, 1)))) - m);
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0f, 1.0f);
	
	return gamma_correct? ::math::pow(::math::max(O, float3(0.0f)), gamma) : float3(O);
}


// Returns an infinite lookup plus a normal map lookup
vm_col_norm vm_tex_infinite_color_normal(
	uniform texture_2d tex_col = texture_2d(),
	uniform texture_2d tex_norm = texture_2d(),
	vm_coordinates uv = vm_coord(),
	float3 average_color = float3(0.5),
	float3 average_norm = float3(0.5f, 0.5f, 1.0f),
	float patch_size = 1.0,
	// Color output settings
	bool color_out_gamma_correct = true,
	float color_out_gamma = 2.2f,
	// Normal output setting
	float normal_strength = 1.0
)
{
	vm_col_norm ret;
	float2 uv_in = uv.uv;
	
	float3 O_a = float3(0.f);
	float3 O_b = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * (uv.uv / patch_size); //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V))+int2(935); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m_a = average_color;
	float3 m_b = average_norm;

	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )
	{
		O_a = (W[0] = F[2]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I))) - m_a)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(0,1)))) - m_a)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1,0)))) - m_a);
		O_b = (W[0] = F[2]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I))) - m_b)
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(0,1)))) - m_b)
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1,0)))) - m_b);
	}
	else
	{
		O_a = (W[0] =	  -F[2]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1))))   - m_a)
		  + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(1, 0)))) - m_a)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex_col, U-rnd22(I+int2(0, 1)))) - m_a);
		O_b = (W[0] =	  -F[2]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1))))   - m_b)
		  + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(1, 0)))) - m_b)
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(tex_norm, U-rnd22(I+int2(0, 1)))) - m_b);
	}
	
	O_a = m_a + O_a/::math::length(W);
	O_a = ::math::clamp( (O_a), 0.0, 1.0);
	ret.value = color_out_gamma_correct? ::math::pow(::math::max(O_a, float3(0.0f)), color_out_gamma) : float3(O_a);
	
	O_b = m_b + O_b/::math::length(W);
	O_b = ::math::clamp( (O_b), 0.0, 1.0);
	
	float3 norm = (O_b - float3(.5f)) * 2.0f;
	norm = ::math::normalize(norm * float3(normal_strength, normal_strength, 1.0));
	// if any rotation happened prior to the lookup, compensate for it
	norm = float3(::math::cos(uv.rotation) * norm.x - ::math::sin(uv.rotation) * norm.y,
					::math::sin(uv.rotation) * norm.x + ::math::cos(uv.rotation) * norm.y,
					norm.z);
	ret.norm = norm.x * ::state::texture_tangent_u(uv.uv_space_index) +
			norm.y * ::state::texture_tangent_v(uv.uv_space_index) +
			norm.z * ::state::normal();	
			
	return ret;
}


float remap_xy_to_0_1(float input, float x, float y)
{
	return (input - x)/(y - x);
}

float histogram_scan_big(float input, float width, float position)
{
	return ::math::clamp(
				remap_xy_to_0_1(input,
					::math::lerp(-width, 1.0, position),
					::math::lerp(0.0, 1.0 + width, position)),
				0.0,
				1.0);
}

export material Semi_Aniline_Leather(
	uniform bool infinite_tiling = true [[
		::anno::description("Enables infinite tiling feature which removes repeating texture patterns. Note that depending on the material this feature changes the appearance of the material slightly."),
		::anno::display_name("Infinite Tiling"),
		::anno::in_group("Appearance")
	]],
	float bump_strength = 0.3f [[
		::anno::description("Specifies the strength of the bump."),
		::anno::display_name("Bump Strength"),
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f)
	]],
	color leather_color = color(0.394f, 0.194f, 0.0963f) [[
		::anno::description("Choose the color of the front side."),
		::anno::display_name("Color Front"),
		::anno::in_group("Appearance", "Front")
	]],
	float diffuse_brightness_front = 1.0f [[
		::anno::description("Adjusts the lightness of the material."),
		::anno::display_name("Brightness Front"),
		::anno::in_group("Appearance", "Front"),
		::anno::hard_range(0.f, 1.f)
	]],
	float reflection_roughness_front = 0.15f [[
		::anno::description("Higher roughness values lead to bigger highlights and blurrier reflections."),
		::anno::display_name("Roughness Front"),
		::anno::in_group("Appearance", "Front"),
		::anno::hard_range(0.f, 1.f)
	]],
	float imperfections_dust = 0.07f [[
		::anno::description("Adds specular variation to the roughness."),
		::anno::display_name("Imperfection Dust"),
		::anno::in_group("Appearance", "Front", "Imperfections"),
		::anno::hard_range(0.f, 1.f)
	]],
	float imperfections_grunge = 0.13f [[
		::anno::description("Adds specular variation to the roughness."),
		::anno::display_name("Imperfection Grunge"),
		::anno::in_group("Appearance", "Front", "Imperfections"),
		::anno::hard_range(0.f, 1.f)
	]],
	float imperfections_smudges = 0.87f [[
		::anno::description("Adds specular variation to the roughness."),
		::anno::display_name("Imperfection Smudges"),
		::anno::in_group("Appearance", "Front", "Imperfections"),
		::anno::hard_range(0.f, 1.f)
	]],
	color color_back_leather = color(0.394f, 0.251f, 0.173f) [[
		::anno::description("Choose the color of the back side."),
		::anno::display_name("Color Back"),
		::anno::in_group("Appearance", "Back")
	]],
	float color_brightness_back = 0.5f [[
		::anno::description("Adjusts the lightness of the material."),
		::anno::display_name("Brightness Back"),
		::anno::in_group("Appearance", "Back"),
		::anno::hard_range(0.f, 1.f)
	]],
	float reflection_roughness_back = 0.65f [[
		::anno::description("Higher roughness values lead to bigger highlights and blurrier reflections."),
		::anno::display_name("Roughness Back"),
		::anno::in_group("Appearance", "Back"),
		::anno::hard_range(0.f, 1.f)
	]],
	uniform bool dirt_back_on_off = false [[
		::anno::description("Switch on and off the dirt layer on the backside."),
		::anno::display_name("Dirt Back"),
		::anno::in_group("Appearance", "Dirt")
	]],
	color dirt_color = color(0.160444f, 0.016988f, 0.016988f) [[
		::anno::description("Choose the color of the dirt layer."),
		::anno::display_name("Dirt Color"),
		::anno::in_group("Appearance", "Dirt")
	]],
	float softness = 0.66f [[
		::anno::description("Adjust the transition between dirt and leather. From hard to soft."),
		::anno::display_name("Dirt Softness"),
		::anno::in_group("Appearance", "Dirt"),
		::anno::hard_range(0.f, 1.f)
	]],
	float position = 0.25f [[
		::anno::description("Adjust the intensity through position."),
		::anno::display_name("Dirt Amount"),
		::anno::in_group("Appearance", "Dirt"),
		::anno::hard_range(0.f, 1.f)
	]],
	float2 texture_translate = float2(0.f) [[
		::anno::description("Controls the position of the texture."),
		::anno::display_name("Translate"),
		::anno::in_group("Transform")
	]],
	float texture_rotate = 0.f [[
		::anno::description("Rotates angle of the texture in degrees."),
		::anno::display_name("Rotate"),
		::anno::in_group("Transform")
	]],
	float2 texture_scale = float2(1.0f) [[
		::anno::description("Larger numbers increase the size."),
		::anno::display_name("Scale"),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
		::preview_scale(3.5f),
		::anno::in_group("Transform")
	]],
	uniform bool round_corners = false [[
		::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
		::anno::display_name("Round Corners"),
		::anno::in_group("Round Corners")
	]],
	uniform float radius = 1.5f [[
		::anno::description("Radius of the rounded corners."),
		::anno::display_name("Radius mm"),
		::anno::in_group("Round Corners"),
		::anno::soft_range(0.f, 10.f)
	]],
	uniform bool across_materials = true [[
		::anno::description("Applies the round corner effect across different materials when enabled."),
		::anno::display_name("Across Materials"),
		::anno::in_group("Round Corners")
	]],
	uniform int uv_space_index = 0 [[
		::anno::description("Use selected UV space for material."),
		::anno::display_name("UV Space Index"),
		::anno::in_group("Advanced")
	]]
)
[[
	::anno::description(DESCRIPTION),
	::anno::display_name("Semi Aniline Leather - Brown"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("leather", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi")),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Leather.png")
]]
 = 
    let {
        bool tmp0 = true;
		float2 texture_rescale = texture_scale * .13f;
		
		texture_2d front_norm_tex 				= texture_2d("./textures/semi_aniline_front_norm.jpg", ::tex::gamma_linear);
		texture_2d front_rough_ao_height_tex	= texture_2d("./textures/semi_aniline_front_multi_rough_ao_height.jpg", ::tex::gamma_linear);
		texture_2d dust_grunge_leather_tex		= texture_2d("./textures/multi_R_dust_G_grunge_B_leather.jpg", ::tex::gamma_linear);
		texture_2d front_diff_lin_tex			= texture_2d("./textures/semi_aniline_front_diff.jpg", ::tex::gamma_linear);
		texture_2d front_diff_srgb_tex			= texture_2d("./textures/semi_aniline_front_diff.jpg", ::tex::gamma_srgb);
		texture_2d back_rough_ao_height_tex		= texture_2d("./textures/semi_aniline_back_multi_rough_ao_height.jpg", ::tex::gamma_linear);
		texture_2d back_norm_tex				= texture_2d("./textures/semi_aniline_back_norm.jpg", ::tex::gamma_linear);
		texture_2d back_diff_lin_tex			= texture_2d("./textures/semi_aniline_back_diff.jpg", ::tex::gamma_linear);
		texture_2d back_diff_srgb_tex			= texture_2d("./textures/semi_aniline_back_diff.jpg", ::tex::gamma_srgb);
		
        material_surface tmp1(::df::weighted_layer(::math::pow(::math::lerp(0.f, 1.f, ::math::smoothstep(::math::lerp(1.f, 0.f, position) - softness, ::math::lerp(1.f, 0.f, position) + softness, (infinite_tiling ? vm_tex_infinite_color_normal(front_rough_ao_height_tex, front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.708999991f, 0.393999994f, 0.836000025f), float3(0.476999998f, 0.474000007f, 0.987999976f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(front_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint)).y)), 2.43300009f), ::df::diffuse_reflection_bsdf(dirt_color, 0.800000012f), ::df::custom_curve_layer(0.0399999991f, 1.f, 5.f, histogram_scan_big((infinite_tiling ? vm_tex_infinite_color_normal(front_rough_ao_height_tex, front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.708999991f, 0.393999994f, 0.836000025f), float3(0.476999998f, 0.474000007f, 0.987999976f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(front_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint)).z, 0.761000037f, 0.582000017f), ::df::microfacet_ggx_smith_bsdf((((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).x * imperfections_dust + histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(front_rough_ao_height_tex, front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.708999991f, 0.393999994f, 0.836000025f), float3(0.476999998f, 0.474000007f, 0.987999976f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(front_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint)).x, 0.5f, ::math::lerp(0.286000013f, 0.75f, reflection_roughness_front)) + ((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).y * imperfections_grunge + ((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).z * imperfections_smudges) * (((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).x * imperfections_dust + histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(front_rough_ao_height_tex, front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.708999991f, 0.393999994f, 0.836000025f), float3(0.476999998f, 0.474000007f, 0.987999976f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(front_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint)).x, 0.5f, ::math::lerp(0.286000013f, 0.75f, reflection_roughness_front)) + ((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).y * imperfections_grunge + ((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).z * imperfections_smudges), (((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).x * imperfections_dust + histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(front_rough_ao_height_tex, front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.708999991f, 0.393999994f, 0.836000025f), float3(0.476999998f, 0.474000007f, 0.987999976f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(front_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint)).x, 0.5f, ::math::lerp(0.286000013f, 0.75f, reflection_roughness_front)) + ((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).y * imperfections_grunge + ((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).z * imperfections_smudges) * (((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).x * imperfections_dust + histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(front_rough_ao_height_tex, front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.708999991f, 0.393999994f, 0.836000025f), float3(0.476999998f, 0.474000007f, 0.987999976f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(front_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint)).x, 0.5f, ::math::lerp(0.286000013f, 0.75f, reflection_roughness_front)) + ((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).y * imperfections_grunge + ((infinite_tiling ? vm_tex_infinite(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), float3(0.453999996f, 0.832000017f, 0.513999999f), 0.949999988f, false, 2.20000005f) : float3(vm_tex_lookup(dust_grunge_leather_tex, vm_coord_post_scale(vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float2(2.f)), mono_a, float4(1.f)).tint)) - 0.5f).z * imperfections_smudges), color(1.f, 1.f, 1.f), color(0.f, 0.f, 0.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::df::weighted_layer(1.f, ::df::diffuse_reflection_bsdf(nvidia::core_definitions::blend_colors(hsl2rgb(rgb2hsl(float3(leather_color)) * float3(1.f, 1.f, diffuse_brightness_front * 0.75f)), color(histogram_scan_big(infinite_tiling ? vm_tex_infinite(front_diff_lin_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.363999993f), 1.f, true, 2.20000005f).x : float3(vm_tex_lookup(front_diff_srgb_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint).x, 0.569999993f, 0.0899999961f)), ::base::color_layer_multiply, 1.f, true).tint, 0.f), bsdf(), infinite_tiling ? vm_tex_infinite_color_normal(front_rough_ao_height_tex, front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.708999991f, 0.393999994f, 0.836000025f), float3(0.476999998f, 0.474000007f, 0.987999976f), 1.f, false, 2.20000005f, bump_strength * 2.5f).norm : vm_tex_normal_lookup(front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), bump_strength * 2.5f)), infinite_tiling ? vm_tex_infinite_color_normal(front_rough_ao_height_tex, front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.708999991f, 0.393999994f, 0.836000025f), float3(0.476999998f, 0.474000007f, 0.987999976f), 1.f, false, 2.20000005f, bump_strength * 2.5f).norm : vm_tex_normal_lookup(front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), bump_strength * 2.5f)), ::state::normal()), material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        material_surface tmp2(dirt_back_on_off ? ::df::weighted_layer(::math::pow(::math::lerp(0.f, 1.f, ::math::smoothstep(::math::lerp(1.f, 0.f, position) - softness, ::math::lerp(1.f, 0.f, position) + softness, (infinite_tiling ? vm_tex_infinite_color_normal(front_rough_ao_height_tex, front_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.708999991f, 0.393999994f, 0.836000025f), float3(0.476999998f, 0.474000007f, 0.987999976f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(front_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint)).y)), 2.43300009f), ::df::diffuse_reflection_bsdf(dirt_color, 0.800000012f), ::df::custom_curve_layer(0.0399999991f, 1.f, 5.f, histogram_scan_big((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 0.421000034f, 0.625f), ::df::microfacet_ggx_smith_bsdf(histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, ::math::lerp(0.349999994f, 0.649999976f, reflection_roughness_back)) * histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, ::math::lerp(0.349999994f, 0.649999976f, reflection_roughness_back)), histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, ::math::lerp(0.349999994f, 0.649999976f, reflection_roughness_back)) * histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, ::math::lerp(0.349999994f, 0.649999976f, reflection_roughness_back)), color(1.f, 1.f, 1.f), color(0.f, 0.f, 0.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::df::weighted_layer(1.f, ::df::diffuse_reflection_bsdf(nvidia::core_definitions::blend_colors(color_back_leather, (infinite_tiling ? color(vm_tex_infinite(back_diff_lin_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.433999985f), 1.f, true, 2.20000005f)) : vm_tex_lookup(back_diff_srgb_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint) * color(::math::lerp(0.f, 2.f, color_brightness_back)), ::base::color_layer_overlay, histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, 0.754000008f), true).tint, 0.f), bsdf(), infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : vm_tex_normal_lookup(texture_2d(), vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), bump_strength * 2.5f)), infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : vm_tex_normal_lookup(texture_2d(), vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), bump_strength * 2.5f)), ::state::normal()) : ::df::custom_curve_layer(0.0399999991f, 1.f, 5.f, histogram_scan_big((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 0.421000034f, 0.625f), ::df::microfacet_ggx_smith_bsdf(histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, ::math::lerp(0.349999994f, 0.649999976f, reflection_roughness_back)) * histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, ::math::lerp(0.349999994f, 0.649999976f, reflection_roughness_back)), histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, ::math::lerp(0.349999994f, 0.649999976f, reflection_roughness_back)) * histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, ::math::lerp(0.349999994f, 0.649999976f, reflection_roughness_back)), color(1.f, 1.f, 1.f), color(0.f, 0.f, 0.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::df::weighted_layer(1.f, ::df::diffuse_reflection_bsdf(nvidia::core_definitions::blend_colors(color_back_leather, (infinite_tiling ? color(vm_tex_infinite(back_diff_lin_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.433999985f), 1.f, true, 2.20000005f)) : vm_tex_lookup(back_diff_srgb_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint) * color(::math::lerp(0.f, 2.f, color_brightness_back)), ::base::color_layer_overlay, histogram_range((infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : float3(vm_tex_lookup(back_rough_ao_height_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), mono_a, float4(1.f)).tint))[0], 1.f, 0.754000008f), true).tint, 0.f), bsdf(), infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : vm_tex_normal_lookup(texture_2d(), vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), bump_strength * 2.5f)), infinite_tiling ? vm_tex_infinite_color_normal(back_rough_ao_height_tex, back_norm_tex, vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), float3(0.688000023f, 0.890999973f, 0.536000013f), float3(0.527999997f, 0.5f, 0.995999992f), 1.f, false, 2.20000005f, bump_strength * 2.5f).value : vm_tex_normal_lookup(texture_2d(), vm_coord(texture_translate, texture_rotate, texture_rescale, uv_space_index), bump_strength * 2.5f)), material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        color tmp3 = color(1.f, 1.f, 1.f);
        material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f), emission_intensity: color(0.f, 0.f, 0.f));
        material_geometry tmp5(float3(0.f), 1.f, round_corners ? ::state::rounded_corner_normal(radius * 0.00100000005f, across_materials, 1.f) : ::state::normal());
        hair_bsdf tmp6 = hair_bsdf();
    } in
        material(
            thin_walled: tmp0,
            surface: tmp1,
            backface: tmp2,
            ior: tmp3,
            volume: tmp4,
            geometry: tmp5,
            hair: tmp6);

export material Semi_Aniline_Black(*)
 [[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Semi Aniline Leather - Black"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi", "black", "dark", "neutral")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Black.png")
]]
= Semi_Aniline_Leather
(
    infinite_tiling:			true,
    bump_strength:				0.3f,
    leather_color:				color(0.0528f, 0.0528f, 0.0528f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.15f,
    imperfections_dust:			0.07f,
    imperfections_grunge:		0.13f,
    imperfections_smudges:		0.87f,
    color_back_leather:			color(0.0824f, 0.0824f, 0.0824f),
    color_brightness_back:		0.65f,
    reflection_roughness_back:	0.65f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.067725f, 0.067725f, 0.067725f),
    softness:					0.66f,
    position:					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    round_corners:				false,
    radius:						1.5f,
    across_materials:			true,
    uv_space_index: 			0
);

export material Semi_Aniline_Red(*)
 [[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Semi Aniline Leather - Red"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi", "red", "warm", "saturated")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Red.png")
]]
= Semi_Aniline_Leather
(
    infinite_tiling:			true,
    bump_strength:				0.3f,
    leather_color:				color(0.201f, 0.021f, 0.021f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.15f,
    imperfections_dust:			0.07f,
    imperfections_grunge:		0.13f,
    imperfections_smudges:		0.87f,
    color_back_leather:			color(0.201f, 0.0697f, 0.0677f),
    color_brightness_back:		0.65f,
    reflection_roughness_back:	0.65f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.160444f, 0.007751f, 0.007751f),
    softness:					0.66f,
    position:					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    round_corners:				false,
    radius:						1.5f,
    across_materials:			true,
    uv_space_index: 			0
);

export material Semi_Aniline_Peach(*)
 [[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Semi Aniline Leather - Peach"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "soft", "aniline", "semi", "peach", "warm", "red")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Peach.png")
]]
= Semi_Aniline_Leather
(
    infinite_tiling:			true,
    bump_strength:				0.4f,
    leather_color:				color(0.646f, 0.227f, 0.136f),
    diffuse_brightness_front: 	1.0f,
    reflection_roughness_front: 0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.646f, 0.389f, 0.32f),
    color_brightness_back:		0.7f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.160444f, 0.007751f, 0.007751f),
    softness:					0.807f,
    position:					0.22f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    round_corners:				false,
    radius:						1.5f,
    across_materials:			true,
    uv_space_index: 			0
);

export material Semi_Aniline_Mint(*)
 [[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Semi Aniline Leather - Mint"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "soft", "aniline", "semi", "mint", "light", "pastel", "green", "cool", "cold")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Mint.png")
]]
= Semi_Aniline_Leather
(
    infinite_tiling:			true,
    bump_strength:				0.4f,
    leather_color:				color(0.384f, 0.646f, 0.465f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front: 0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.523f, 0.586f, 0.542f),
    color_brightness_back:		0.88f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.154152f, 0.160444f, 0.106156f),
    softness: 					0.8f,
    position: 					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    round_corners:				false,
    radius:						1.5f,
    across_materials:			true,
    uv_space_index: 			0
);

export material Semi_Aniline_Orange(*)
 [[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Semi Aniline Leather - Orange"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "soft", "aniline", "semi", "orange", "warm", "saturated")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Orange.png")
]]
= Semi_Aniline_Leather
(
    infinite_tiling:			true,
    bump_strength:				0.45f,
    leather_color:				color(0.680020f, 0.130352f, 0.016988f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.605484f,0.363604f,0.212044f),
    color_brightness_back:		0.2f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.666117f, 0.409826f, 0.028991f),
    softness:					0.615f,
    position:					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    round_corners:				false,
    radius:						1.5f,
    across_materials:			true,
    uv_space_index: 			0
);

export material Semi_Aniline_Lemon(*)
 [[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Semi Aniline Leather - Lemon"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi", "lemon", "yellow", "light", "saturated", "warm")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Lemon.png")
	
]]
= Semi_Aniline_Leather
(
    infinite_tiling:			true,
    bump_strength:				0.4f,
    leather_color:				color(0.796917f, 0.585973f, 0.011126f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.774227f,0.729919f,0.499505f),
    color_brightness_back:		0.176f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.425905f, 0.054592f, 0.012664f),
    softness:					0.615f,
    position:					0.3f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    round_corners:				false,
    radius:						1.5f,
    across_materials:			true,
    uv_space_index: 			0
);

export material Semi_Aniline_Salmon(*)
 [[
    ::anno::description(DESCRIPTION),
    ::anno::display_name("Semi Aniline Leather - Salmon"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi", "salmon", "red", "warm")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Salmon.png")
]]
= Semi_Aniline_Leather
(
    infinite_tiling:			true,
    bump_strength:				0.4f,
    leather_color:				color(0.812241f, 0.204710f, 0.190463f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.751895f,0.579547f,0.573159f),
    color_brightness_back:		0.2f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.592438f, 0.124741f, 0.069727f),
    softness:					0.801f,
    position:					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    round_corners:				false,
    radius:						1.5f,
    across_materials:			true,
    uv_space_index: 			0
);


// ----------------- Punched Leather -----------------
export material Semi_Aniline_Leather_Punched(

// Leather parameters
	uniform bool infinite_tiling = true [[
		::anno::description("Enables infinite tiling feature which removes repeating texture patterns. Note that depending on the material this feature changes the appearance of the material slightly."),
		::anno::display_name("Infinite Tiling"),
		::anno::in_group("Appearance")
	]],
	float bump_strength = 0.3f [[
		::anno::description("Specifies the strength of the bump."),
		::anno::display_name("Bump Strength"),
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f)
	]],
	color leather_color = color(0.394f, 0.194f, 0.0963f) [[
		::anno::description("Choose the color of the front side."),
		::anno::display_name("Color Front"),
		::anno::in_group("Appearance", "Front")
	]],
	float diffuse_brightness_front = 1.0f [[
		::anno::description("Adjusts the lightness of the material."),
		::anno::display_name("Brightness Front"),
		::anno::in_group("Appearance", "Front"),
		::anno::hard_range(0.f, 1.f)
	]],
	float reflection_roughness_front = 0.15f [[
		::anno::description("Higher roughness values lead to bigger highlights and blurrier reflections."),
		::anno::display_name("Roughness Front"),
		::anno::in_group("Appearance", "Front"),
		::anno::hard_range(0.f, 1.f)
	]],
	float imperfections_dust = 0.07f [[
		::anno::description("Adds specular variation to the roughness."),
		::anno::display_name("Imperfection Dust"),
		::anno::in_group("Appearance", "Front", "Imperfections"),
		::anno::hard_range(0.f, 1.f)
	]],
	float imperfections_grunge = 0.13f [[
		::anno::description("Adds specular variation to the roughness."),
		::anno::display_name("Imperfection Grunge"),
		::anno::in_group("Appearance", "Front", "Imperfections"),
		::anno::hard_range(0.f, 1.f)
	]],
	float imperfections_smudges = 0.87f [[
		::anno::description("Adds specular variation to the roughness."),
		::anno::display_name("Imperfection Smudges"),
		::anno::in_group("Appearance", "Front", "Imperfections"),
		::anno::hard_range(0.f, 1.f)
	]],
	color color_back_leather = color(0.394f, 0.251f, 0.173f) [[
		::anno::description("Choose the color of the back side."),
		::anno::display_name("Color Back"),
		::anno::in_group("Appearance", "Back")
	]],
	float color_brightness_back = 0.5f [[
		::anno::description("Adjusts the lightness of the material."),
		::anno::display_name("Brightness Back"),
		::anno::in_group("Appearance", "Back"),
		::anno::hard_range(0.f, 1.f)
	]],
	float reflection_roughness_back = 0.65f [[
		::anno::description("Higher roughness values lead to bigger highlights and blurrier reflections."),
		::anno::display_name("Roughness Back"),
		::anno::in_group("Appearance", "Back"),
		::anno::hard_range(0.f, 1.f)
	]],
	uniform bool dirt_back_on_off = false [[
		::anno::description("Switch on and off the dirt layer on the backside."),
		::anno::display_name("Dirt Back"),
		::anno::in_group("Appearance", "Dirt")
	]],
	color dirt_color = color(0.160444f, 0.016988f, 0.016988f) [[
		::anno::description("Choose the color of the dirt layer."),
		::anno::display_name("Dirt Color"),
		::anno::in_group("Appearance", "Dirt")
	]],
	float softness = 0.66f [[
		::anno::description("Adjust the transition between dirt and leather. From hard to soft."),
		::anno::display_name("Dirt Softness"),
		::anno::in_group("Appearance", "Dirt"),
		::anno::hard_range(0.f, 1.f)
	]],
	float position = 0.25f [[
		::anno::description("Adjust the intensity through position."),
		::anno::display_name("Dirt Amount"),
		::anno::in_group("Appearance", "Dirt"),
		::anno::hard_range(0.f, 1.f)
	]],
	float2 texture_translate = float2(0.f) [[
		::anno::description("Controls the position of the texture."),
		::anno::display_name("Texture Translate"),
		::anno::in_group("Transform"),
		::anno::ui_order(5)
	]],
	float texture_rotate = 0.f [[
		::anno::description("Rotates angle of the texture in degrees."),
		::anno::display_name("Texture Rotate"),
		::anno::in_group("Transform"),
		::anno::soft_range(0.f, 360.f),
		::anno::ui_order(6)
	]],
	float2 texture_scale = float2(1.f) [[
		::anno::description("Larger numbers increase the size."),
		::anno::display_name("Texture Scale"),
		::anno::in_group("Transform"),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
		::preview_scale(3.5f),
		::anno::ui_order(7)
	]],
	uniform int uv_space_index = 0 [[
		::anno::description("Uses selected UV space for material."),
		::anno::display_name("UV Space Index"),
		::anno::in_group("Transform"),
		::anno::ui_order(8)
	]],
// Punching parameters
	uniform cutout_pattern shape_select = pattern_circle //select atlas tile here
	[[
		::anno::description("Select a cutout shape."),
		::anno::display_name("Cutout Shape"),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(9)
	]],
	float punching_grid_size = 1.0f
	[[
		::anno::description("Scales the size of the punching grid."),
		::anno::display_name("Punching Grid Size"),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(10)
	]],
	float cutout_rotation = 45.0f
	[[
		::anno::description("Rotates the cutout shape."),
		::anno::display_name("Cutout Rotation"),
		::anno::hard_range(0.f, 360.0f),
		::anno::soft_range(0.f, 360.0f),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(11)
	]],
	float cutout_size = .4f
	[[
		::anno::description("Scales the size of the cutout pattern independently from the base material."),
		::anno::display_name("Cutout Size"),
		::anno::hard_range(0.f, 1.2f),
		::anno::soft_range(0.f, 1.0f),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(12)
	]],
	float cutout_roundness = .5f
	[[
		::anno::description("At low values it makes the cutouts sharper. Higher values give the shapes a more rounded look."),
		::anno::display_name("Cutout Roundness"),
		::anno::hard_range(0.f, 1.f),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(13)
	]],
	float cutout_bump_strength = 1.0f
	[[
		::anno::description("Sets the strength of the bevelled normal around the cutout."),
		::anno::display_name("Cutout Bevel Strength"),
		::anno::soft_range(0.0f, 1.0f),
		::anno::hard_range(0.0f, 2.0f),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(14)
	]],
// Grid Layout parameters
	bool hexagonal_grid = true
	[[
		::anno::description("When enabled, the punching will occur on a hexagonal grid, otherwise a square grid."),
		::anno::display_name("Enable Hexagonal Grid"),
		::anno::in_group("Appearance", "Cutout"),
		::anno::ui_order(15)
	]],
	float square_grid_offset = 0.0f
	[[
		::anno::description("Offsets each row of the grid by a certain amount. Applies only when hexagonal grid is disabled."),
		::anno::display_name("Square Grid Offset"),
		::anno::in_group("Appearance", "Cutout"),
		::anno::enable_if("hexagonal_grid==false"),
		::anno::ui_order(16)
	]],
	uniform bool round_corners = false [[
		::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
		::anno::display_name("Enable Round Corners"),
		::anno::in_group("Round Corners"),
		::anno::ui_order(17)
	]],
	uniform float radius = 1.5f [[
		::anno::description("Radius of the rounded corners in millimeters."),
		::anno::display_name("Round Corner Radius"),
		::anno::in_group("Round Corners"),
		::anno::enable_if("round_corners==true"),
		::anno::ui_order(18)
	]],
	uniform bool across_materials = false [[
		::anno::description("Applies the round corner effect across different materials when enabled."),
		::anno::display_name("Across Materials"),
		::anno::in_group("Round Corners"),
		::anno::enable_if("round_corners==true"),
		::anno::ui_order(19)
	]]
) 
[[
	::anno::description(DESCRIPTION_PUNCHED),
	::anno::display_name("Semi Aniline Leather - Brown Punched"),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("leather", "punched", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi")),
	::anno::author("Nvidia vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Leather_Punched.png")
]]
 = let {
	bool horizontal_offset = true;
	float cutout_bevel_width = 0.7f;
	float cutout_bump_strength_2 = cutout_bump_strength * 5.0f;
	
	material base_mat = Semi_Aniline_Leather(
		infinite_tiling:			infinite_tiling,
		bump_strength:				bump_strength,
		leather_color:				leather_color,
		diffuse_brightness_front:	diffuse_brightness_front,
		reflection_roughness_front:	reflection_roughness_front,
		imperfections_dust:			imperfections_dust,
		imperfections_grunge:		imperfections_grunge,
		imperfections_smudges:		imperfections_smudges,
		color_back_leather:			color_back_leather,
		color_brightness_back:		color_brightness_back,
		reflection_roughness_back:	reflection_roughness_back,
		dirt_back_on_off:			dirt_back_on_off,
		dirt_color:					dirt_color,
		softness:					softness,
		position:					position,
		texture_translate:			texture_translate,
		texture_rotate:	   			texture_rotate,
		texture_scale:				texture_scale,
		uv_space_index:	  			uv_space_index,
		round_corners:				round_corners,
		radius:			  			radius,
		across_materials:	 		across_materials
	);
	
	// remap range of slider to avoid artifacts in the bevelling
	float2 punching_scale = texture_scale * 0.01f * float2(punching_grid_size);
	float cutout_roundness_ = cutout_roundness*0.6f+0.4f;
	float cutout_size_lin = (1.0f/cutout_size);
	texture_2d punching_cutout = texture_2d("./textures/leather_punch_atlas_01.png", ::tex::gamma_linear);

	vm_coordinates uv = vm_coord(
		translation:	texture_translate,
		rotation:		texture_rotate,
		scaling:		punching_scale,
		uv_space:		uv_space_index
	);

	vm_coordinates punching_uv = hexagonal_grid ? vm_coord_hex(
		uv:		uv,
		scale:	cutout_roundness_ * cutout_size_lin,
		rotation: cutout_rotation
	) : vm_coord_grid(
		uv:		vm_coord_rowcol_offset(
					uv: uv,
					offset: square_grid_offset,
					horizontal_offset: horizontal_offset
				),
		scale:	cutout_roundness_ * cutout_size_lin,
		rotation: cutout_rotation
	);
	// select the correct subtile from the atlas
	float4 crop = tile_select_2x2(shape_select);

	::base::texture_return lookup = vm_tex_lookup(
		tex:			punching_cutout,
		uv:				punching_uv,
		mono_source:	mono_a,
		scale:			float4(1.0f),
		crop_u:			float2(crop.x, crop.y),
		crop_v:			float2(crop.z, crop.w),
		wrap_u:			::tex::wrap_clamp,
		wrap_v:			::tex::wrap_clamp
	);

	float low = (1.0 - cutout_roundness_);
	float high = (cutout_size_lin * (cutout_bevel_width * 0.2f) *  cutout_roundness_) + (1.0 - cutout_roundness_);
	// remap x...y to (clamped) 0...1
	float x = ::math::clamp((lookup.mono - low)/(high - low), 0.0, 1.0);
	// spherical falloff
	float falloff=::math::sqrt(1.0-x*x);
	// masking falloff as the center of the cutout is flat
	float masked_falloff=falloff<=0.0?1.0:falloff;

	// where base material is still there, use the value of the base material
	float cutout= ::math::min(falloff<=0.0?0.0:1.0, base_mat.geometry.cutout_opacity);

	// bring in -.5 ... +.5 range and lerp between lookup and flat normal
	float3 remap_norm = 	::math::lerp(float3(lookup.tint), float3(0.5, 0.5, 1.0), masked_falloff) - float3(0.5);
	float3 t_norm = ::math::normalize(remap_norm * float3(cutout_bump_strength_2, cutout_bump_strength_2, 1.0));
	
	float3 rotfix_norm = float3(::math::cos(punching_uv.rotation) * t_norm.x - ::math::sin(punching_uv.rotation) * t_norm.y,
					::math::sin(punching_uv.rotation) * t_norm.x + ::math::cos(punching_uv.rotation) * t_norm.y,
					t_norm.z);
	
	float3 normal = ::state::texture_tangent_u(punching_uv.uv_space_index) * rotfix_norm.x + 
					::state::texture_tangent_v(punching_uv.uv_space_index) * rotfix_norm.y + 
					::state::normal() * rotfix_norm.z;

	float3 final_normal = ::base::blend_normals(
		base_normal:		normal,
		base_normal_weight:	1.0f,
		detail_normal:		base_mat.geometry.normal,
		detail_normal_weight: 1.0f
	);
	
} in material(
	surface: material_surface(
		scattering: base_mat.surface.scattering
	),
	backface: material_surface(
		scattering: base_mat.backface.scattering
	),
	volume: base_mat.volume,
	ior: base_mat.ior,
	thin_walled: true,
	geometry: material_geometry(
		displacement: base_mat.geometry.displacement,
		normal: final_normal,
		cutout_opacity: cutout
	)
);


export material Semi_Aniline_Black_Punched(*)
 [[
    ::anno::description(DESCRIPTION_PUNCHED),
    ::anno::display_name("Semi Aniline Leather - Black Punched"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "punched", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi", "black", "dark", "neutral")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Black_Punched.png")
]]
= Semi_Aniline_Leather_Punched
(
    infinite_tiling:			true,
    bump_strength:				0.3f,
    leather_color:				color(0.0528f, 0.0528f, 0.0528f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.15f,
    imperfections_dust:			0.07f,
    imperfections_grunge:		0.13f,
    imperfections_smudges:		0.87f,
    color_back_leather:			color(0.0824f, 0.0824f, 0.0824f),
    color_brightness_back:		0.65f,
    reflection_roughness_back:	0.65f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.067725f, 0.067725f, 0.067725f),
    softness:					0.66f,
    position:					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    uv_space_index: 			0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	round_corners:			false,
	radius:					1.5f,
	across_materials:		true
);

export material Semi_Aniline_Red_Punched(*)
 [[
    ::anno::description(DESCRIPTION_PUNCHED),
    ::anno::display_name("Semi Aniline Leather - Red Punched"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "punched", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi", "red", "warm", "saturated")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Red_Punched.png")
]]
= Semi_Aniline_Leather_Punched
(
    infinite_tiling:			true,
    bump_strength:				0.3f,
    leather_color:				color(0.201f, 0.021f, 0.021f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.15f,
    imperfections_dust:			0.07f,
    imperfections_grunge:		0.13f,
    imperfections_smudges:		0.87f,
    color_back_leather:			color(0.201f, 0.0697f, 0.0677f),
    color_brightness_back:		0.65f,
    reflection_roughness_back:	0.65f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.160444f, 0.007751f, 0.007751f),
    softness:					0.66f,
    position:					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    uv_space_index: 			0,

	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	round_corners:			false,
	radius:					1.5f,
	across_materials:		true
);

export material Semi_Aniline_Peach_Punched(*)
 [[
    ::anno::description(DESCRIPTION_PUNCHED),
    ::anno::display_name("Semi Aniline Leather - Peach Punched"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "punched", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "soft", "aniline", "semi", "peach", "warm", "red")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Peach_Punched.png")
]]
= Semi_Aniline_Leather_Punched
(
    infinite_tiling:			true,
    bump_strength:				0.4f,
    leather_color:				color(0.646f, 0.227f, 0.136f),
    diffuse_brightness_front: 	1.0f,
    reflection_roughness_front: 0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.646f, 0.389f, 0.32f),
    color_brightness_back:		0.7f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.160444f, 0.007751f, 0.007751f),
    softness:					0.807f,
    position:					0.22f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    uv_space_index: 			0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	round_corners:			false,
	radius:					1.5f,
	across_materials:		true
);

export material Semi_Aniline_Mint_Punched(*)
 [[
    ::anno::description(DESCRIPTION_PUNCHED),
    ::anno::display_name("Semi Aniline Leather - Mint Punched"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "punched", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "soft", "aniline", "semi", "mint", "light", "pastel", "green", "cool", "cold")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Mint_Punched.png")
]]
= Semi_Aniline_Leather_Punched
(
    infinite_tiling:			true,
    bump_strength:				0.4f,
    leather_color:				color(0.384f, 0.646f, 0.465f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front: 0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.523f, 0.586f, 0.542f),
    color_brightness_back:		0.88f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.154152f, 0.160444f, 0.106156f),
    softness: 					0.8f,
    position: 					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    uv_space_index: 			0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	round_corners:			false,
	radius:					1.5f,
	across_materials:		true
);

export material Semi_Aniline_Orange_Punched(*)
 [[
    ::anno::description(DESCRIPTION_PUNCHED),
    ::anno::display_name("Semi Aniline Leather - Orange Punched"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "punched", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "soft", "aniline", "semi", "orange", "warm", "saturated")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Orange_Punched.png")
]]
= Semi_Aniline_Leather_Punched
(
    infinite_tiling:			true,
    bump_strength:				0.45f,
    leather_color:				color(0.680020f, 0.130352f, 0.016988f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.605484f,0.363604f,0.212044f),
    color_brightness_back:		0.2f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.666117f, 0.409826f, 0.028991f),
    softness:					0.615f,
    position:					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    uv_space_index: 			0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	round_corners:			false,
	radius:					1.5f,
	across_materials:		true
);

export material Semi_Aniline_Lemon_Punched(*)
 [[
    ::anno::description(DESCRIPTION_PUNCHED),
    ::anno::display_name("Semi Aniline Leather - Lemon Punched"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "punched", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi", "lemon", "yellow", "light", "saturated", "warm")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Lemon_Punched.png")
	
]]
= Semi_Aniline_Leather_Punched
(
    infinite_tiling:			true,
    bump_strength:				0.4f,
    leather_color:				color(0.796917f, 0.585973f, 0.011126f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.774227f,0.729919f,0.499505f),
    color_brightness_back:		0.176f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.425905f, 0.054592f, 0.012664f),
    softness:					0.615f,
    position:					0.3f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    uv_space_index: 			0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	round_corners:			false,
	radius:					1.5f,
	across_materials:		true
);

export material Semi_Aniline_Salmon_Punched(*)
 [[
    ::anno::description(DESCRIPTION_PUNCHED),
    ::anno::display_name("Semi Aniline Leather - Salmon Punched"),
    ::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("leather", "punched", "infinite", "tiling", "new", "natural", "bumped", "interior", "cloth", "warm", "soft", "aniline", "semi", "salmon", "red", "warm")),
    ::anno::author("Nvidia vMaterials"),
    ::anno::contributor("Maik Rohland"),
    ::anno::contributor("Ruediger Raab"),
	::anno::thumbnail("./.thumbs/Semi_Aniline_Leather.Semi_Aniline_Salmon_Punched.png")
]]
= Semi_Aniline_Leather_Punched
(
    infinite_tiling:			true,
    bump_strength:				0.4f,
    leather_color:				color(0.812241f, 0.204710f, 0.190463f),
    diffuse_brightness_front:	1.0f,
    reflection_roughness_front:	0.22f,
    imperfections_dust:			0.074f,
    imperfections_grunge:		0.124f,
    imperfections_smudges:		0.342f,
    color_back_leather:			color(0.751895f,0.579547f,0.573159f),
    color_brightness_back:		0.2f,
    reflection_roughness_back:	0.533f,
    dirt_back_on_off:			true,
    dirt_color:					color(0.592438f, 0.124741f, 0.069727f),
    softness:					0.801f,
    position:					0.25f,
    texture_translate:			float2(0.0f),
    texture_rotate:				0.0f,
    texture_scale:				float2(1.0f),
    uv_space_index: 			0,
	
	shape_select:			pattern_circle,
	punching_grid_size:		0.7f,
	cutout_size:			0.4f,
	cutout_roundness:		0.8f,
	cutout_bump_strength:	2.0f,
	hexagonal_grid:			true,
	square_grid_offset:		0.0f,		
	
	round_corners:			false,
	radius:					1.5f,
	across_materials:		true
);