/******************************************************************************
 *	 Copyright 2024 NVIDIA Corporation. All rights reserved.	 *
 ******************************************************************************

Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL,
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/


mdl 1.5;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::blend_colors;
import ::nvidia::core_definitions::dimension;


const string COPYRIGHT =
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n"
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n"
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

const string DESCRIPTION = "A stone wall material";



float remap(float input, float low_1, float high_1, float low_2, float high_2)
{
	return low_2 + ((input - low_1) * (high_2 - low_2))/(high_1 - low_1);
}


float3 transform_internal_to_tangent(float3 n)
[[ 
    ::anno::hidden() 
]]
{
    return
        n.x* float3(::state::texture_tangent_u(0).x,::state::texture_tangent_v(0).x,::state::normal().x)+
        n.y* float3(::state::texture_tangent_u(0).y,::state::texture_tangent_v(0).y,::state::normal().y)+
        n.z* float3(::state::texture_tangent_u(0).z,::state::texture_tangent_v(0).z,::state::normal().z);
}

// Returns the normal n in internal space, given n is in tangent space.
float3 transform_tangent_to_internal(float3 n)
[[ 
    ::anno::hidden() 
]]
{
    return  ::state::texture_tangent_u(0) * n.x +
            ::state::texture_tangent_v(0) * n.y +
            ::state::normal() * n.z ;
}
::base::texture_coordinate_info transform_coordinate_2(
    float4x4 transform                                         
        [[ ::anno::description("A transformation to be applied to the source coordinates. rotation_translation_scale() is a suggested means to compute the transformation matrix.") ]],
    ::base::texture_coordinate_info coordinate = ::base::texture_coordinate_info()
        [[ ::anno::description("Coordinate, typically sourced from coordinate_source or coordinate_projection.") ]]
) [[ 
    ::anno::description("Transform a texture coordinate by a matrix.") ,
    ::anno::noinline()
  ]]
{

	// Version 2
	float4 r_position = transform * float4(coordinate.position.x,coordinate.position.y,coordinate.position.z,1);
	//Try aproximating it for the case that the rotation is only aroud z and assuming the texture layout is nice and z is ~constant.
	//just pretend there is no other rotation happening
	//get rid of scaling and translation. Then extract fields where sin and cos would be in a simple 2d transform around z.
	float4 u = transform[0];
	float3 ru = ::math::normalize(float3(u.x,u.y,u.z));
	float cos =  ru.x; 
	float sin =  -ru.y;
	
	
    return ::base::texture_coordinate_info(
        float3(r_position.x,r_position.y,r_position.z),
		::math::normalize(cos * coordinate.tangent_u - sin * coordinate.tangent_v),
		::math::normalize(cos * coordinate.tangent_v + sin * coordinate.tangent_u));
}


::base::texture_coordinate_info vmat_transform(
								float2 translation = float2(0.0, 0.0),
								float rotation     = 0.0,				// rotation in degrees
								float2 scaling     = float2(1.0, 1.0),
								uniform ::base::texture_coordinate_system system = ::base::texture_coordinate_uvw,
								uniform int uv_space       = 0
)
{
	float rotation_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	float4x4 scale =
	float4x4(1.0 /scaling.x, 0.             ,  0. ,     0.,
			 0.            , 1.0 /scaling.y ,  0. ,     0.,
			 0.            , 0.             ,  1.0,     0.,
			 translation.x , translation.y  ,  0.0,     1.);

    float s = ::math::sin(rotation_rad);
    float c = ::math::cos(rotation_rad);
    float4x4 rotate =
	float4x4(  c  ,  -s   , 0.0 , 0.0,
			   s  ,   c   , 0.0 , 0.0,
			   0.0,   0.0 , 1.0 , 0.0,
			   0. ,   0.0 , 0.0 , 1.);
	
	return transform_coordinate_2(scale*rotate, ::base::coordinate_source(system, uv_space));
}


float3 add_detail_normal(float3 nd = ::state::normal(), float3 n = ::state::normal())
{
    // http://blog.selfshadow.com/publications/blending-in-detail/
    float3 n_t = transform_internal_to_tangent(n);
    float3 nd_t = transform_internal_to_tangent(nd);

    n_t=n_t + float3(0.,0.,1.);
    nd_t = nd_t *  float3(-1.,-1.,1.);

    n = n_t*::math::dot(n_t, nd_t)/n_t.z - nd_t;
    return ::math::normalize(transform_tangent_to_internal(n));
}

float remap_xy_to_0_1(float input, float x, float y)
{
	return (input - x)/(y - x);
}

float histogram_scan_small(float input, float width, float position)
{	
	return ::math::clamp(
				remap_xy_to_0_1(input,
					::math::lerp(0.0, 1.0 - width, position),
					::math::lerp(width, 1.0 , position)),
				0.0,
				1.0);
}



float histogram_scan_big(float input, float width, float position)
{
	return ::math::clamp(
				remap_xy_to_0_1(input,
					::math::lerp(-width, 1.0, position),
					::math::lerp(0.0, 1.0 + width, position)),
				0.0,
				1.0);
}

int lowbias32(int x)
{
    x ^= x >>> 16;
    x *= 0x7feb352d;
    x ^= x >>> 15;
    x *= 0x846ca68b;
    x ^= x >>> 16;
    return x;
}

float uint2float(int x)
{
    return float(x & 0x7FFFFFFF) + (x < 0 ? 2147483648.0 : 0.0);
}

float histogram_range(float input, float range = 1.0f, float position = 0.5f)
{	
	float low = ::math::clamp(1.0 - ::math::min(((1.0 - position) + range * 0.5), (1.0 - position) * 2), 0.0, 1.0);
	float high = ::math::clamp(::math::min((position + range * 0.5 ), position * 2.0), 0.0, 1.0);
	return ::math::lerp(low, high, input);
}



float2 rnd22(int2 p) {
	float2 ret_val = float2(
		uint2float(lowbias32(p[0] + lowbias32(p[1]))) / 4294967296.f,
		uint2float(lowbias32(p[0] + 32000 + lowbias32(p[1]))) / 4294967296.f
	);
    return ret_val;
}    

float2x2 invert_2x2(float2x2 M)
{
	float det = M[0][0]*M[1][1] - M[0][1]*M[1][0];
	//https://www.chilimath.com/lessons/advanced-algebra/inverse-of-a-2x2-matrix/
	return (1.0 / det) * float2x2(M[1][1], -M[0][1], -M[1][0], M[0][0]);
}

color hue_shift(
	color input = color(1.0, 0.0, 0.0), 
	float hue_adjust = 0.0f
)
{
	float3 in_color = float3(input);
	float3  kRGBToYPrime = float3 (0.299, 0.587, 0.114);
    float3  kRGBToI      = float3 (0.596, -0.275, -0.321);
    float3  kRGBToQ      = float3 (0.212, -0.523, 0.311);

	
	//color converted = color(kRGBToQ);
    float3  kYIQToR     = float3 (1.0, 0.956, 0.621);
    float3  kYIQToG     = float3 (1.0, -0.272, -0.647);
    float3  kYIQToB     = float3 (1.0, -1.107, 1.704);

    float   YPrime  = ::math::dot(in_color, kRGBToYPrime);
    float   I       = ::math::dot(in_color, kRGBToI);
    float   Q       = ::math::dot(in_color, kRGBToQ);
    float   hue     = ::math::atan2(Q, I);
    float   chroma  = ::math::sqrt(I * I + Q * Q);

    hue += hue_adjust;

    Q = chroma * ::math::sin(hue);
    I = chroma * ::math::cos(hue);

    float3    yIQ   = float3 (YPrime, I, Q);

    return color(::math::dot (yIQ, kYIQToR),::math::dot (yIQ, kYIQToG), ::math::dot (yIQ, kYIQToB) );
}

// Taken from https://www.shadertoy.com/view/4tlBWB
float3 hsv2rgb(float3 c)
{
	float4 K = float4(1.0, 2.0/3.0, 1.0/3.0, 3.0);
    float3 p = ::math::abs(::math::frac(float3(c.x) + float3(K.x, K.y, K.z)) * 6.0 - float3(K.w));
    return c.z * ::math::lerp(float3(K.x), ::math::clamp(p - float3(K.x), 0.0, 1.0), c.y);
}


float3 srgb2rgb(float3 val) 
{
	return ::math::pow(::math::max(val, float3(0.0f)), 2.2);
}
float3 nonrepeat_lookup(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 1.0,
	float3 average_color = float3(0.5),
	float patch_size = 8.0
)
{
	
	float2 uv_in = float2(uvw.position[0], uvw.position[1]) * texture_scale;
	float Z =  patch_size;     // patch scale inside example texture
	float CON = 1.0f;
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * uv_in; //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V)); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;
	
	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )

		O = (W[0] = F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I))) - m*float(CON))
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0,1)))) - m*float(CON))
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1,0)))) - m*float(CON));
	else
		O = (W[0] =      -F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1))))   - m*float(CON))
	      + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1, 0)))) - m*float(CON))
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0, 1)))) - m*float(CON));
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0, 1.0);
	
	return float3(O);
}
color endless_texture(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 10.0,
	float3 average_color = float3(0.5, 0.5, 1.0),
	float patch_size = 8.0,
	bool gamma_correct_lookup = true
)
{
	return gamma_correct_lookup ? color(srgb2rgb(
			nonrepeat_lookup (
				texture: texture,
				uvw: uvw,
				texture_scale: texture_scale,
				average_color: average_color,
				patch_size: patch_size
			))
		) : color(nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		));
}



float3 endless_normal(
	uniform texture_2d texture = texture_2d(),
	float factor = 1.0,
	bool flip_tangent_u = false,
	bool flip_tangent_v = false,
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 1.0,
	float3 average_color = float3(0.5, 0.5, 1.0),
	float patch_size = 8.0
	//bool srgb2rgb = false,
	//bool rgb2srgb = false
)
{
	float3 transformed_tangent_u = flip_tangent_u ? uvw.tangent_u : - uvw.tangent_u;
    float3 transformed_tangent_v = flip_tangent_v ? uvw.tangent_v : - uvw.tangent_v;
	
	if (flip_tangent_u)
		transformed_tangent_u=-transformed_tangent_u;
	if (flip_tangent_v)
		transformed_tangent_v=-transformed_tangent_v;

	// normalized Lookup
	float3 tangent_space_normal =
         (nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		) - 0.5) * (2.0 * factor);
		
		 
	 return ::math::normalize(uvw.tangent_u * tangent_space_normal.x +
          uvw.tangent_v * tangent_space_normal.y +
          ::state::normal()*1.0); 
	//return ::state::normal();
}

export material Stone_Pores_Weathered(
    uniform bool infinite_tiling = true [[
	::anno::description("Enables infinite tiling feature which removes repeating texture patterns. Note that depending on the material this feature changes the appearance of the material slightly.\t."),
	::anno::display_name("Infinite Tiling"),
	::anno::in_group("Appearance")
    ]],
    float stone_diffuse_brightness = 0.8f [[
	::anno::description("Adjusts the lightness of the stones and pebbles."),
	::anno::display_name("Brightness"),
	::anno::in_group("Appearance", "Stone"),
	::anno::hard_range(0.f, 1.f)
    ]],
    float reflection_roughness = 1.f [[
	::anno::description("Controls the roughness appearance. Smaller areas are highlighted."),
	::anno::display_name("Roughness"),
	::anno::in_group("Appearance", "Stone"),
	::anno::hard_range(0.f, 1.f)
    ]],
    uniform float stones_bump_strength = 1.f [[
	::anno::description("Drives the bumpiness of the stones."),
	::anno::display_name("Bump Strength"),
	::anno::in_group("Appearance", "Stone"),
	::anno::hard_range(0.f, 1.f)
    ]],
    float moss_brightness = 0.6f [[
	::anno::description("Adjusts the brightness of the moss."),
	::anno::display_name("Brightness"),
	::anno::in_group("Appearance", "Moss"),
    ::anno::hard_range(0.f, 1.f)
    ]],
    float moss_saturation = 0.79f [[
	::anno::description("Controls the saturation of the moss."),
	::anno::display_name("Saturation"),
	::anno::in_group("Appearance", "Moss"),
    ::anno::hard_range(0.f, 1.f)
    ]],
    float moss_distribution_amount = 0.f [[
	::anno::description("A lower value makes the moss grow more unevenly across the surface."),
	::anno::display_name("Coverage"),
	::anno::in_group("Appearance", "Moss"),
	::anno::hard_range(0.f, 1.f)
    ]],
    float moss_height_growth = 1.f [[
	::anno::description("Controls the growth of the moss material."),
	::anno::display_name("Growth"),
	::anno::in_group("Appearance", "Moss"),
	::anno::hard_range(0.f, 1.f)
    ]],
    float moss_weight = 1.f [[
	::anno::description("Decreasing this parameter makes the moss layer more transparent."),
	::anno::display_name("Weight"),
	::anno::in_group("Appearance", "Moss"),
	::anno::hard_range(0.f, 1.f)
    ]],
    float moss_moisture = 1.f [[
	::anno::description("Makes mossy areas more reflectivy to give them a wet appearance."),
	::anno::display_name("Moisture"),
	::anno::in_group("Appearance", "Moss"),
	::anno::hard_range(0.f, 1.f)
    ]],
    uniform float moss_bump_factor = 1.f [[
	::anno::description("Determines the degree of bumpiness of the moss."),
	::anno::display_name("Bump Strength"),
	::anno::in_group("Appearance", "Moss"),
	::anno::hard_range(0.f, 1.f)
    ]],
    float2 texture_translate = float2(0.f) [[
	::anno::description("Controls the position of the texture."),
	::anno::display_name("Translate"),
	::anno::in_group("Transform")
    ]],
    float texture_rotate = 0.f [[
	::anno::description("Rotates angle of the texture in degrees."),
	::anno::display_name("Rotate"),
	::anno::in_group("Transform")
    ]],
    float2 texture_scale = float2(0.5f) [[
	::anno::description("Larger numbers increase the size."),
	::anno::display_name("Scale"),
    ::nvidia::core_definitions::dimension(float2(1.2f, 1.2f)),
	::anno::in_group("Transform")
    ]],
    uniform bool enable_round_corners = false [[
	::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
	::anno::display_name("Enable Round Corners"),
	::anno::in_group("Round Corners")
    ]],
    uniform bool across_materials = true [[
	::anno::description("Applies the round corner effect across different materials when enabled."),
	::anno::display_name("Across Materials"),
	::anno::in_group("Round Corners")
    ]],
    uniform float radius = 0.00200000009f [[
	::anno::description("Radius of the rounded corners in millimeters."),
	::anno::display_name("Round Corner Radius"),
	::anno::in_group("Round Corners")
    ]],
    uniform int uv_space_index = 0 [[
	::anno::description("Use selected UV space for material."),
	::anno::display_name("UV Space Index"),
	::anno::in_group("Advanced")
    ]])
[[
	::anno::display_name("Stone Pores Weathered"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("dielectric", "infinite", "stone", "nature", "moss", "weathered", "pores", "wall", "exterior", "rough", "plant", "urban", "city", "industrial")),
	::anno::thumbnail("./.thumbs/Stone_Pores_Weathered.Stone_Pores_Weathered.png"),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= 
    let {
        bool tmp0 = false;
        material_surface tmp1(::df::custom_curve_layer(0.0299999993f, 1.f, 5.f, histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 0.209999993f, 0.75999999f), ::df::microfacet_ggx_smith_bsdf(::math::lerp(::math::lerp(::math::lerp(-0.419999987f, 1.75f, float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0]), 0.75f - ::math::clamp(remap(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.5f, 1.f, 0.f, 1.f), 0.f, 1.f) * ::math::lerp(1.20000005f, -1.f, reflection_roughness), histogram_scan_small(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.200000003f, 0.600000024f)), histogram_range(::math::lerp(1.f, 0.f, float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1]), 0.48999998f, ::math::lerp(1.f, 0.680000007f, moss_moisture)), ::math::lerp(0.f, ::math::lerp(histogram_scan_big(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.379000008f, ::math::lerp(0.817000031f, 0.100000001f, moss_distribution_amount)), float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], ::math::clamp(histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.150000006f, ::math::lerp(0.200000003f, 0.680000007f, moss_height_growth)), 0.f, 1.f)), ::math::lerp(0.f, 2.f, moss_weight))) * ::math::lerp(::math::lerp(::math::lerp(-0.419999987f, 1.75f, float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0]), 0.75f - ::math::clamp(remap(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.5f, 1.f, 0.f, 1.f), 0.f, 1.f) * ::math::lerp(1.20000005f, -1.f, reflection_roughness), histogram_scan_small(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.200000003f, 0.600000024f)), histogram_range(::math::lerp(1.f, 0.f, float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1]), 0.48999998f, ::math::lerp(1.f, 0.680000007f, moss_moisture)), ::math::lerp(0.f, ::math::lerp(histogram_scan_big(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.379000008f, ::math::lerp(0.817000031f, 0.100000001f, moss_distribution_amount)), float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], ::math::clamp(histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.150000006f, ::math::lerp(0.200000003f, 0.680000007f, moss_height_growth)), 0.f, 1.f)), ::math::lerp(0.f, 2.f, moss_weight))), ::math::lerp(::math::lerp(::math::lerp(-0.419999987f, 1.75f, float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0]), 0.75f - ::math::clamp(remap(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.5f, 1.f, 0.f, 1.f), 0.f, 1.f) * ::math::lerp(1.20000005f, -1.f, reflection_roughness), histogram_scan_small(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.200000003f, 0.600000024f)), histogram_range(::math::lerp(1.f, 0.f, float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1]), 0.48999998f, ::math::lerp(1.f, 0.680000007f, moss_moisture)), ::math::lerp(0.f, ::math::lerp(histogram_scan_big(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.379000008f, ::math::lerp(0.817000031f, 0.100000001f, moss_distribution_amount)), float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], ::math::clamp(histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.150000006f, ::math::lerp(0.200000003f, 0.680000007f, moss_height_growth)), 0.f, 1.f)), ::math::lerp(0.f, 2.f, moss_weight))) * ::math::lerp(::math::lerp(::math::lerp(-0.419999987f, 1.75f, float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0]), 0.75f - ::math::clamp(remap(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.5f, 1.f, 0.f, 1.f), 0.f, 1.f) * ::math::lerp(1.20000005f, -1.f, reflection_roughness), histogram_scan_small(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.200000003f, 0.600000024f)), histogram_range(::math::lerp(1.f, 0.f, float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1]), 0.48999998f, ::math::lerp(1.f, 0.680000007f, moss_moisture)), ::math::lerp(0.f, ::math::lerp(histogram_scan_big(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.379000008f, ::math::lerp(0.817000031f, 0.100000001f, moss_distribution_amount)), float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], ::math::clamp(histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.150000006f, ::math::lerp(0.200000003f, 0.680000007f, moss_height_growth)), 0.f, 1.f)), ::math::lerp(0.f, 2.f, moss_weight))), color(1.f, 1.f, 1.f), ::state::texture_tangent_u(0), ::df::scatter_reflect, ""), ::df::weighted_layer(1.f, ::df::diffuse_reflection_bsdf(::math::lerp(nvidia::core_definitions::blend_colors(infinite_tiling ? endless_texture(texture_2d("./textures/stone_diff.jpg", ::tex::gamma_linear), ::base::coordinate_source(::base::texture_coordinate_uvw, 0), 10.f, float3(0.49019599f, 0.466666996f, 0.435294002f), 8.f, true) : ::base::file_texture(texture_2d("./textures/stone_diff.jpg", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint, color(histogram_range(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 0.5f, 0.200000003f)), ::base::color_layer_multiply, ::math::lerp(1.f, 0.f, stone_diffuse_brightness)).tint, hue_shift(nvidia::core_definitions::blend_colors(::base::file_texture(texture_2d("./textures/moss_diff.jpg", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint, color(::math::pow(hsv2rgb(float3(0.2214614f, ::math::lerp(0.f, 0.699999988f, moss_saturation), ::math::lerp(0.175000012f, 0.699999988f, moss_brightness))), 2.20000005f)), ::base::color_layer_overlay, 1.f).tint, 5.95100021f), moss_height_growth * ::math::lerp(histogram_scan_big(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.379000008f, ::math::lerp(0.817000031f, 0.100000001f, moss_distribution_amount)), float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], ::math::clamp(histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.150000006f, ::math::lerp(0.200000003f, 0.680000007f, moss_height_growth)), 0.f, 1.f))), 0.f, ""), bsdf(), add_detail_normal(::math::lerp(::state::normal(), ::base::tangent_space_normal_texture(texture_2d("./textures/moss_norm.jpg", ::tex::gamma_linear), ::math::lerp(0.f, 2.f, moss_bump_factor), false, false, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false, 1.f, 0.f), ::math::lerp(0.f, 2.f, moss_weight) * ::math::lerp(histogram_scan_big(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.379000008f, ::math::lerp(0.817000031f, 0.100000001f, moss_distribution_amount)), float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], ::math::clamp(histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.150000006f, ::math::lerp(0.200000003f, 0.680000007f, moss_height_growth)), 0.f, 1.f))), infinite_tiling ? endless_normal(texture_2d("./textures/stone_norm.jpg", ::tex::gamma_linear), ::math::lerp(0.f, 2.f, stones_bump_strength), false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 1.f, float3(0.498039007f, 0.501960993f, 0.882353008f), 3.f) : ::base::tangent_space_normal_texture(texture_2d("./textures/stone_norm.jpg", ::tex::gamma_linear), ::math::lerp(0.f, 2.f, stones_bump_strength), false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false, 1.f, 0.f))), add_detail_normal(::math::lerp(::state::normal(), ::base::tangent_space_normal_texture(texture_2d("./textures/moss_norm.jpg", ::tex::gamma_linear), ::math::lerp(0.f, 2.f, moss_bump_factor), false, false, ::base::texture_coordinate_info(::state::texture_coordinate(0), ::state::texture_tangent_u(0), ::state::texture_tangent_v(0)), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false, 1.f, 0.f), ::math::lerp(0.f, 2.f, moss_weight) * ::math::lerp(histogram_scan_big(float3(::base::file_texture(texture_2d("./textures/multi_moss.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(0.638283014f, 0.638283014f, 0.638283014f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.379000008f, ::math::lerp(0.817000031f, 0.100000001f, moss_distribution_amount)), float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], ::math::clamp(histogram_scan_big(float3(infinite_tiling ? endless_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 3.f, float3(0.572548985f, 0.988234997f, 0.505882025f), 3.f, false) : ::base::file_texture(texture_2d("./textures/multi_stone.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.150000006f, ::math::lerp(0.200000003f, 0.680000007f, moss_height_growth)), 0.f, 1.f))), infinite_tiling ? endless_normal(texture_2d("./textures/stone_norm.jpg", ::tex::gamma_linear), ::math::lerp(0.f, 2.f, stones_bump_strength), false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), 1.f, float3(0.498039007f, 0.501960993f, 0.882353008f), 3.f) : ::base::tangent_space_normal_texture(texture_2d("./textures/stone_norm.jpg", ::tex::gamma_linear), ::math::lerp(0.f, 2.f, stones_bump_strength), false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false, 1.f, 0.f))), material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        color tmp3 = color(1.f, 1.f, 1.f);
        material_geometry tmp5(float3(0.f), 1.f, enable_round_corners ? ::state::rounded_corner_normal(radius, across_materials, 1.f) : ::state::normal());
    } in
        material(
            thin_walled: tmp0,
            surface: tmp1,
            backface: tmp2,
            ior: tmp3,
            geometry: tmp5);
            
export material Dry_Bright_Stone(*)
[[
	::anno::display_name("Dry Bright Stone"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("dielectric", "infinite", "stone", "nature", "moss", "weathered", "pores", "wall", "exterior", "rough", "plant", "urban", "city", "industrial", "dry", "bright")),
	::anno::thumbnail("./.thumbs/Stone_Pores_Weathered.Dry_Bright_Stone.png"),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= Stone_Pores_Weathered
(
    infinite_tiling: false,
    stone_diffuse_brightness: 0.6f,
    reflection_roughness: 0.7f,
    stones_bump_strength: 1.f,
    moss_brightness: 0.f,
    moss_saturation: 0.f,
    moss_distribution_amount: 0.f,
    moss_height_growth: 0.f,
    moss_weight: 0.f,
    moss_moisture: 0.f,
    moss_bump_factor: 0.f,
    texture_translate: float2(0.0f),
    texture_rotate: 0.0f,
    texture_scale: float2(1.0f),
    enable_round_corners: false,
    radius: 1.5f,
    across_materials: true,
    uv_space_index: 0
);

export material Matte_Stone(*)
[[
	::anno::display_name("Matte Stone"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("dielectric", "infinite", "stone", "nature", "moss", "weathered", "pores", "wall", "exterior", "rough", "plant", "urban", "city", "industrial", "dry", "matte")),
	::anno::thumbnail("./.thumbs/Stone_Pores_Weathered.Matte_Stone.png"),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= Stone_Pores_Weathered
(
    infinite_tiling: false,
    stone_diffuse_brightness: 0.2f,
    reflection_roughness: 0.f,
    stones_bump_strength: 0.8f,
    moss_brightness: 0.f,
    moss_saturation: 0.f,
    moss_distribution_amount: 0.f,
    moss_height_growth: 0.f,
    moss_weight: 0.f,
    moss_moisture: 0.f,
    moss_bump_factor: 0.f,
    texture_translate: float2(0.0f),
    texture_rotate: 0.0f,
    texture_scale: float2(1.0f),
    enable_round_corners: false,
    radius: 1.5f,
    across_materials: true,
    uv_space_index: 0
);

export material Slightly_Grown_Moss(*)
[[
	::anno::display_name("Slightly Grown Moss"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("dielectric", "infinite", "stone", "nature", "moss", "weathered", "pores", "wall", "exterior", "rough", "plant", "urban", "city", "industrial", "dry", "slightly", "grown")),
	::anno::thumbnail("./.thumbs/Stone_Pores_Weathered.Slightly_Grown_Moss.png"),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= Stone_Pores_Weathered
(
    infinite_tiling: false,
    stone_diffuse_brightness: 1.f,
    reflection_roughness: 0.8f,
    stones_bump_strength: 0.5f,
    moss_brightness: 0.8f,
    moss_saturation: 0.89f,
    moss_distribution_amount: 1.f,
    moss_height_growth: 0.55f,
    moss_weight: 1.f,
    moss_moisture: 0.5f,
    moss_bump_factor: 1.f,
    texture_translate: float2(0.0f),
    texture_rotate: 0.0f,
    texture_scale: float2(1.0f),
    enable_round_corners: false,
    radius: 1.5f,
    across_materials: true,
    uv_space_index: 0
);

export material Soft_Grown_Moss(*)
[[
	::anno::display_name("Soft Grown Moss"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("dielectric", "infinite", "stone", "nature", "moss", "weathered", "pores", "wall", "exterior", "rough", "plant", "urban", "city", "industrial", "dry", "soft", "grown")),
	::anno::thumbnail("./.thumbs/Stone_Pores_Weathered.Soft_Grown_Moss.png"),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= Stone_Pores_Weathered
(
    infinite_tiling: false,
    stone_diffuse_brightness: 1.f,
    reflection_roughness: 0.8f,
    stones_bump_strength: 0.5f,
    moss_brightness: 0.8f,
    moss_saturation: 0.9f,
    moss_distribution_amount: 1.f,
    moss_height_growth: 0.8f,
    moss_weight: 1.f,
    moss_moisture: 0.7f,
    moss_bump_factor: 1.f,
    texture_translate: float2(0.0f),
    texture_rotate: 0.0f,
    texture_scale: float2(1.0f),
    enable_round_corners: false,
    radius: 1.5f,
    across_materials: true,
    uv_space_index: 0
);

export material Saturated_Green_Patches(*)
[[
	::anno::display_name("Saturated Green Patches"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("dielectric", "infinite", "stone", "nature", "moss", "weathered", "pores", "wall", "exterior", "rough", "plant", "urban", "city", "industrial", "dry", "saturated", "green")),
	::anno::thumbnail("./.thumbs/Stone_Pores_Weathered.Saturated_Green_Patches.png"),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= Stone_Pores_Weathered
(
    infinite_tiling: false,
    stone_diffuse_brightness: 0.f,
    reflection_roughness: 1.f,
    stones_bump_strength: 1.f,
    moss_brightness: 0.8f,
    moss_saturation: 0.85f,
    moss_distribution_amount: 0.6f,
    moss_height_growth: 0.9f,
    moss_weight: 1.f,
    moss_moisture: .21f,
    moss_bump_factor: 1.f,
    texture_translate: float2(0.0f),
    texture_rotate: 0.0f,
    texture_scale: float2(1.0f),
    enable_round_corners: false,
    radius: 1.5f,
    across_materials: true,
    uv_space_index: 0
);

export material Fadely_Yellowish_Moss(*)
[[
	::anno::display_name("Fadely Yellowish Moss"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
    ::anno::key_words(string[]("dielectric", "infinite", "stone", "nature", "moss", "weathered", "pores", "wall", "exterior", "rough", "plant", "urban", "city", "industrial", "dry", "fadely", "yellowish")),
	::anno::thumbnail("./.thumbs/Stone_Pores_Weathered.Fadely_Yellowish_Moss.png"),
	::anno::author("NVIDIA vMaterials"),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab")
]]
= Stone_Pores_Weathered
(
    infinite_tiling: false,
    stone_diffuse_brightness: 0.f,
    reflection_roughness: 0.8f,
    stones_bump_strength: 0.2f,
    moss_brightness: 1.f,
    moss_saturation: 0.f,
    moss_distribution_amount: .69f,
    moss_height_growth: 1.f,
    moss_weight: 0.25f,
    moss_moisture: 1.f,
    moss_bump_factor: 1.f,
    texture_translate: float2(0.0f),
    texture_rotate: 0.0f,
    texture_scale: float2(1.0f),
    enable_round_corners: false,
    radius: 1.5f,
    across_materials: true,
    uv_space_index: 0
);