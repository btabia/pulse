/******************************************************************************
 *          Copyright 2024 NVIDIA Corporation. All rights reserved.           *
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/

mdl 1.6;

import ::anno::*;
import ::df::*;
import ::base::*;
import ::math::*;
import ::nvidia::core_definitions::apply_colorfalloff;
import ::nvidia::core_definitions::thick_glass;
import ::state::normal;

const string COPYRIGHT = 
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

/*
bsdf apply_colorfalloff_v2(
    material base = scratched_metal_v2(metal_color: color(1.)),
    uniform color color_0 = color(1.,0.,0.),
    uniform color color_1 = color(0.,1.,0.),
    uniform color color_2 = color(0.,0.,1.),
    uniform color color_3 = color(1.,0.,0.),
    uniform color color_4 = color(0.,1.,0.)
)
 =  material(
    surface: material_surface(
        scattering: df::measured_curve_factor(
            curve_values: color[](color_0,color_1,color_2,color_3,color_4),
            base: base.surface.scattering
        ),
        emission: base.surface.emission
    ),
    volume: base.volume,
    ior: base.ior,
    thin_walled: base.thin_walled,
    geometry: base.geometry
);


material gem_definition(
	color transmission_color = color(1.0),
    uniform color glass_color = color(.95),
    float roughness = 0.0,
    uniform float volume_ior = 1.4f,
    uniform bool dispersion = true,
    uniform float abbe_number = 1.4f,
    uniform float base_thickness = .1,
    float3 normal = ::state::normal()
)
[[
	::anno::hidden()
]]
 = let{
	 
    bsdf glossy_bsdf = ::df::simple_glossy_bsdf(
        mode: ::df::scatter_reflect,
        tint: color(1.),
        roughness_u: roughness
    );
    bsdf glossy_bsdf_transmission = ::df::simple_glossy_bsdf(
        mode: ::df::scatter_transmit,
        tint: transmission_color,
        roughness_u: roughness
    );
	
	bsdf surface_bsdf = ::df::weighted_layer(
            normal: normal,
            weight: 1.,
            layer: ::df::color_fresnel_layer(
                layer: glossy_bsdf,
                base: glossy_bsdf_transmission,
                ior: dispersion?::base::abbe_number_ior(volume_ior, abbe_number):color(volume_ior)
            )
        );
		
} in material(
    thin_walled: false,
    surface: material_surface(scattering: surface_bsdf ),
    volume: material_volume(
        absorption_coefficient: (base_thickness <= 0)? color(0): ::math::log(glass_color) / -base_thickness
    ),
    ior: dispersion?::base::abbe_number_ior(volume_ior, abbe_number):color(volume_ior)
);
*/

export material Diamond(
    color transmission_color = color ( 1.f , 1.f , 1.f)
    [[
        ::anno::display_name("Transmission Color"),
        ::anno::description("Color effect for transmission independent of thickness of the object."),
        ::anno::in_group("Appearance")
    ]],
    uniform color volume_color = color ( 1.f , 1.f , 1.f)
    [[
        ::anno::display_name("Volume Color"),
        ::anno::description("Color effect for volume of the object reached at transmission distance."),
        ::anno::in_group("Appearance")
    ]],
    uniform float clarity =  1.f
    [[
        ::anno::display_name("Clarity"),
        ::anno::description("Use to adapt to size of gem, smaller numbers darken the gem."),
        ::anno::soft_range(0.1,10.0),
        ::anno::in_group("Appearance")
    ]],
    uniform bool dispersion = true
    [[
        ::anno::display_name("Dispersion"),
        ::anno::description("Enable or disable the dispersion."),
        ::anno::in_group("Advanced")
    ]])
[[
    ::anno::display_name("Diamond"),
    ::anno::description("Diamond gem material (Default values based on 2cm stone size.)"),
    ::anno::author("NVIDIA vMaterials"),
	::anno::contributor("RÃ¼diger Raab"),
	::anno::contributor("Maik Rohland"),
    ::anno::copyright_notice(COPYRIGHT),
	::anno::thumbnail("./.thumbs/Diamond.Diamond.png"),
	::anno::key_words(string[]("gem", "jewelry", "gemstone", "transmissive", "new", "design", "transparent", "diamond", "purple"))
]] = 
let{
	// Gem definition
	// uniform color glass_color = color(.95),
	float roughness = 0.0;
	float volume_ior = 2.42f;
	float abbe_number = 55.f;
	float base_thickness = clarity * 0.1f;
	// float3 normal = ::state::normal()

	bsdf glossy_bsdf = ::df::simple_glossy_bsdf(
        mode: ::df::scatter_reflect,
        tint: color(1.),
        roughness_u: roughness
    );
    bsdf glossy_bsdf_transmission = ::df::simple_glossy_bsdf(
        mode: ::df::scatter_transmit,
        tint: transmission_color,
        roughness_u: roughness
    );
	
	bsdf surface_bsdf = ::df::weighted_layer(
            //normal: normal, // is state::normal anyways, can be omitted
            weight: 1.,
            layer: ::df::color_fresnel_layer(
                layer: glossy_bsdf,
                base: glossy_bsdf_transmission,
                ior: dispersion?::base::abbe_number_ior(volume_ior, abbe_number):color(volume_ior)
            )
    );
	
	bsdf falloff_bsdf =  df::measured_curve_factor(
            curve_values: color[](color( 0.9529412f , 0.972549f , 1.f),
								color( 1.f , 0.9529412f , 0.9960784f),
								color( 0.9529412f , 0.9764706f , 1.f),
								color( 0.9529412f , 1.f , 0.9960784f),
								color( 1.f , 0.9529412f , 0.9843137f)
								),
            base: surface_bsdf
	);
	

	// the apply color falloff function does nothing but add a color gradient while keeping the material'sample
	// other properties
	
	/*
	::nvidia::core_definitions::apply_colorfalloff(
    base:  gem_definition(
        transmission_color:  transmission_color, 	// CHECK
        glass_color:  volume_color,					// CHECK		was modified in the material+_colume expresion	
        roughness:  0.f,							// CHECK				
        volume_ior:  2.42F, 						// CHECK
        dispersion: dispersion,						// CHECK
        abbe_number: 55.f,							// CHECK
        base_thickness:  clarity * 0.1f,			// CHECK
        normal:  ::state::normal ()),				// CHECK
    color_0:  color( 0.9529412f , 0.972549f , 1.f),	// CHECK
    color_1:  color( 1.f , 0.9529412f , 0.9960784f),// CHECK
    color_2:  color( 0.9529412f , 0.9764706f , 1.f),// CHECK
    color_3:  color( 0.9529412f , 1.f , 0.9960784f),// CHECK
    color_4:  color( 1.f , 0.9529412f , 0.9843137f));// CHECK
	*/
	
} in material(
    thin_walled: false,
    surface: material_surface(scattering: falloff_bsdf ),
    volume: material_volume(
        absorption_coefficient: (base_thickness <= 0)? color(0): ::math::log(volume_color) / -base_thickness
    ),
    ior: dispersion?::base::abbe_number_ior(volume_ior, abbe_number):color(volume_ior)
);

