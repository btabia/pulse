/******************************************************************************
 *	 Copyright 2024 NVIDIA Corporation. All rights reserved.	 *
 ******************************************************************************

Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIAâ€™s Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL,
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/


mdl 1.5;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::blend_colors;
import ::nvidia::core_definitions::dimension;


const string COPYRIGHT =
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n"
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n"
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";

const string DESCRIPTION = "A ground material for streets.";

float3 srgb2rgb(float3 val) 
{
	return ::math::pow(::math::max(val, float3(0.0f)), 2.2);
}

float3 rgb2srgb(float3 val) [[ ::anno::unused() ]] {
	return ::math::pow( ::math::max(val, float3(0.f)), float3(1./2.2) );

}
int lowbias32(int x)
{
	x ^= x >>> 16;
	x *= 0x7feb352d;
	x ^= x >>> 15;
	x *= 0x846ca68b;
	x ^= x >>> 16;
	return x;
}

float uint2float(int x)
{
	return float(x & 0x7FFFFFFF) + (x < 0 ? 2147483648.0 : 0.0);
}

float2 rnd22(int2 p) {
	float2 ret_val = float2(
		uint2float(lowbias32(p[0] + lowbias32(p[1]))) / 4294967296.f,
		uint2float(lowbias32(p[0] + 32000 + lowbias32(p[1]))) / 4294967296.f
	);
	return ret_val;
}	

float2x2 invert_2x2(float2x2 M)
{
	float det = M[0][0]*M[1][1] - M[0][1]*M[1][0];
	//https://www.chilimath.com/lessons/advanced-algebra/inverse-of-a-2x2-matrix/
	return (1.0 / det) * float2x2(M[1][1], -M[0][1], -M[1][0], M[0][0]);
}

float3 nonrepeat_lookup(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 1.0,
	float3 average_color = float3(0.5),
	float patch_size = 8.0
)
{
	
	float2 uv_in = float2(uvw.position[0], uvw.position[1]) * texture_scale;
	float Z =  patch_size;	 // patch scale inside example texture
	float CON = 1.0f;
	
	float3 O = float3(0.f);
	float2x2 M0 = float2x2(1.f,0.f, 0.5f, ::math::sqrt(3.f)/2.f);
	float2x2 M = invert_2x2(M0); // transform matrix <-> tilted space
	
	float2 U = uv_in;
	float2 V = M * uv_in; //pre-tilted hexa coordinates
	int2 I = int2(::math::floor(V)); // hexa-tile id
	
	// The mean color needs to be determined in Photoshop then to make the
	// average color work out, take the float value and calculate the apropriate
	// mean value as (value^(1/2.2))

	float3 m = average_color;
	
	float3 F = float3(::math::frac(V)[0], ::math::frac(V)[1], 0.f), W;
	F[2] = 1.0 - F[0] - F[1]; // local hexa coordinates
	
	if( F[2] > 0.f )

		O = (W[0] = F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I))) - m*float(CON))
		  + (W[1] = F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0,1)))) - m*float(CON))
		  + (W[2] = F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1,0)))) - m*float(CON));
	else
		O = (W[0] =	  -F[2]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1))))   - m*float(CON))
		  + (W[1] = 1.f - F[1]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(1, 0)))) - m*float(CON))
		  + (W[2] = 1.f - F[0]) * (( ::tex::lookup_float3(texture, U/Z-rnd22(I+int2(0, 1)))) - m*float(CON));
	O = m + O/::math::length(W);
	O = ::math::clamp( (O), 0.0, 1.0);
	
	return float3(O);
}

float3 endless_normal(
	uniform texture_2d texture = texture_2d(),
	float factor = 1.0,
	bool flip_tangent_u = false,
	bool flip_tangent_v = false,
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 1.0,
	float3 average_color = float3(0.5, 0.5, 1.0),
	float patch_size = 8.0
	//bool srgb2rgb = false,
	//bool rgb2srgb = false
)
{
	float3 transformed_tangent_u = flip_tangent_u ? uvw.tangent_u : - uvw.tangent_u;
	float3 transformed_tangent_v = flip_tangent_v ? uvw.tangent_v : - uvw.tangent_v;
	
	if (flip_tangent_u)
		transformed_tangent_u=-transformed_tangent_u;
	if (flip_tangent_v)
		transformed_tangent_v=-transformed_tangent_v;

	// normalized Lookup
	float3 tangent_space_normal =
		 (nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		) - 0.5) * (2.0 * factor);
		
		 
	 return ::math::normalize(uvw.tangent_u * tangent_space_normal.x +
		  uvw.tangent_v * tangent_space_normal.y +
		  state::normal()*1.0); 
	//return state::normal();
}

color endless_texture(
	uniform texture_2d texture = texture_2d(),
	::base::texture_coordinate_info uvw = ::base::coordinate_source(),
	float texture_scale = 10.0,
	float3 average_color = float3(0.5, 0.5, 1.0),
	float patch_size = 8.0,
	bool gamma_correct_lookup = true
)


{
	return gamma_correct_lookup ? color(srgb2rgb(
			nonrepeat_lookup (
				texture: texture,
				uvw: uvw,
				texture_scale: texture_scale,
				average_color: average_color,
				patch_size: patch_size
			))
		) : color(nonrepeat_lookup (
			texture: texture,
			uvw: uvw,
			texture_scale: texture_scale,
			average_color: average_color,
			patch_size: patch_size
		));
}


float histogram_range(float input, float range = 1.0f, float position = 0.5f)
{	
	float low = ::math::clamp(1.0 - ::math::min(((1.0 - position) + range * 0.5), (1.0 - position) * 2), 0.0, 1.0);
	float high = ::math::clamp(math::min((position + range * 0.5 ), position * 2.0), 0.0, 1.0);
	return ::math::lerp(low, high, input);
}




::base::texture_coordinate_info transform_coordinate_2(
	float4x4 transform										 
		[[ ::anno::description("A transformation to be applied to the source coordinates. rotation_translation_scale() is a suggested means to compute the transformation matrix.") ]],
	::base::texture_coordinate_info coordinate = ::base::texture_coordinate_info()
		[[ ::anno::description("Coordinate, typically sourced from coordinate_source or coordinate_projection.") ]]
) [[ 
	::anno::description("Transform a texture coordinate by a matrix.") ,
	::anno::noinline()
  ]]
{
	// Version 2
	float4 r_position = transform * float4(coordinate.position.x,coordinate.position.y,coordinate.position.z,1);
	//Try aproximating it for the case that the rotation is only aroud z and assuming the texture layout is nice and z is ~constant.
	//just pretend there is no other rotation happening
	//get rid of scaling and translation. Then extract fields where sin and cos would be in a simple 2d transform around z.
	float4 u = transform[0];
	float3 ru = ::math::normalize(float3(u.x,u.y,u.z));
	float cos =  ru.x; 
	float sin =  -ru.y;
	
	return ::base::texture_coordinate_info(
		float3(r_position.x,r_position.y,r_position.z),
		math::normalize(cos * coordinate.tangent_u - sin * coordinate.tangent_v),
		math::normalize(cos * coordinate.tangent_v + sin * coordinate.tangent_u));
}


base::texture_coordinate_info vmat_transform(
								float2 translation = float2(0.0, 0.0),
								float rotation	 = 0.0,				// rotation in degrees
								float2 scaling	 = float2(1.0, 1.0),
								uniform ::base::texture_coordinate_system system = ::base::texture_coordinate_uvw,
								uniform int uv_space	   = 0
)
{
	float rotation_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	float4x4 scale =
	float4x4(1.0 /scaling.x, 0.			 ,  0. ,	 0.,
			 0.			, 1.0 /scaling.y ,  0. ,	 0.,
			 0.			, 0.			 ,  1.0,	 0.,
			 translation.x , translation.y  ,  0.0,	 1.);

	float s = ::math::sin(rotation_rad);
	float c = ::math::cos(rotation_rad);
	float4x4 rotate =
	float4x4(  c  ,  -s   , 0.0 , 0.0,
			   s  ,   c   , 0.0 , 0.0,
			   0.0,   0.0 , 1.0 , 0.0,
			   0. ,   0.0 , 0.0 , 1.);
	
	return transform_coordinate_2(scale*rotate, ::base::coordinate_source(system, uv_space));
}


// Water / Wetness modifier function
struct puddle_return {
	color diffuse_out;
	float roughness_out;
	float ao_out;
	float3 normal_out;
	float water_transition_out;
};


puddle_return puddles(
	color diffuse_in
	[[
		::anno::description("The diffuse map which will have its color changed due to the water. The water effect may also tint the surface as the water can be adjusted to be dirty.")
	]],
	float roughness_in
	[[
		::anno::description("The roughness map. The water effect causes the roughness to become reflective.")
	]],
	float3 normal_in
	[[
		::anno::description("The normal map input. The normal is changed as the water level rises and puddles form on the material.")
	]],
	float ao_in
	[[
		::anno::description("Ambient occlusion which is used to break up the intensity of the reflection. As water appears on ."
				"the surface, the AO values are faded to white in the output map.")
	]],
	float height_in
	[[
		::anno::description("The height map input. It is used to caluculate the water effect as the water level is rising.")
	]],
	
	float water_level 			= 0.5f
	[[
		::anno::description("Controls the water level on the surface. Feed this input with a grayscale map that features blurred spots to simulate water puddles.")
	]],
	float water_level_softness 	= 0.2f,
	float murky_water_depth_fade= 0.7f,
	color murky_water_color		= color(0.7f, 0.62f, 0.44f),
	float max_murky_water_tint_opacity = 1.0f,
	float pow_wet_diffuse		= 2.1f,
	float fade_dry_to_wet		= 0.0f
)
[[
	::anno::description("Takes the lookup of 5 maps as input and produces wet layers or puddles as an effect. \n.")
]]
{	
	puddle_return result;
	result.water_transition_out = ::math::smoothstep(water_level - water_level_softness - 0.001,
							water_level + water_level_softness,
							height_in
	);
	
	float wetness = ::math::lerp(result.water_transition_out, 0.0f, fade_dry_to_wet);
	
	// Roughness map for wet specular. Fading between the original 'dry' roughness and 0.0 which is the reflectivity for complete
	// wetness. In theory the 0.0 could be also exposed, in case we would like to leave the some controls for the specular value of
	// the wet surface
	result.roughness_out = ::math::lerp(0.0f, roughness_in, wetness);
	
	float water_transluceny = (water_level - height_in) > 0.0f ? (water_level - height_in) * murky_water_depth_fade : 0.0f;
	float clamped_water_transluceny = ::math::clamp(water_transluceny, 0.0f, max_murky_water_tint_opacity);
	
	color dry_wet_diffuse = ::math::lerp(::math::pow(diffuse_in, pow_wet_diffuse),
										diffuse_in,
										wetness
	);
	
	// lerping the water color with the wet-dry-diffuse map
	result.diffuse_out	= ::math::lerp(dry_wet_diffuse, murky_water_color, clamped_water_transluceny);
	result.ao_out		= ::math::lerp(1.0f, ao_in, result.water_transition_out);
	result.normal_out	= ::math::lerp(::state::normal(), normal_in, result.water_transition_out);
	return result;
}

export material Asphalt_Fine(
	float asphalt_roughness = 0.6f [[
		::anno::display_name("Asphalt Roughness"),
		::anno::description("Sets the general roughness of the asphalt material."),
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f)
	]],
	float asphalt_wetness = 0.0f [[
		::anno::display_name("Asphalt Wetness"),
		::anno::description("Makes the entire surface wet."),
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f)
	]],
	float asphalt_brightness = 0.8f [[
		::anno::display_name("Asphalt Brightness"),
		::anno::description("Adjusts the brightness of the asphalt material."),
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f)
	]],
	float asphalt_bump_strength = 1.f [[
		::anno::display_name("Asphalt Bump Strength"),
		::anno::description("Controls the strength of the asphalt bump."),	
		::anno::in_group("Appearance"),
		::anno::hard_range(0.f, 1.f)
	]],
	float water_level_height = 0.f [[
		::anno::display_name("Water Level Height"),
		::anno::description("Higher values raise the water level that covers the surface."),
		::anno::in_group("Appearance", "Puddles"),
		::anno::hard_range(0.f, 1.f)
	]],
	uniform float2 puddles_scale = float2(1.3f) [[
		::anno::description("Larger numbers increase the size."),
		::anno::display_name("Puddles Scale"),
		::anno::in_group("Appearance", "Puddles")
	]],
	int puddle_map = 0 [[
		::anno::description("Selects between 3 different puddle maps, which can be indexed with the numbers 0, 1 and 2."),
		::anno::display_name("Puddle Map"),
		::anno::in_group("Appearance", "Puddles"),
		::anno::hard_range(0, 2)
	]],
	float puddles_amount = .0f [[
		::anno::display_name("Puddles Amount"),
		::anno::description("The amount of water puddles scattered across the material."),
		::anno::in_group("Appearance", "Puddles"),
		::anno::hard_range(0.f, 1.f)
	]],
	float puddle_transition_softness = 0.3f [[
		::anno::description("Controsl the softness of the transition of the wet puddles to the dry asphalt."),
		::anno::display_name("Puddle Transition Softness"),
		::anno::in_group("Appearance", "Puddles"),
		::anno::hard_range(0.f, 1.f)
	]],
	float murky_water_depth_fade = 0.33f [[
		::anno::display_name("Puddles Dirt Fade"),
		::anno::description("Controls the color that the water puddles fade to."),
		::anno::in_group("Appearance", "Puddles"),
		::anno::hard_range(0.f, 1.f)
	]],
	color murky_water_color = color(0.7f, 0.62f, 0.44f) [[
		::anno::display_name("Puddles Water Color"),
		::anno::description("Controls the color that the water puddles fade to."),
		::anno::in_group("Appearance", "Puddles")
	]],
	uniform float2 texture_translate = float2(0.0f) [[
		::anno::display_name("Translate"),
		::anno::description("Controls the position of the texture."),
		::anno::in_group("Transform")
	]],
	float texture_rotate = 0.f [[
		::anno::description("Rotates angle of the texture in degrees."),
		::anno::display_name("Rotate"),
		::anno::in_group("Transform")
	]],
	uniform float2 texture_scale = float2(1.0f) [[
		::anno::description("Larger numbers increase the size."),
		::anno::display_name("Scale"),
		::anno::in_group("Transform"),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f))
	]],
	uniform bool enable_round_corners = false [[
		::anno::description("Enables the round corner effect. Comes at a slight performance cost as additional raytracing calls are required to evaluate the round corner effect."),
		::anno::display_name("Round Corners"),
		::anno::in_group("Round Corners")
	]],
	uniform float radius_mm = 4.f [[
		::anno::description("Radius of the rounded corners in millimeters (mm)."),
		::anno::display_name("Radius mm"),
		::anno::in_group("Round Corners")
	]],
	uniform bool across_materials = false [[
		::anno::description("Applies the round corner effect across different materials when enabled."),
		::anno::display_name("Across Materials"),
		::anno::in_group("Round Corners")
	]])
[[
	::anno::display_name("Asphalt Fine - Dry"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("asphalt", "road", "street", "ground", "multimaterial", "infinite tiling", "gray")),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::author("NVIDIA vMaterials"),
	::anno::thumbnail("./.thumbs/Asphalt_Fine.Asphalt_Fine.png")
]]
 = 
	let {
		bool tmp0 = false;
		material_surface tmp1(
			::df::custom_curve_layer(0.0204000007f, 1.f, 5.f, puddles(::nvidia::core_definitions::blend_colors(endless_texture(texture_2d("./textures/asphalt_fine_tarred_diff.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.497999996f, 0.451000005f, 0.423999995f), 8.f, true), color(asphalt_brightness * 0.349999994f + 0.649999976f), ::base::color_layer_multiply, 1.f, true).tint, histogram_range(float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[0], 0.807000041f, asphalt_roughness * 0.25f + 0.699999988f), endless_normal(texture_2d("./textures/asphalt_fine_tarred_norm.jpg", ::tex::gamma_linear), asphalt_bump_strength, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.5f, 0.5f, 1.f), 10.f), float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[1], float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[2], water_level_height + float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_puddles.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, 0.f, puddles_scale * texture_scale, ::base::texture_coordinate_uvw, 0), 2.f, float3(0.0419999994f), 3.62800026f, false))[puddle_map] * puddles_amount, puddle_transition_softness, murky_water_depth_fade, murky_water_color, 0.933000028f, 2.0999999f, asphalt_wetness).ao_out, ::df::microfacet_ggx_smith_bsdf(puddles(::nvidia::core_definitions::blend_colors(endless_texture(texture_2d("./textures/asphalt_fine_tarred_diff.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.497999996f, 0.451000005f, 0.423999995f), 8.f, true), color(asphalt_brightness * 0.349999994f + 0.649999976f), ::base::color_layer_multiply, 1.f, true).tint, histogram_range(float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[0], 0.807000041f, asphalt_roughness * 0.25f + 0.699999988f), endless_normal(texture_2d("./textures/asphalt_fine_tarred_norm.jpg", ::tex::gamma_linear), asphalt_bump_strength, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.5f, 0.5f, 1.f), 10.f), float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[1], float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[2], water_level_height + float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_puddles.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, 0.f, puddles_scale * texture_scale, ::base::texture_coordinate_uvw, 0), 2.f, float3(0.0419999994f), 3.62800026f, false))[puddle_map] * puddles_amount, puddle_transition_softness, murky_water_depth_fade, murky_water_color, 0.933000028f, 2.0999999f, asphalt_wetness).roughness_out * puddles(::nvidia::core_definitions::blend_colors(endless_texture(texture_2d("./textures/asphalt_fine_tarred_diff.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.497999996f, 0.451000005f, 0.423999995f), 8.f, true), color(asphalt_brightness * 0.349999994f + 0.649999976f), ::base::color_layer_multiply, 1.f, true).tint, histogram_range(float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[0], 0.807000041f, asphalt_roughness * 0.25f + 0.699999988f), endless_normal(texture_2d("./textures/asphalt_fine_tarred_norm.jpg", ::tex::gamma_linear), asphalt_bump_strength, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.5f, 0.5f, 1.f), 10.f), float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[1], float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[2], water_level_height + float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_puddles.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, 0.f, puddles_scale * texture_scale, ::base::texture_coordinate_uvw, 0), 2.f, float3(0.0419999994f), 3.62800026f, false))[puddle_map] * puddles_amount, puddle_transition_softness, murky_water_depth_fade, murky_water_color, 0.933000028f, 2.0999999f, asphalt_wetness).roughness_out, puddles(::nvidia::core_definitions::blend_colors(endless_texture(texture_2d("./textures/asphalt_fine_tarred_diff.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.497999996f, 0.451000005f, 0.423999995f), 8.f, true), color(asphalt_brightness * 0.349999994f + 0.649999976f), ::base::color_layer_multiply, 1.f, true).tint, histogram_range(float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[0], 0.807000041f, asphalt_roughness * 0.25f + 0.699999988f), endless_normal(texture_2d("./textures/asphalt_fine_tarred_norm.jpg", ::tex::gamma_linear), asphalt_bump_strength, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.5f, 0.5f, 1.f), 10.f), float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[1], float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[2], water_level_height + float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_puddles.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, 0.f, puddles_scale * texture_scale, ::base::texture_coordinate_uvw, 0), 2.f, float3(0.0419999994f), 3.62800026f, false))[puddle_map] * puddles_amount, puddle_transition_softness, murky_water_depth_fade, murky_water_color, 0.933000028f, 2.0999999f, asphalt_wetness).roughness_out * puddles(::nvidia::core_definitions::blend_colors(endless_texture(texture_2d("./textures/asphalt_fine_tarred_diff.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.497999996f, 0.451000005f, 0.423999995f), 8.f, true), color(asphalt_brightness * 0.349999994f + 0.649999976f), ::base::color_layer_multiply, 1.f, true).tint, histogram_range(float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[0], 0.807000041f, asphalt_roughness * 0.25f + 0.699999988f), endless_normal(texture_2d("./textures/asphalt_fine_tarred_norm.jpg", ::tex::gamma_linear), asphalt_bump_strength, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.5f, 0.5f, 1.f), 10.f), float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[1], float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[2], water_level_height + float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_puddles.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, 0.f, puddles_scale * texture_scale, ::base::texture_coordinate_uvw, 0), 2.f, float3(0.0419999994f), 3.62800026f, false))[puddle_map] * puddles_amount, puddle_transition_softness, murky_water_depth_fade, murky_water_color, 0.933000028f, 2.0999999f, asphalt_wetness).roughness_out, color(1.f, 1.f, 1.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::df::weighted_layer(1.f, ::df::diffuse_reflection_bsdf(puddles(::nvidia::core_definitions::blend_colors(endless_texture(texture_2d("./textures/asphalt_fine_tarred_diff.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.497999996f, 0.451000005f, 0.423999995f), 8.f, true), color(asphalt_brightness * 0.349999994f + 0.649999976f), ::base::color_layer_multiply, 1.f, true).tint, histogram_range(float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[0], 0.807000041f, asphalt_roughness * 0.25f + 0.699999988f), endless_normal(texture_2d("./textures/asphalt_fine_tarred_norm.jpg", ::tex::gamma_linear), asphalt_bump_strength, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.5f, 0.5f, 1.f), 10.f), float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[1], float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[2], water_level_height + float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_puddles.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, 0.f, puddles_scale * texture_scale, ::base::texture_coordinate_uvw, 0), 2.f, float3(0.0419999994f), 3.62800026f, false))[puddle_map] * puddles_amount, puddle_transition_softness, murky_water_depth_fade, murky_water_color, 0.933000028f, 2.0999999f, asphalt_wetness).diffuse_out, 0.f), bsdf(), puddles(::nvidia::core_definitions::blend_colors(endless_texture(texture_2d("./textures/asphalt_fine_tarred_diff.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.497999996f, 0.451000005f, 0.423999995f), 8.f, true), color(asphalt_brightness * 0.349999994f + 0.649999976f), ::base::color_layer_multiply, 1.f, true).tint, histogram_range(float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[0], 0.807000041f, asphalt_roughness * 0.25f + 0.699999988f), endless_normal(texture_2d("./textures/asphalt_fine_tarred_norm.jpg", ::tex::gamma_linear), asphalt_bump_strength, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.5f, 0.5f, 1.f), 10.f), float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[1], float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[2], water_level_height + float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_puddles.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, 0.f, puddles_scale * texture_scale, ::base::texture_coordinate_uvw, 0), 2.f, float3(0.0419999994f), 3.62800026f, false))[puddle_map] * puddles_amount, puddle_transition_softness, murky_water_depth_fade, murky_water_color, 0.933000028f, 2.0999999f, asphalt_wetness).normal_out), puddles(::nvidia::core_definitions::blend_colors(endless_texture(texture_2d("./textures/asphalt_fine_tarred_diff.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.497999996f, 0.451000005f, 0.423999995f), 8.f, true), color(asphalt_brightness * 0.349999994f + 0.649999976f), ::base::color_layer_multiply, 1.f, true).tint, histogram_range(float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[0], 0.807000041f, asphalt_roughness * 0.25f + 0.699999988f), endless_normal(texture_2d("./textures/asphalt_fine_tarred_norm.jpg", ::tex::gamma_linear), asphalt_bump_strength, false, false, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.5f, 0.5f, 1.f), 10.f), float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[1], float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, 0), 10.f, float3(0.344999999f, 0.875f, 0.579999983f), 10.f, false))[2], water_level_height + float3(endless_texture(texture_2d("./textures/asphalt_fine_tarred_multi_puddles.jpg", ::tex::gamma_linear), vmat_transform(texture_translate, 0.f, puddles_scale * texture_scale, ::base::texture_coordinate_uvw, 0), 2.f, float3(0.0419999994f), 3.62800026f, false))[puddle_map] * puddles_amount, puddle_transition_softness, murky_water_depth_fade, murky_water_color, 0.933000028f, 2.0999999f, asphalt_wetness).normal_out),
			material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
		material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
		color tmp3 = color(1.f, 1.f, 1.f);
		material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f));
		material_geometry tmp5(
			float3(0.f),
			1.f,
			enable_round_corners ? ::state::rounded_corner_normal(radius_mm * 0.001f, across_materials, 1.f) : ::state::normal());
		hair_bsdf tmp6 = hair_bsdf();
	} in
		material(
			thin_walled: tmp0,
			surface: tmp1,
			backface: tmp2,
			ior: tmp3,
			volume: tmp4,
			geometry: tmp5,
			hair: tmp6);

// 2 Dried with puddles
export material Asphalt_Fine_Dry_With_Puddles(*)
[[
	::anno::display_name("Asphalt Fine - Dry with Puddles"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("asphalt", "road", "street", "ground", "multimaterial", "infinite tiling", "dry", "puddles", "water", "gray")),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::author("NVIDIA vMaterials"),
	::anno::thumbnail("./.thumbs/Asphalt_Fine.Asphalt_Fine_Dry_With_Puddles.png")
]] = Asphalt_Fine(
	asphalt_roughness:			0.5f,
	asphalt_wetness:			0.0f,
	asphalt_brightness:			0.7f,
	asphalt_bump_strength:		1.0f,
	water_level_height:			0.0f,
	puddles_scale:				float2(1.3f),
	puddle_map:					2,
	puddles_amount:				1.0f,
	puddle_transition_softness:	0.1f,
	murky_water_depth_fade:		0.368f,
	murky_water_color:			color(0.7f, 0.62f, .44f),
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	enable_round_corners:		false,
	radius_mm:					5.0f,
	across_materials:			true
);

// 3 Dried with strong puddles
export material Asphalt_Fine_Dry_With_Strong_Puddles(*)
[[
	::anno::display_name("Asphalt Fine - Dry with many Puddles"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("asphalt", "road", "street", "ground", "multimaterial", "infinite tiling", "puddles", "water", "gray")),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::author("NVIDIA vMaterials"),
	::anno::thumbnail("./.thumbs/Asphalt_Fine.Asphalt_Fine_Dry_With_Strong_Puddles.png")
]] = Asphalt_Fine(
	asphalt_roughness:			0.5f,
	asphalt_wetness:			0.0f,
	asphalt_brightness:			0.5f,
	asphalt_bump_strength:		1.0f,
	water_level_height:			0.3f,
	puddles_scale:				float2(1.3f),
	puddle_map:					2,
	puddles_amount:				1.0f,
	puddle_transition_softness:	0.1f,
	murky_water_depth_fade:		0.368f,
	murky_water_color:			color(0.7f, 0.62f, .44f),
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	enable_round_corners:		false,
	radius_mm:					5.0f,
	across_materials:			true
);

// 4 Moist
export material Asphalt_Fine_Moist(*)
[[
	::anno::display_name("Asphalt Fine - Moist"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("asphalt", "road", "street", "ground", "multimaterial", "infinite tiling", "wet", "moist", "water", "gray")),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::author("NVIDIA vMaterials"),
	::anno::thumbnail("./.thumbs/Asphalt_Fine.Asphalt_Fine_Moist.png")
]] = Asphalt_Fine(
	asphalt_roughness:			0.6f,
	asphalt_wetness:			0.3f,
	asphalt_brightness:			0.3f,
	asphalt_bump_strength:		1.0f,
	water_level_height:			0.0f,
	puddles_scale:				float2(1.3f),
	puddle_map:					0,
	puddles_amount:				0.0f,
	puddle_transition_softness:	0.3f,
	murky_water_depth_fade:		0.368f,
	murky_water_color:			color(0.7f, 0.62f, .44f),
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	enable_round_corners:		false,
	radius_mm:					5.0f,
	across_materials:			true
);

// 5 Medium Wet
export material Asphalt_Fine_Medium_Wet(*)
[[
	::anno::display_name("Asphalt Fine - Medium Wet"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("asphalt", "road", "street", "ground", "multimaterial", "infinite tiling", "wet", "water", "gray")),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::author("NVIDIA vMaterials"),
	::anno::thumbnail("./.thumbs/Asphalt_Fine.Asphalt_Fine_Medium_Wet.png")
]] = Asphalt_Fine(
	asphalt_roughness:			0.6f,
	asphalt_wetness:			0.3f,
	asphalt_brightness:			0.5f,
	asphalt_bump_strength:		1.0f,
	water_level_height:			0.45f,
	puddles_scale:				float2(1.3f),
	puddle_map:					0,
	puddles_amount:				0.0f,
	puddle_transition_softness:	0.3f,
	murky_water_depth_fade:		0.368f,
	murky_water_color:			color(0.7f, 0.62f, .44f),
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	enable_round_corners:		false,
	radius_mm:					5.0f,
	across_materials:			true
);

// 6 Moist with Puddles
export material Asphalt_Fine_Moist_With_Puddles(*)
[[
	::anno::display_name("Asphalt Fine - Moist with Puddles"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("asphalt", "road", "street", "ground", "multimaterial", "infinite tiling", "wet", "moist", "water", "gray")),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::author("NVIDIA vMaterials"),
	::anno::thumbnail("./.thumbs/Asphalt_Fine.Asphalt_Fine_Moist_With_Puddles.png")
]]  = Asphalt_Fine(
	asphalt_roughness:			0.5f,
	asphalt_wetness:			0.0f,
	asphalt_brightness:			0.5f,
	asphalt_bump_strength:		1.0f,
	water_level_height:			0.45f,
	puddles_scale:				float2(1.3f),
	puddle_map:					0,
	puddles_amount:				1.0f,
	puddle_transition_softness:	0.3f,
	murky_water_depth_fade:		0.368f,
	murky_water_color:			color(0.7f, 0.62f, .44f),
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	enable_round_corners:		false,
	radius_mm:					5.0f,
	across_materials:			true
);

// 7 Wet
export material Asphalt_Fine_Wet(*)
[[
	::anno::display_name("Asphalt Fine - Wet"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("asphalt", "road", "street", "ground", "multimaterial", "infinite tiling", "wet", "moist", "water", "gray")),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::author("NVIDIA vMaterials"),
	::anno::thumbnail("./.thumbs/Asphalt_Fine.Asphalt_Fine_Wet.png")
]] = Asphalt_Fine(
	asphalt_roughness:			0.6f,
	asphalt_wetness:			0.3f,
	asphalt_brightness:			0.3f,
	asphalt_bump_strength:		1.0f,
	water_level_height:			0.6f,
	puddles_scale:				float2(1.3f),
	puddle_map:					2,
	puddles_amount:				0.0f,
	puddle_transition_softness:	0.6f,
	murky_water_depth_fade:		0.368f,
	murky_water_color:			color(0.7f, 0.62f, .44f),
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	enable_round_corners:		false,
	radius_mm:					5.0f,
	across_materials:			true
);

// 8 Wet with puddles
export material Asphalt_Wet_Puddles(*)
[[
	::anno::display_name("Asphalt Fine - Wet Puddles"),
	::anno::description(DESCRIPTION),
	::anno::copyright_notice(COPYRIGHT),
	::anno::key_words(string[]("asphalt", "road", "street", "ground", "puddles", "multimaterial", "infinite tiling", "wet", "moist", "water", "gray")),
	::anno::contributor("Maik Rohland"),
	::anno::contributor("Ruediger Raab"),
	::anno::author("NVIDIA vMaterials"),
	::anno::thumbnail("./.thumbs/Asphalt_Fine.Asphalt_Wet_Puddles.png")
]] = Asphalt_Fine(
	asphalt_roughness:			0.6f,
	asphalt_wetness:			0.3f,
	asphalt_brightness:			0.3f,
	asphalt_bump_strength:		1.0f,
	water_level_height:			0.6f,
	puddles_scale:				float2(1.3f),
	puddle_map:					2,
	puddles_amount:				1.0f,
	puddle_transition_softness:	0.6f,
	murky_water_depth_fade:		0.368f,
	murky_water_color:			color(0.7f, 0.62f, .44f),
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	enable_round_corners:		false,
	radius_mm:					5.0f,
	across_materials:			true
);