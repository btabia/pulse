/******************************************************************************
 *     Copyright 2024 NVIDIA Corporation. All rights reserved.
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/


mdl 1.5;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::blend_colors;
import ::nvidia::core_definitions::dimension;


const string COPYRIGHT = 
" Copyright 2024 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";




float histogram_range(float input, float range = 1.0f, float position = 0.5f)
{	
	float low = ::math::clamp(1.0 - ::math::min(((1.0 - position) + range * 0.5), (1.0 - position) * 2), 0.0, 1.0);
	float high = ::math::clamp(::math::min((position + range * 0.5 ), position * 2.0), 0.0, 1.0);
	return ::math::lerp(low, high, input);
}

float remap_xy_to_0_1(float input, float x, float y)
{
	return (input - x)/(y - x);
}

float histogram_scan_big(float input, float width, float position)
{
	return ::math::clamp(
				remap_xy_to_0_1(input,
					::math::lerp(-width, 1.0, position),
					::math::lerp(0.0, 1.0 + width, position)),
				0.0,
				1.0);
}

float3 normalmap_normal(
	uniform texture_2d texture,
	float factor = 1.0,
	::base::texture_coordinate_info uvw = ::base::texture_coordinate_info()
)
{
	float3 lookup = (::tex::lookup_float3(texture, float2(uvw.position.x, uvw.position.y)) - float3(0.5)) * (factor * 2.0);
	return ::math::normalize(uvw.tangent_u * lookup.x + uvw.tangent_v * lookup.y + ::state::normal() * (lookup.z + (1.0 - factor)));
}

::base::texture_coordinate_info transform_coordinate_2(
    float4x4 transform                                         
        [[ ::anno::description("A transformation to be applied to the source coordinates. rotation_translation_scale() is a suggested means to compute the transformation matrix.") ]],
    ::base::texture_coordinate_info coordinate = ::base::texture_coordinate_info()
        [[ ::anno::description("Coordinate, typically sourced from coordinate_source or coordinate_projection.") ]]
) [[ 
    ::anno::description("Transform a texture coordinate by a matrix.") ,
    ::anno::noinline()
  ]]
{
	// Version 2
	float4 r_position = transform * float4(coordinate.position.x,coordinate.position.y,coordinate.position.z,1);

	float4 u = transform[0];
	float3 ru = ::math::normalize(float3(u.x,u.y,u.z));
	float cos =  ru.x; 
	float sin =  -ru.y;

    return ::base::texture_coordinate_info(
        float3(r_position.x,r_position.y,r_position.z),
		::math::normalize(cos * coordinate.tangent_u - sin * coordinate.tangent_v),
		::math::normalize(cos * coordinate.tangent_v + sin * coordinate.tangent_u));
}


// Takes the standard input that every material has. It combines a couple of
// functions in one convenience function.
::base::texture_coordinate_info vmat_transform(
								float2 translation = float2(0.0, 0.0),
								float rotation     = 0.0,				// rotation in degrees
								float2 scaling     = float2(1.0, 1.0),
								uniform ::base::texture_coordinate_system system = ::base::texture_coordinate_uvw,
								uniform int uv_space       = 0
)
{
	float rotation_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	float4x4 scale =
	float4x4(1.0 /scaling.x, 0.             ,  0. ,     0.,
			 0.            , 1.0 /scaling.y ,  0. ,     0.,
			 0.            , 0.             ,  1.0,     0.,
			 translation.x , translation.y  ,  0.0,     1.);

    float s = ::math::sin(rotation_rad);
    float c = ::math::cos(rotation_rad);
    float4x4 rotate =
	float4x4(  c  ,  -s   , 0.0 , 0.0,
			   s  ,   c   , 0.0 , 0.0,
			   0.0,   0.0 , 1.0 , 0.0,
			   0. ,   0.0 , 0.0 , 1.);
	
	return transform_coordinate_2(scale*rotate, ::base::coordinate_source(system, uv_space));
}

export material Cobblestone_Big_and_Loose(
    float brightness = 0.6f [[
        ::anno::description("Adjusts the general brightness of the material."),
        ::anno::display_name("Brightness"),
        ::anno::in_group("Appearance"),
        ::anno::hard_range(0.f, 1.f)
    ]],
    float bricks_roughness = 1.0f [[
        ::anno::description("Adjusts the roughness of the bricks."),
        ::anno::display_name("Bricks Roughness"),
        ::anno::in_group("Appearance"),
        ::anno::hard_range(0.f, 1.f)
    ]],
    float water_height = 0.0f [[
        ::anno::description("Raise the level of water surrounding the bricks."),
        ::anno::display_name("Water Level"),
        ::anno::in_group("Appearance", "Water"),
        ::anno::hard_range(0.f, 1.f)
    ]],
    float water_transition_softness = 0.0f [[
        ::anno::description("Adjusts the softness of the transition from dry material to water. A softer transition will show areas, where the material gets moist first before being submerged in water."),
        ::anno::display_name("Water Transition Softness"),
        ::anno::in_group("Appearance", "Water"),
        ::anno::hard_range(0.f, 1.f)
    ]],
    float bump_strength = 1.45f [[
        ::anno::description("Specifies the strength of the bump, lowering this value males the surface appear flat."),
        ::anno::display_name("Bump Strength"),
        ::anno::in_group("Appearance"),
        ::anno::soft_range(0.f, 2.f)
    ]],
    float2 texture_translate = float2(0.f) [[
        ::anno::description("Controls the position of the texture."),
        ::anno::display_name("Translate"),
        ::anno::in_group("Transform")
    ]],
    float texture_rotate = 0.f [[
        ::anno::description("Rotates angle of the texture in degrees."),
        ::anno::display_name("Rotate"),
        ::anno::in_group("Transform"),
        ::anno::soft_range(0.f, 360.f)
    ]],
    float2 texture_scale = float2(1.0f) [[
        ::anno::description("Larger numbers increase the size."),
        ::anno::display_name("Scale"),
		::nvidia::core_definitions::dimension(float2(1.8f, 1.8f)),
        ::anno::in_group("Transform")
    ]],
    uniform int uv_space_index_1 = 0 [[
        ::anno::description("Use selected UV space for material."),
        ::anno::display_name("UV Space Index"),
        ::anno::in_group("Advanced")
    ]]
)
[[
	::anno::author("NVIDIA vMaterials"),
    ::anno::display_name("Cobblestone Big and Loose - Rough"),
    ::anno::description("A cobblestone material with large stones and wide gaps."),
	::anno::key_words(string[]("stone", "stones", "cobblestone", "paving", "outdoor", "architecture", "ground", "matte", "bumped", "weathered", "gray")),
	::anno::thumbnail("./.thumbs/Cobblestone_Big_and_Loose.Cobblestone_Big_and_Loose.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = 
    let {
        bool tmp0 = false;
        material_surface tmp1(
            ::df::custom_curve_layer(0.04f, 1.f, 5.f, ::math::lerp(1.f, histogram_scan_big(::math::pow(float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], 3.30900025f), 0.97f, 0.50f), ::math::smoothstep(water_height * 0.8f - (water_transition_softness * 0.44f + 0.01f), water_height * 0.8f + (water_transition_softness * 0.44f + 0.01f), float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])), ::df::microfacet_ggx_vcavities_bsdf(::math::lerp(0.f, ::math::lerp(histogram_range(float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 1.f, 0.855f), histogram_range(float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.408f, bricks_roughness * 0.694f + 0.306000024f), ::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_mask.png", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono), ::math::smoothstep(water_height * 0.8f - (water_transition_softness * 0.44f + 0.01f), water_height * 0.8f + (water_transition_softness * 0.44f + 0.01f), float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])) * ::math::lerp(0.f, ::math::lerp(histogram_range(float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 1.f, 0.855000019f), histogram_range(float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.41f, bricks_roughness * 0.69f + 0.306000024f), ::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_mask.png", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono), ::math::smoothstep(water_height * 0.8f - (water_transition_softness * 0.44f + 0.01f), water_height * 0.8f + (water_transition_softness * 0.44f + 0.01f), float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])), ::math::lerp(0.f, ::math::lerp(histogram_range(float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 1.f, 0.855000019f), histogram_range(float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.41f, bricks_roughness * 0.69f + 0.306000024f), ::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_mask.png", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono), ::math::smoothstep(water_height * 0.8f - (water_transition_softness * 0.44f + 0.01f), water_height * 0.8f + (water_transition_softness * 0.44f + 0.01f), float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])) * ::math::lerp(0.f, ::math::lerp(histogram_range(float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 1.f, 0.855000019f), histogram_range(float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[0], 0.41f, bricks_roughness * 0.69f + 0.306000024f), ::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_mask.png", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono), ::math::smoothstep(water_height * 0.8f - (water_transition_softness * 0.44f + 0.01f), water_height * 0.8f + (water_transition_softness * 0.44f + 0.01f), float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])), color(1.f, 1.f, 1.f), ::state::texture_tangent_u(0), ::df::scatter_reflect), ::df::diffuse_reflection_bsdf(::nvidia::core_definitions::blend_colors(::nvidia::core_definitions::blend_colors(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_diff.jpg", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), ::math::lerp(color(0.51f, 0.51f, 0.51f), color(1.f, 1.f, 1.f), ::math::smoothstep(water_height * 0.8f - (water_transition_softness * 0.44f + 0.01f), water_height * 0.8f + (water_transition_softness * 0.44f + 0.01f), float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint, color(0.f, 0.f, 0.f), ::base::color_layer_multiply, ::math::lerp(0.349999994f, 0.f, brightness), true).tint, color(0.284646988f, 0.245784f, 0.231759995f), ::base::color_layer_screen, ::math::smoothstep(water_height * 0.8f - (water_transition_softness * 0.44f + 0.01f), water_height * 0.8f + (water_transition_softness * 0.44f + 0.01f), float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2]) * (1.f - ::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_mask.png", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono) * 0.248000011f, true).tint, 0.f), ::state::normal()),
            material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        color tmp3 = color(1.f, 1.f, 1.f);
        material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f));
        material_geometry tmp5(
            float3(0.f),
            1.f,
            normalmap_normal(texture_2d("./textures/cobblestone_big_and_loose_norm.jpg", ::tex::gamma_linear), ::math::lerp(0.f, bump_strength, ::math::smoothstep(water_height * 0.8f - (water_transition_softness * 0.44f + 0.01f), water_height * 0.8f + (water_transition_softness * 0.44f + 0.01f), float3(::base::file_texture(texture_2d("./textures/cobblestone_big_and_loose_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2])), vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index_1)));
    } in
        material(
            thin_walled: tmp0,
            surface: tmp1,
            backface: tmp2,
            ior: tmp3,
            volume: tmp4,
            geometry: tmp5);



export material Cobblestone_Big_and_Loose_Shiny(*)
[[
	::anno::author("NVIDIA vMaterials"),
    ::anno::display_name("Cobblestone Big and Loose - Shiny"),
    ::anno::description("A cobblestone material with large stones and wide gaps."),
	::anno::key_words(string[]("stone", "stones", "cobblestone", "paving", "outdoor", "architecture", "ground", "shiny", "bumped", "weathered", "gray")),
	::anno::thumbnail("./.thumbs/Cobblestone_Big_and_Loose.Cobblestone_Big_and_Loose_Shiny.png"),
	::anno::copyright_notice(COPYRIGHT)
]] = Cobblestone_Big_and_Loose
(
	brightness:					0.8f,
	bricks_roughness:			0.3f,
	water_height:				0.0f,
	water_transition_softness:	0.0f,
	bump_strength:				1.45f,
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	uv_space_index_1:			0
);



export material Cobblestone_Big_and_Loose_Wet_Grout(*)
[[
	::anno::author("NVIDIA vMaterials"),
    ::anno::display_name("Cobblestone Big and Loose - Wet Grout"),
    ::anno::description("A cobblestone material with large stones and wide gaps."),
	::anno::key_words(string[]("stone", "stones", "cobblestone", "paving", "outdoor", "architecture", "ground", "shiny", "bumped", "weathered", "wet", "water", "moist", "gray")),
	::anno::thumbnail("./.thumbs/Cobblestone_Big_and_Loose.Cobblestone_Big_and_Loose_Wet_Grout.png"),
	::anno::copyright_notice(COPYRIGHT)
]] = Cobblestone_Big_and_Loose
(
	brightness:					0.121f,
	bricks_roughness:			0.7f,
	water_height:				0.61f,
	water_transition_softness:	0.5,
	bump_strength:				1.45f,
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	uv_space_index_1:			0
);



export material Cobblestone_Big_and_Loose_Wet(*)
[[
	::anno::author("NVIDIA vMaterials"),
    ::anno::display_name("Cobblestone Big and Loose - Wet"),
    ::anno::description("A cobblestone material with large stones and wide gaps."),
	::anno::key_words(string[]("stone", "stones", "cobblestone", "paving", "outdoor", "architecture", "ground", "shiny", "bumped", "weathered", "wet", "water", "moist", "gray")),
	::anno::thumbnail("./.thumbs/Cobblestone_Big_and_Loose.Cobblestone_Big_and_Loose_Wet.png"),
	::anno::copyright_notice(COPYRIGHT)
]] = Cobblestone_Big_and_Loose
(
	brightness:					0.0f,
	bricks_roughness:			0.166f,
	water_height:				0.68f,
	water_transition_softness:	0.9,
	bump_strength:				1.45f,
	texture_translate:			float2(0.0f),
	texture_rotate:				0.0f,
	texture_scale:				float2(1.0f),
	uv_space_index_1:			0
);





